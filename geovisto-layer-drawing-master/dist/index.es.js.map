{"version":3,"file":"index.es.js","sources":["../src/util/constants.ts","../src/util/polyHelpers.ts","../src/util/baseHelpers.ts","../src/tools/AbstractTool/AbstractTool.ts","../src/tools/EditTool/EditTool.ts","../src/tools/DeselectTool/DeselectTool.ts","../src/tools/PaintTool/PaintTool.ts","../src/tools/EraseTool/EraseTool.ts","../src/components/useKnife.ts","../src/tools/GeometricSliceTool/GeometricSliceTool.ts","../src/tools/FreehandSliceTool/FreehandSliceTool.ts","../src/tools/MarkerTool/MarkerTool.ts","../src/tools/TopologyTool/TopologyTool.ts","../src/tools/JoinTool/JoinTool.ts","../src/tools/LineTool/LineTool.ts","../src/tools/PolygonTool/PolygonTool.ts","../src/tools/RemoveTool/RemoveTool.ts","../src/tools/SearchTool/SearchTool.ts","../src/tools/TransformTool/TransformTool.ts","../src/DrawingLayerToolState.ts","../src/DrawingLayerToolDefaults.ts","../src/inputs/DrawingSelectFormInput.ts","../src/util/inputs.ts","../src/sidebar/components/AbstractControl/AbstractControlState.ts","../src/sidebar/components/AbstractControl/AbstractControl.ts","../src/sidebar/components/DataControl/DataControlUtils.ts","../src/sidebar/components/DataControl/DataControlState.ts","../src/sidebar/components/DataControl/DataControl.ts","../src/sidebar/components/MarkerControl/MarkerControlState.ts","../src/sidebar/components/MarkerControl/MarkerControl.ts","../src/sidebar/components/PolyControl/PolyControlState.ts","../src/sidebar/components/PolyControl/PolyControl.ts","../src/sidebar/components/BrushControl/BrushControl.ts","../src/sidebar/components/SearchControl/SearchControlState.ts","../src/sidebar/components/SearchControl/SearchControl.ts","../src/sidebar/components/GeoJSONControl/GeoJSONControlState.ts","../src/sidebar/components/GeoJSONControl/GeoJSONControl.ts","../src/sidebar/DrawingLayerToolMapFormState.ts","../src/tools/GeoJSONTool/GeoJSONTool.ts","../src/sidebar/DrawingLayerToolMapForm.ts","../src/components/useDrawingToolbar.ts","../src/rules/shared.ts","../src/rules/intersectPolygons.ts","../src/rules/joinPolygons.ts","../src/rules/diffPolygons.ts","../src/DrawingLayerTool.ts","../src/GeovistoDrawingLayerTool.ts"],"sourcesContent":["/**\n * @author Andrej Tlcina\n */\n\nimport L from \"leaflet\";\n\nexport const NOT_FOUND = -1;\n\nexport const FIRST = 0;\n\nexport const SPACE_BAR = 32;\n\nexport const highlightStyles = { fillOpacity: 0.5, opacity: 0.2 };\nexport const normalStyles = { fillOpacity: 0.2, opacity: 0.5 };\n\n/**\n * icon options default\n */\nexport const iconStarter = {\n  shadowUrl: undefined,\n  iconAnchor: new L.Point(12, 12),\n  iconSize: new L.Point(24, 24),\n};\n\nexport const ICON_SRCS: string[] = [\n  \"https://upload.wikimedia.org/wikipedia/commons/0/0a/Marker_location.png\",\n  \"https://icons.iconarchive.com/icons/icons-land/vista-map-markers/32/Map-Marker-Flag-1-Right-Azure-icon.png\",\n];\nexport const COLORS: string[] = [\n  \"#1ABC9C\",\n  \"#16A085\",\n  \"#2ECC71\",\n  \"#27AE60\",\n  \"#3498DB\",\n  \"#2980B9\",\n  \"#9B59B6\",\n  \"#8E44AD\",\n  \"#34495E\",\n  \"#2C3E50\",\n  \"#F1C40F\",\n  \"#F39C12\",\n  \"#E67E22\",\n  \"#D35400\",\n  \"#E74C3C\",\n  \"#C0392B\",\n  \"#ECF0F1\",\n  \"#BDC3C7\",\n  \"#95A5A6\",\n  \"#7F8C8D\",\n];\n\nexport type SelectOpt = {\n  label: string;\n  value: number;\n  selected?: boolean;\n};\n\nexport type SelectOpts = Array<SelectOpt>;\n\nexport const STROKES: SelectOpts = [\n  { label: \"thin\", value: 3 },\n  { label: \"medium\", value: 5, selected: true },\n  { label: \"bold\", value: 7 },\n];\nexport const ADMIN_LEVELS: SelectOpts = [\n  { label: \"State\", value: 2 },\n  { label: \"Province\", value: 4, selected: true },\n  { label: \"5 (depends on country)\", value: 5 },\n  { label: \"6 (depends on country)\", value: 6 },\n  { label: \"7 (depends on country)\", value: 7 },\n  { label: \"8 (depends on country)\", value: 8 },\n  { label: \"9 (depends on country)\", value: 9 },\n  { label: \"10 (depends on country)\", value: 10 },\n];\n","import {\n  DrawnObject,\n  DrawnOptions,\n  GeoFeature,\n  LatLngs,\n  TurfPolygon,\n  LayerType,\n} from \"./../model/types/index\";\nimport L, { LatLng } from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport \"leaflet/dist/leaflet.css\";\n\nimport { STROKES, COLORS, normalStyles } from \"./constants\";\n\nimport * as turf from \"@turf/turf\";\nimport { LooseObject } from \"../model/types\";\nimport { AllGeoJSON, Geometry } from \"@turf/turf\";\n\ntype StyleOptions = DrawnOptions;\n\n/**\n * @author Andrej Tlcina\n */\n\n/**\n * maps feature types to leaflet types\n */\nexport const getLeafletTypeFromFeature = (\n  feature: GeoJSON.Feature\n): LayerType | \"\" => {\n  switch (feature?.geometry?.type) {\n    case \"Polygon\":\n      return \"polygon\";\n    case \"LineString\":\n      return \"polyline\";\n    case \"Point\":\n      return \"marker\";\n    default:\n      return \"\";\n  }\n};\n\n/**\n * converts GeoJSON properties to Leaflet options\n */\nexport const convertPropertiesToOptions = (\n  properties: LooseObject\n): StyleOptions => {\n  const options: LooseObject = { draggable: true, transform: true };\n  if (!properties) return options;\n  options.weight = properties[\"stroke-width\"] || STROKES[1].value;\n  options.color = properties[\"fill\"] || COLORS[0];\n  options.fillOpacity = properties[\"fill-opacity\"] || normalStyles.fillOpacity;\n  options.opacity = properties[\"stroke-opacity\"] || normalStyles.opacity;\n\n  return options;\n};\n\n/**\n * converts Leaflet options to GeoJSON properties\n */\nexport const convertOptionsToProperties = (\n  options: StyleOptions\n): LooseObject => {\n  const properties: LooseObject = { draggable: true, transform: true };\n  properties[\"stroke-width\"] = options.weight || STROKES[1].value;\n  properties[\"fill\"] = options.color || COLORS[0];\n  // * so we don't save selected polygon\n  properties[\"fill-opacity\"] = normalStyles.fillOpacity;\n  properties[\"stroke-opacity\"] = normalStyles.opacity;\n\n  return properties;\n};\n\n/**\n * returns GeoJSON representation, always array of them\n * used in case of selected layer, which can be 'Multi' object\n */\nexport const getGeoJSONFeatures = (\n  layer: DrawnObject\n): Array<GeoJSON.Feature> | null => {\n  if (!layer) return null;\n  const drawnGeoJSON = layer.toGeoJSON();\n  const feature =\n    drawnGeoJSON.type === \"FeatureCollection\"\n      ? drawnGeoJSON.features\n      : [drawnGeoJSON];\n  return feature;\n};\n\n/**\n * gets GeoJSON representation from layer structure\n * gets only first one, because 'Multi' object is not expected to be created\n *\n * @param {Layer} layer\n * @returns\n */\nexport const getFirstGeoJSONFeature = (\n  layer: DrawnObject\n): GeoJSON.Feature | null => {\n  if (!layer) return null;\n  const geoFeatures = getGeoJSONFeatures(layer);\n  const feature = geoFeatures ? geoFeatures[0] : null;\n  return feature;\n};\n\n/**\n * checks if feature is polygon\n */\nexport const isFeaturePoly = (\n  feature: GeoJSON.Feature | GeoJSON.FeatureCollection | null\n): boolean => {\n  if (!feature) return false;\n  if (feature?.type === \"FeatureCollection\") {\n    const f = feature.features[0];\n    return (\n      f?.geometry?.type === \"Polygon\" || f?.geometry?.type === \"MultiPolygon\"\n    );\n  }\n  return (\n    feature?.geometry?.type === \"Polygon\" ||\n    feature?.geometry?.type === \"MultiPolygon\"\n  );\n};\n\n/**\n * simplifies polygon feature according to pixels\n * AllGeoJSON was used here b/c that's what simplify takes\n */\nexport const simplifyFeature = (\n  feature: turf.AllGeoJSON,\n  pixels?: number\n): GeoJSON.Feature => {\n  const tolerance = pixels || window.customTolerance;\n\n  const result = turf.simplify(feature, { tolerance }) as GeoJSON.Feature;\n  return result;\n};\n\n/**\n * checks if layer structure is polygon\n */\nexport const isLayerPoly = (layer: DrawnObject): boolean => {\n  const feature = getFirstGeoJSONFeature(layer);\n  return feature ? isFeaturePoly(feature) : false;\n};\n\nexport const getConversionDepth = (feature: GeoJSON.Feature | null): 1 | 2 => {\n  let depth: 1 | 2 = 1;\n  if (feature?.geometry?.type === \"MultiPolygon\") {\n    depth = 2;\n  }\n  return depth;\n};\n\n/**\n * converts GeoJSON feature coords to leaflet coords\n * used only in one place, GeoFeature was selected here b/c features that are appended to exported GeoJSON have this type\n *\n * */\nexport const convertCoords = (feature: GeoFeature): LatLng | LatLngs | null => {\n  if (!feature) return null;\n\n  const coords = feature.geometry.coordinates;\n  const depth = getConversionDepth(feature);\n\n  if (feature.geometry.type === \"Point\") {\n    return L.GeoJSON.coordsToLatLng(\n      coords as [number, number] | [number, number, number]\n    );\n  } else if (feature.geometry.type === \"LineString\") {\n    return L.GeoJSON.coordsToLatLngs([coords], 1);\n  } else {\n    return L.GeoJSON.coordsToLatLngs(coords, depth);\n  }\n};\n\n/**\n * helper function for morphing GeoJSON feature to Polygon {Layer} structure\n */\nexport const morphFeatureToPolygon = (\n  feature: GeoJSON.Feature,\n  options = {},\n  simplify = false\n): DrawnObject => {\n  const depth = getConversionDepth(feature);\n  const simplified = simplify\n    ? simplifyFeature(feature as AllGeoJSON)\n    : feature;\n  const coords = (simplified.geometry as Geometry).coordinates;\n  const latlngs = L.GeoJSON.coordsToLatLngs(coords, depth);\n  const result = new (L as any).polygon(latlngs, {\n    ...options,\n    draggable: true,\n    transform: true,\n  });\n  result.layerType = \"polygon\";\n  if (result.dragging) result.dragging.disable();\n  return result;\n};\n","/**\n * @author Andrej Tlcina\n */\n\n/**\n * @brief is array or object empty\n */\nexport const isEmpty = <T>(obj: T): boolean => {\n  return (\n    typeof obj === \"object\" && obj !== null && Object.keys(obj).length === 0\n  );\n};\n\nexport const sortReverseAlpha = (a: number, b: number): 1 | 0 | -1 => {\n  if (a < b) return 1;\n  if (a > b) return -1;\n  return 0;\n};\n\nexport const sortAlpha = (a: number, b: number): 1 | 0 | -1 => {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n\nexport const isInt = (n: number): boolean => Number(n) === n && n % 1 === 0;\n\nexport const isFloat = (n: number): boolean => Number(n) === n && n % 1 !== 0;\n\nexport const getIntervalStep = (n: number): number => {\n  if (!n) return 0.0;\n  const split = String(n).split(\".\");\n  if (split.length === 2) {\n    const after = split[1];\n    const length = after.length - 1 < 0 ? 0 : after.length;\n    const allZeros = [...Array(length)].join(\"0\");\n\n    if (length === 1) return 0.01;\n    else if (length === 0) return 0.1;\n    else return Number(`0.${allZeros}1`);\n  }\n\n  return 0.0;\n};\n","import { Map } from \"leaflet\";\nimport { DrawnObject, LayerType } from \"../../model/types\";\nimport IDrawingLayerTool, {\n  ActiveTool,\n  DrawingForm,\n} from \"../../model/types/tool/IDrawingLayerTool\";\nimport { TAbstractTool, ToolProps } from \"./types\";\n\n/**\n * Class is Abstract for Drawing tool/feature\n *\n * Drawing tool/feature enables user to create geospatial objects\n *\n * Each tool/feature creates different objects or has different approach for the object creation\n */\nclass AbstractTool implements TAbstractTool {\n  public drawingTool: IDrawingLayerTool;\n  public sidebar: DrawingForm;\n  public leafletMap?: Map;\n  public activetool: ActiveTool | null;\n  public _isActive: boolean;\n\n  public constructor(props: ToolProps) {\n    // * keeps DrawingLayerTool class/object\n    this.drawingTool = props.drawingTool;\n    this.sidebar = props.drawingTool.getMapForm();\n    this.leafletMap = props.drawingTool.getMap()?.getState()?.getLeafletMap();\n\n    // * variable for keeping L.Draw object so it is possible to enable/disable it\n    this.activetool = null;\n    // * flag to find out if tool/feature is active\n    this._isActive = false;\n  }\n\n  public static NAME(): string {\n    return \"abstract-drawing-tool\";\n  }\n\n  /**\n   * to be extended\n   */\n  public getName(): string {\n    return AbstractTool.NAME();\n  }\n\n  /**\n   * to be extended\n   */\n  public getIconName(): string {\n    return \"fa fa-pencil\";\n  }\n\n  /**\n   * to be extended\n   */\n  public getTitle(): string {\n    return \"Abstract drawing tool\";\n  }\n\n  /**\n   * to be extended\n   */\n  public result(): LayerType | \"\" {\n    return \"\";\n  }\n\n  public canBeCanceled(): boolean {\n    return false;\n  }\n\n  public _redrawSidebar(type?: LayerType | \"\"): void {\n    this.drawingTool.redrawMapForm(type || \"\");\n  }\n\n  public setCurrentToolAsEnabled(): void {\n    this.sidebar.getState().setEnabledTool(this);\n  }\n\n  /**\n   * because I want to run setCurrentToolAsEnabled every time enabled is run I wrap it with this function\n   */\n  public activate(): void {\n    this.setCurrentToolAsEnabled();\n    this.enable();\n    this._isActive = true;\n    this._redrawSidebar(this.result());\n  }\n\n  public deactivate(): void {\n    this.disable();\n    this.activetool = null;\n    this._isActive = false;\n    this.sidebar.getState().setEnabledTool(null);\n    this._redrawSidebar();\n  }\n\n  /**\n   * to be extended\n   */\n  public enable(): void {\n    this._redrawSidebar(this.result());\n  }\n\n  /**\n   * to be extended\n   */\n  public disable(): void {\n    const activeTool = this.activetool;\n    if (activeTool) {\n      activeTool.disable();\n    }\n  }\n\n  /**\n   *\n   * @returns currently selected geo. object\n   */\n  public getSelectedLayer(): DrawnObject | null {\n    return this.drawingTool.getState().selectedLayer;\n  }\n\n  public isToolActive(): boolean {\n    return this._isActive;\n  }\n}\n\nexport default AbstractTool;\n","import L from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport { TEditTool } from \"./types\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport { DrawnObject } from \"../../model/types\";\n\nclass EditTool extends AbstractTool implements TEditTool {\n  public constructor(props: ToolProps) {\n    super(props);\n  }\n\n  public static NAME(): string {\n    return \"edit-drawing-tool\";\n  }\n\n  public getName(): string {\n    return EditTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-square\";\n  }\n\n  public getTitle(): string {\n    return \"Edit nodes tool\";\n  }\n\n  public result = (): \"\" => {\n    return \"\";\n  };\n\n  public enable = (): void => {\n    const selectedLayer = this.getSelectedLayer();\n\n    EditTool.initNodeEdit(selectedLayer);\n  };\n\n  public static initNodeEdit(\n    selectedLayer: DrawnObject | null,\n    disable = false\n  ): void {\n    if (selectedLayer?.editing) {\n      if (selectedLayer.editing._enabled || disable) {\n        selectedLayer.editing.disable();\n      } else {\n        selectedLayer.editing.enable();\n      }\n    }\n  }\n\n  public static disableNodeEdit = (selectedEl: DrawnObject | null): void => {\n    EditTool.initNodeEdit(selectedEl, true);\n  };\n}\n\nexport default EditTool;\n","import L from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport { EditTool } from \"../EditTool\";\nimport { DrawnObject } from \"../../model/types\";\nimport { TDeselectTool } from \"./types\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport IDrawingLayerTool from \"../../model/types/tool/IDrawingLayerTool\";\n\nclass DeselectTool extends AbstractTool implements TDeselectTool {\n  public constructor(props: ToolProps) {\n    super(props);\n  }\n\n  public static NAME(): string {\n    return \"deselect-drawing-tool\";\n  }\n\n  public getName(): string {\n    return DeselectTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-star-half-o\";\n  }\n\n  public getTitle(): string {\n    return \"Deselect tool\";\n  }\n\n  public result = (): \"\" => {\n    return \"\";\n  };\n\n  public enable = (): void => {\n    const selected = this.getSelectedLayer();\n\n    DeselectTool.deselect(selected, this.drawingTool);\n  };\n\n  public static deselect(\n    selected: DrawnObject | null,\n    tool: IDrawingLayerTool\n  ): void {\n    if (selected?.editing?._enabled) {\n      selected.editing.disable();\n    }\n    if (selected) {\n      tool?.normalizeElement(selected);\n      EditTool.initNodeEdit(selected, true);\n      tool?.getState().clearSelectedLayer();\n      tool?.redrawMapForm(\"\");\n      (document.querySelector(\n        \".leaflet-container\"\n      ) as HTMLElement).style.cursor = \"\";\n    }\n  }\n}\n\nexport default DeselectTool;\n","import L, { CircleMarker, LatLng, Layer, LeafletMouseEvent } from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport {\n  convertOptionsToProperties,\n  getConversionDepth,\n  isLayerPoly,\n  simplifyFeature,\n} from \"../../util/polyHelpers\";\nimport circle from \"@turf/circle\";\nimport { STROKES, highlightStyles, normalStyles } from \"../../util/constants\";\nimport union from \"@turf/union\";\nimport { TPaintTool } from \"./types\";\nimport { GeoFeature, LayerType, TurfPolygon } from \"../../model/types\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport * as turf from \"@turf/turf\";\nimport { TabState } from \"../../model/types/tool/IDrawingLayerTool\";\n\nconst DEFAULT_COLOR = \"#333333\";\nconst DEFAULT_RADIUS = 30;\nconst ERASER_COLOR = \"#ee000055\";\n\nclass PaintTool extends AbstractTool implements TPaintTool {\n  public static result: LayerType = \"painted\";\n\n  private tabState: TabState;\n  public _action: \"draw\" | \"erase\" | null;\n  public _circle: CircleMarker | null;\n  private _mouseDown: boolean;\n  public _latlng: LatLng;\n  private _maxCircleRadius: number;\n  private _minCircleRadius: number;\n  public _circleRadius: number;\n  private _accumulatedShape: GeoJSON.Feature | null;\n  private _shapeLayer: Layer | null;\n\n  public constructor(props: ToolProps) {\n    super(props);\n\n    const tabControl = this.drawingTool.getMapForm();\n    this.tabState = tabControl.getState();\n\n    this._action = null;\n    this._circle = null;\n    this._mouseDown = false;\n    this._latlng = L.latLng(0, 0);\n\n    this._maxCircleRadius = 100;\n    this._minCircleRadius = 10;\n    this._circleRadius = DEFAULT_RADIUS;\n\n    this._accumulatedShape = null;\n    this._shapeLayer = null;\n  }\n\n  public static NAME(): string {\n    return \"paint-drawing-tool\";\n  }\n\n  public getName(): string {\n    return PaintTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-paint-brush\";\n  }\n\n  public getTitle(): string {\n    return \"Brush drawing tool\";\n  }\n\n  public result = (): LayerType => {\n    return \"painted\";\n  };\n\n  public canBeCanceled = (): boolean => {\n    return true;\n  };\n\n  public enable = (): void => {\n    if (this._action == \"draw\") {\n      this.disable();\n    } else {\n      this.enablePaint();\n    }\n  };\n\n  /**\n   * enables painting\n   */\n  private enablePaint = (): void => {\n    this.startPaint();\n  };\n\n  /**\n   * getter\n   */\n  public getMouseDown = (): boolean => {\n    return this._mouseDown;\n  };\n\n  /**\n   * getter\n   */\n  public getBrushSize = (): number => {\n    return this._circleRadius;\n  };\n\n  /**\n   * getter\n   */\n  public getBrushSizeConstraints = (): {\n    maxBrushSize: number;\n    minBrushSize: number;\n  } => {\n    return {\n      maxBrushSize: this._maxCircleRadius,\n      minBrushSize: this._minCircleRadius,\n    };\n  };\n\n  /**\n   * resizes brush size (changes circle radius)\n   *\n   * @param {Number} val\n   */\n  public resizeBrush = (val: number): void => {\n    if (val && val <= this._maxCircleRadius && val >= this._minCircleRadius) {\n      this._circleRadius = val;\n      this._circle?.setRadius(val);\n    }\n  };\n\n  /**\n   * stops brush tool, and removes circle object from mouse cursor\n   */\n  public stop = (): void => {\n    this._action = null;\n    if (this._circle) {\n      this._circle.remove();\n    }\n    this._removeMouseListener();\n  };\n\n  /**\n   * creates circle around mouse cursor and applies event listeners\n   */\n  private startPaint = (): void => {\n    this.stop();\n    this._action = \"draw\";\n    this._addMouseListener();\n    if (this.leafletMap)\n      this._circle = L.circleMarker(this._latlng, {\n        color: DEFAULT_COLOR,\n      })\n        .setRadius(this._circleRadius)\n        .addTo(this.leafletMap);\n  };\n\n  /**\n   * removes all accumulated circles (painted polygons)\n   */\n  private clearPainted = (): void => {\n    this._accumulatedShape = null;\n    this._shapeLayer = null;\n  };\n\n  /**\n   * taken from https://stackoverflow.com/questions/27545098/leaflet-calculating-meters-per-pixel-at-zoom-level\n   */\n  private _pixelsToMeters = (): number => {\n    if (!this.leafletMap) return 0;\n\n    const metersPerPixel =\n      (40075016.686 * Math.abs(Math.cos((this._latlng.lat * Math.PI) / 180))) /\n      Math.pow(2, this.leafletMap.getZoom() + 8);\n\n    return this._circleRadius * metersPerPixel;\n  };\n\n  /**\n   * creates circle and appends it to accumulated circles object\n   */\n  private drawCircle = (): void => {\n    const brushColor = this.tabState.getSelectedColor() || DEFAULT_COLOR;\n    const brushStroke = this.tabState.getSelectedStroke() || STROKES[1].value;\n    const turfCircle = circle(\n      [this._latlng.lng, this._latlng.lat],\n      this._pixelsToMeters(),\n      {\n        steps: 16,\n        units: \"meters\",\n      }\n    );\n\n    if (!this._accumulatedShape) {\n      this._accumulatedShape = turfCircle;\n    } else {\n      this._accumulatedShape = union(\n        this._accumulatedShape as TurfPolygon,\n        turfCircle\n      );\n    }\n\n    if (this._accumulatedShape)\n      this._accumulatedShape.properties = {\n        fill: brushColor,\n        \"stroke-width\": brushStroke,\n      };\n\n    this._redrawShapes();\n  };\n\n  /**\n   * got through all accumulated circles and out put them on the map\n   */\n  private _redrawShapes = (): void => {\n    const selectedLayer = this.drawingTool.getState().selectedLayer;\n\n    const simplified = simplifyFeature(\n      this._accumulatedShape as turf.AllGeoJSON\n    ) as GeoFeature;\n    const coords = simplified.geometry.coordinates;\n    const depth = getConversionDepth(this._accumulatedShape);\n    const latlngs = L.GeoJSON.coordsToLatLngs(coords, depth);\n    const color = this._accumulatedShape?.properties?.fill || DEFAULT_COLOR;\n    const weight = this._accumulatedShape?.properties\n      ? this._accumulatedShape?.properties[\"stroke-width\"]\n      : STROKES[1].value;\n\n    const styles =\n      selectedLayer && isLayerPoly(selectedLayer)\n        ? highlightStyles\n        : normalStyles;\n\n    const opts =\n      this._action === \"erase\"\n        ? { color: ERASER_COLOR, draggable: false, transform: false }\n        : {\n            color,\n            weight,\n            draggable: true,\n            transform: true,\n          };\n\n    const result = new (L as any).polygon(latlngs, { ...opts, ...styles });\n\n    result?.dragging?.disable();\n\n    // * remove previously appended object onto map, otherwise we'll have duplicates\n    if (this._shapeLayer) this._shapeLayer.remove();\n    // * this will just append shapes onto map, but not into featureGroup of all objects\n    this._shapeLayer = result.addTo(this.leafletMap);\n  };\n\n  /**\n   * when fired brush stroke is appended to map\n   * created object is passed to 'createdListener' function of tool\n   */\n  private _fireCreatedShapes = (): void => {\n    // console.log('%cfired', 'color: #085f89');\n\n    this?.leafletMap?.fire(L.Draw.Event.CREATED, {\n      layer: this._shapeLayer,\n      layerType: this._action === \"erase\" ? \"erased\" : \"painted\",\n    });\n\n    this.clearPainted();\n  };\n\n  // ================= EVENT LISTENERS =================\n  public _addMouseListener = (): void => {\n    if (!this.leafletMap) return;\n    this.leafletMap.on(\"mousemove\", this._onMouseMove);\n    this.leafletMap.on(\"mousedown\", this._onMouseDown);\n    this.leafletMap.on(\"mouseup\", this._onMouseUp);\n  };\n  public _removeMouseListener = (): void => {\n    if (!this.leafletMap) return;\n    this.leafletMap.off(\"mousemove\", this._onMouseMove);\n    this.leafletMap.off(\"mousedown\", this._onMouseDown);\n    this.leafletMap.off(\"mouseup\", this._onMouseUp);\n  };\n  public _onMouseDown = (event: LeafletMouseEvent): void => {\n    if (!this.leafletMap) return;\n    this.leafletMap.dragging.disable();\n    this._mouseDown = true;\n    this._onMouseMove(event);\n  };\n  public _onMouseUp = (): void => {\n    if (!this.leafletMap) return;\n    this.leafletMap.dragging.enable();\n    this._mouseDown = false;\n    this._fireCreatedShapes();\n  };\n  public _onMouseMove = (event: LeafletMouseEvent): void => {\n    this._setLatLng(event.latlng);\n    if (this._mouseDown) {\n      this.drawCircle();\n    }\n  };\n  // ================= EVENT LISTENERS END =================\n\n  /**\n   * updates latlng so circle around mouse cursor follows it\n   */\n  public _setLatLng = (latlng: LatLng): void => {\n    if (latlng !== undefined) {\n      this._latlng = latlng;\n    }\n    if (this._circle) {\n      this._circle.setLatLng(this._latlng);\n    }\n  };\n\n  /**\n   * disables tool\n   */\n  public disable = (): void => {\n    this.stop();\n  };\n}\n\nexport default PaintTool;\n","import L, { LeafletEvent, TileEvent } from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { PaintTool } from \"../PaintTool\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport { CreatedEvent, LayerType } from \"../../model/types\";\nimport { TEraseTool } from \"./types\";\n\nconst ERASER_COLOR = \"#ee000055\";\n\nclass EraseTool extends PaintTool implements TEraseTool {\n  public static result: LayerType = \"erased\";\n\n  public constructor(props: ToolProps) {\n    super(props);\n\n    this.leafletMap?.on(\"draw:created\" as any, (e: TileEvent) =>\n      this.created((e as unknown) as CreatedEvent)\n    );\n  }\n\n  public static NAME(): string {\n    return \"eraser-drawing-tool\";\n  }\n\n  public getName(): string {\n    return EraseTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-eraser\";\n  }\n\n  public getTitle(): string {\n    return \"Eraser tool\";\n  }\n\n  public result = (): LayerType => {\n    return \"erased\";\n  };\n\n  public canBeCanceled = (): boolean => {\n    return true;\n  };\n\n  private created = (e: CreatedEvent): void => {\n    const layer = e.layer;\n    if (!layer) return;\n    if (e.layerType === this.result()) this.leafletMap?.removeLayer(layer);\n  };\n\n  public enable = (): void => {\n    if (this._action == \"erase\") {\n      this.disable();\n    } else {\n      this.startErase();\n    }\n  };\n\n  /**\n   * creates circle around mouse cursor and applies event listeners\n   */\n  private startErase = (): void => {\n    this.stop();\n    this._action = \"erase\";\n    this._addMouseListener();\n    if (this.leafletMap)\n      this._circle = L.circleMarker(this._latlng, {\n        color: ERASER_COLOR,\n      })\n        .setRadius(this._circleRadius)\n        .addTo(this.leafletMap);\n  };\n\n  /**\n   * button for erasing is clicked\n   */\n  public erase = (event: LeafletEvent): void => {\n    if (event.type == \"mousedown\") {\n      L.DomEvent.stop(event);\n      return;\n    }\n  };\n}\n\nexport default EraseTool;\n","import L, { DrawMap, DrawOptions } from \"leaflet\";\nimport \"leaflet-draw\";\nimport { LooseObject } from \"../model/types\";\n\n/**\n * @author Andrej Tlcina\n */\n\ndeclare module \"leaflet\" {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Draw {\n    class Slice extends Polyline {\n      public constructor(map: Map, params: LooseObject);\n    }\n  }\n}\n\n/**\n * extends polyline, it does not change a lot just its type to 'knife'\n */\nL.Draw.Slice = L.Draw.Polyline.extend({\n  statics: {\n    TYPE: \"knife\",\n  },\n  // @method initialize(): void\n  initialize: function (map: DrawMap, options: DrawOptions.PolylineOptions) {\n    // if touch, switch to touch icon\n    if (L.Browser.touch) {\n      this.options.icon = this.options.touchIcon;\n    }\n\n    // Need to set this here to ensure the correct message is used.\n    this.options.drawError.message = L.drawLocal.draw.handlers.polyline.error;\n\n    // Merge default drawError options with custom options\n    if (options && options.drawError) {\n      options.drawError = L.Util.extend(\n        {},\n        this.options.drawError,\n        options.drawError\n      );\n    }\n\n    // Save the type so super can fire, need to do this as cannot do this.TYPE :(\n    this.type = (L.Draw.Slice as any).TYPE;\n\n    L.Draw.Feature.prototype.initialize.call(this, map, options);\n  },\n  _calculateFinishDistance: function (potentialLatLng: any) {\n    let lastPtDistance;\n    if (this._markers.length > 0) {\n      let finishMarker;\n      if (\n        this.type === (L.Draw.Polyline as any).TYPE ||\n        this.type === (L.Draw.Slice as any).TYPE\n      ) {\n        finishMarker = this._markers[this._markers.length - 1];\n      } else if (this.type === (L.Draw.Polygon as any).TYPE) {\n        finishMarker = this._markers[0];\n      } else {\n        return Infinity;\n      }\n      const lastMarkerPoint = this._map.latLngToContainerPoint(\n          finishMarker.getLatLng()\n        ),\n        potentialMarker = new L.Marker(potentialLatLng, {\n          icon: this.options.icon,\n          zIndexOffset: this.options.zIndexOffset * 2,\n        });\n      const potentialMarkerPint = this._map.latLngToContainerPoint(\n        potentialMarker.getLatLng()\n      );\n      lastPtDistance = lastMarkerPoint.distanceTo(potentialMarkerPint);\n    } else {\n      lastPtDistance = Infinity;\n    }\n    return lastPtDistance;\n  },\n});\n","import L from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\nimport * as turf from \"@turf/turf\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport \"../../components/useKnife\";\nimport { getFirstGeoJSONFeature, isFeaturePoly } from \"../../util/polyHelpers\";\nimport { normalStyles } from \"../../util/constants\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport {\n  CreatedEvent,\n  DrawnObject,\n  LayerType,\n  TurfPolygon,\n} from \"../../model/types\";\nimport {\n  Geometry,\n  getCoord,\n  getCoords,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  Polygon,\n} from \"@turf/turf\";\nimport { TGeometricSliceTool } from \"./types\";\nimport { ActiveTool } from \"../../model/types/tool/IDrawingLayerTool\";\n\ntype LineObject = GeoJSON.Feature<LineString | MultiLineString>;\ntype PolyObject = GeoJSON.Feature<Polygon | MultiPolygon>;\n\nclass GeometricSliceTool extends AbstractTool implements TGeometricSliceTool {\n  public static result: LayerType | \"\" = \"knife\";\n\n  public constructor(props: ToolProps) {\n    super(props);\n\n    this.leafletMap?.on(\"draw:created\" as any, this.created as any);\n  }\n\n  public static NAME(): string {\n    return \"geometric-slice-drawing-tool\";\n  }\n\n  public getName(): string {\n    return GeometricSliceTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-scissors\";\n  }\n\n  public getTitle(): string {\n    return \"Division tool\";\n  }\n\n  public canBeCanceled = (): boolean => {\n    return true;\n  };\n\n  private created = (e: CreatedEvent): void => {\n    const layer = e.layer;\n    if (!layer) return;\n\n    // * SLICE\n    if (e.layerType === GeometricSliceTool.result) {\n      this.polySlice(layer);\n      this.deactivate();\n    }\n  };\n\n  /**\n   * @brief - inspired by https://gis.stackexchange.com/questions/344068/splitting-a-polygon-by-multiple-linestrings-leaflet-and-turf-js\n   *        - slices selected object with currently created one\n   */\n  public polySlice(layer: DrawnObject): void {\n    // * layer will always be 'polyline'\n    const lineFeat = getFirstGeoJSONFeature(layer);\n    const selectedLayer = this.drawingTool.getState().selectedLayer;\n\n    if (lineFeat && selectedLayer) {\n      const THICK_LINE_WIDTH = 0.00001;\n      const THICK_LINE_UNITS = \"kilometers\";\n      let offsetLine;\n      const selectedFeature = getFirstGeoJSONFeature(selectedLayer);\n\n      const isFeatPoly = isFeaturePoly(selectedFeature);\n\n      if (isFeatPoly) {\n        let coords;\n        let latlngs;\n        try {\n          offsetLine = turf.lineOffset(\n            (lineFeat as unknown) as LineString,\n            THICK_LINE_WIDTH,\n            {\n              units: THICK_LINE_UNITS,\n            }\n          );\n\n          const polyCoords = [];\n          // * push all of the coordinates of original line\n          for (\n            let j = 0;\n            j < (lineFeat.geometry as Geometry).coordinates.length;\n            j++\n          ) {\n            polyCoords.push((lineFeat.geometry as Geometry).coordinates[j]);\n          }\n          // * push all of the coordinates of offset line\n          for (\n            let j = offsetLine.geometry.coordinates.length - 1;\n            j >= 0;\n            j--\n          ) {\n            polyCoords.push(offsetLine.geometry.coordinates[j]);\n          }\n          // * to create linear ring\n          polyCoords.push((lineFeat.geometry as Geometry).coordinates[0]);\n\n          const thickLineString = turf.lineString(polyCoords as any);\n          const thickLinePolygon = turf.lineToPolygon(thickLineString);\n          const clipped = turf.difference(\n            selectedFeature as TurfPolygon,\n            thickLinePolygon\n          );\n          // clipped = simplifyFeature(clipped);\n          if (!clipped) return;\n\n          coords = clipped.geometry.coordinates;\n          this.drawingTool.getState().removeSelectedLayer();\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          coords.forEach((coord) => {\n            latlngs = L.GeoJSON.coordsToLatLngs(coord, 1);\n            const result = new (L as any).polygon(latlngs, {\n              ...selectedLayer.options,\n              ...normalStyles,\n            });\n            result.layerType = \"polygon\";\n            this.drawingTool.getState().addLayer(result);\n          });\n        } catch (error) {\n          console.error({ coords, latlngs, error });\n        }\n      }\n    }\n  }\n\n  private _dividePoly = (): void => {\n    if (!this.leafletMap) return;\n    this.activetool = new L.Draw.Slice(this.leafletMap, {\n      shapeOptions: {\n        color: \"#333\",\n        weight: 3,\n        draggable: true,\n        transform: true,\n        guideLayers: this.sidebar.getState().guideLayers,\n      },\n    }) as ActiveTool;\n    this.activetool.enable();\n  };\n\n  public enable = (): void => {\n    this._dividePoly();\n  };\n\n  public disable = (): void => {\n    const activeTool = this.activetool;\n\n    if (activeTool) {\n      activeTool.disable();\n    }\n\n    // * hide extra btn for disabling tools\n    const query = `.drawingtoolbar .${this.getName()} .extra-btn`;\n    const divideBtn = document.querySelector(query);\n    if (divideBtn) divideBtn.classList.add(\"hide\");\n  };\n}\n\nexport default GeometricSliceTool;\n","import L, { Layer } from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\nimport \"leaflet-pather\";\n\nimport { GeometricSliceTool } from \"../GeometricSliceTool\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport { TFreehandSliceTool } from \"./types\";\nimport { DrawnObject, LayerType } from \"../../model/types\";\n\ntype PatherEvent = Event & { polyline: { polyline: DrawnObject } };\n\ntype Pather = Layer & {\n  remove: (l: DrawnObject) => void;\n  on: (type: \"created\", callback: (e: PatherEvent) => void) => void;\n  removePath: (l: DrawnObject) => void;\n};\n\nclass FreehandSliceTool\n  extends GeometricSliceTool\n  implements TFreehandSliceTool {\n  public static result: LayerType | \"\" = \"\";\n\n  private pather: Pather;\n  private patherActive: boolean;\n\n  public constructor(props: ToolProps) {\n    super(props);\n\n    // * using any b/c I dont know how to declare class Pather in leaflet module :(\n    this.pather = new (L as any).Pather({\n      strokeWidth: 3,\n      smoothFactor: 5,\n      moduleClass: \"leaflet-pather\",\n      pathColour: \"#333\",\n    });\n\n    this.patherActive = false;\n\n    this.pather.on(\"created\", this.createdPath);\n  }\n\n  public static NAME(): string {\n    return \"freehand-slice-drawing-tool\";\n  }\n\n  public getName(): string {\n    return FreehandSliceTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-cutlery\";\n  }\n\n  public getTitle(): string {\n    return \"Freehand slice tool\";\n  }\n\n  public canBeCanceled = (): boolean => {\n    return true;\n  };\n\n  private _enableSlicing = (): void => {\n    const pather = this.pather;\n    const patherStatus = this.patherActive;\n    if (!patherStatus) {\n      this.leafletMap?.addLayer(pather);\n    } else {\n      this.leafletMap?.removeLayer(pather);\n    }\n\n    this.patherActive = !patherStatus;\n  };\n\n  /**\n   * @brief slices selected polygon with pather's freehand line\n   */\n  private createdPath = (e: PatherEvent) => {\n    // * get polyline object\n    const layer = e.polyline.polyline;\n\n    // * get Leaflet map\n    const map = this.leafletMap;\n\n    // * get sidebar state and pather object\n    const pather = this.pather;\n    // * SLICE\n    this.polySlice(layer);\n\n    // * we do not want path to stay\n    pather.removePath(layer);\n    // * we do not want to keep cutting (drawing)\n    map?.removeLayer(pather);\n    // * restore state\n    this.deactivate();\n  };\n\n  public enable = (): void => {\n    this._enableSlicing();\n  };\n\n  public disable = (): void => {\n    this.leafletMap?.removeLayer(this.pather);\n    this.patherActive = false;\n    const activeTool = this.activetool;\n    if (activeTool) {\n      activeTool.disable();\n    }\n\n    // * hide extra btn for disabling tools\n    const query = `.drawingtoolbar .${this.getName()} .extra-btn`;\n    const divideBtn = document.querySelector(query);\n    if (divideBtn) divideBtn.classList.add(\"hide\");\n  };\n}\n\nexport default FreehandSliceTool;\n","import { DrawnObject, LayerType, LooseObject } from \"./../../model/types/index\";\nimport L, { MarkerOptions } from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport { iconStarter } from \"../../util/constants\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport { TMarkerTool } from \"./types\";\nimport { ActiveTool } from \"../../model/types/tool/IDrawingLayerTool\";\n\ndeclare module \"leaflet\" {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Draw {\n    class ExtendedMarker extends Marker {\n      public constructor(map: Map, params: MarkerOptions);\n      public setIconOptions(opts: LooseObject): void;\n      public _marker: DrawnObject;\n    }\n  }\n}\n\n/**\n * @author Andrej Tlcina\n */\n\n/**\n * extends marker so we can change its options while marker tool is enabled\n */\nL.Draw.ExtendedMarker = L.Draw.Marker.extend({\n  setIconOptions: function (iconOpts: LooseObject) {\n    this.options.icon = iconOpts;\n  },\n});\n\nclass MarkerTool extends AbstractTool implements TMarkerTool {\n  public static result = \"marker\";\n\n  public constructor(props: ToolProps) {\n    super(props);\n  }\n\n  public static NAME(): string {\n    return \"marker-drawing-tool\";\n  }\n\n  public getName(): string {\n    return MarkerTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-map-marker\";\n  }\n\n  public getTitle(): string {\n    return \"Marker drawing tool\";\n  }\n\n  public result = (): LayerType | \"\" => {\n    return \"marker\";\n  };\n\n  public canBeCanceled = (): boolean => {\n    return true;\n  };\n\n  public _markerCreate = (connectClick = false): void => {\n    if (!this.leafletMap) return;\n    const additionalOpts = {\n      iconUrl: this.sidebar.getState().getSelectedIcon(),\n      connectClick,\n    };\n    const icon = new L.Icon({ ...iconStarter, ...additionalOpts });\n    const { guideLayers } = this.sidebar.getState();\n\n    this.activetool = new L.Draw.ExtendedMarker(this.leafletMap, {\n      icon,\n      draggable: true,\n      transform: true,\n      repeatMode: true,\n      guideLayers,\n      snapVertices: false,\n    } as MarkerOptions) as ActiveTool;\n    this.activetool.enable();\n  };\n\n  public enable = (): void => {\n    this._markerCreate();\n  };\n}\n\nexport default MarkerTool;\n","import L, { FeatureGroup, LatLng, Marker, Polyline } from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { MarkerTool } from \"../MarkerTool\";\nimport { normalStyles } from \"../../util/constants\";\nimport {\n  CreatedEvent,\n  DrawnObject,\n  LayerType,\n  LooseObject,\n  Optional,\n} from \"../../model/types\";\nimport { CustomMarker, LeafletDrag, TTopologyTool } from \"./types\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport IDrawingLayerToolState, {\n  IndexedVertices,\n} from \"../../model/types/tool/IDrawingLayerToolState\";\n\nclass TopologyTool extends MarkerTool implements TTopologyTool {\n  public constructor(props: ToolProps) {\n    super(props);\n\n    this.leafletMap?.on(\"draw:created\" as any, this.created as any);\n  }\n\n  public static NAME(): string {\n    return \"topology-drawing-tool\";\n  }\n\n  public getName(): string {\n    return TopologyTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-sitemap\";\n  }\n\n  public getTitle(): string {\n    return \"Topology drawing tool\";\n  }\n\n  public result = (): LayerType | \"\" => {\n    return \"marker\";\n  };\n\n  public canBeCanceled = (): boolean => {\n    return true;\n  };\n\n  public created = (e: CreatedEvent): void => {\n    const layer = e.layer;\n    if (!layer) return;\n    layer.layerType = e.layerType;\n\n    // * MARKER\n    if (this.isConnectMarker(layer)) {\n      this.plotTopology(null, layer);\n    }\n  };\n\n  public isConnectMarker = (layer: DrawnObject): boolean => {\n    return this.drawingTool.getState().isConnectMarker(layer);\n  };\n\n  public enable = (): void => {\n    this._markerCreate(true);\n  };\n\n  public plotTopology(\n    chosen: Optional<DrawnObject[]> = null,\n    createdMarker: Optional<DrawnObject> = null\n  ): void {\n    const toolState = this.drawingTool.getState();\n    const selectedLayer = toolState.selectedLayer;\n\n    const layersObj: LooseObject = toolState.featureGroup._layers;\n    const layerArr = [...Object.values(layersObj)];\n    const allConnected = layerArr\n      .filter((_) => toolState.isConnectMarker(_))\n      .reverse();\n    let _markers = chosen || allConnected;\n    _markers = createdMarker ? [createdMarker, ..._markers] : _markers;\n\n    const index = 0;\n    // * chronologically the last created\n    const firstMarker = _markers[index];\n\n    const selectedLayerIsConnectMarker = toolState.selectedLayerIsConnectMarker();\n\n    // * choose selected object or the second to last created\n    const secondMarker =\n      selectedLayerIsConnectMarker && !chosen\n        ? selectedLayer\n        : _markers[index + 1];\n    if (secondMarker) {\n      const { lat: fLat, lng: fLng } = firstMarker.getLatLng();\n      const { lat: sLat, lng: sLng } = secondMarker.getLatLng();\n\n      // * create vertice\n      const _latlng = [L.latLng(fLat, fLng), L.latLng(sLat, sLng)];\n      const poly = new (L as any).polyline(_latlng, {\n        color: \"#563412\",\n        weight: 3,\n        ...normalStyles,\n      });\n      poly.layerType = \"vertice\";\n      if (!this._haveSameVertice(poly)) {\n        toolState.pushVertice(poly);\n        toolState.addLayer(poly);\n      }\n    }\n\n    this._mapMarkersToVertices(_markers);\n  }\n\n  /**\n   * @brief loops through each of the vertices and checks if\n   *        vertice with certain coordinates is already created\n   */\n  private _haveSameVertice(current: Polyline): boolean {\n    const found = this.drawingTool\n      .getState()\n      .createdVertices.find((vertice: DrawnObject) => {\n        const firstPointOfVertice = vertice.getLatLngs()[0] as LatLng;\n        const secondPointOfVertice = vertice.getLatLngs()[1] as LatLng;\n        const firstPointOfCurrent = current.getLatLngs()[0] as LatLng;\n        const secondPointOfCurrent = current.getLatLngs()[1] as LatLng;\n\n        return (\n          (firstPointOfVertice.equals(firstPointOfCurrent) &&\n            secondPointOfVertice.equals(secondPointOfCurrent)) ||\n          (firstPointOfVertice.equals(secondPointOfCurrent) &&\n            secondPointOfVertice.equals(firstPointOfCurrent))\n        );\n      });\n\n    return Boolean(found);\n  }\n\n  /**\n   * @brief maps through each of the markes and if its coordinates fit vertice's coordinates\n   *        then vertice is mapped onto marker id\n   */\n  private _mapMarkersToVertices(_markers: CustomMarker[]): void {\n    const toolState = this.drawingTool.getState();\n\n    _markers\n      .map((marker) => ({\n        latlng: marker.getLatLng(),\n        lId: marker._leaflet_id,\n        marker,\n      }))\n      .forEach(({ latlng, lId }) => {\n        toolState.createdVertices.forEach(\n          (vertice: DrawnObject, index: number) => {\n            // * used indexing instead of another loop (vertices have only 2 points)\n\n            const firstPoint = vertice.getLatLngs()[0] as LatLng;\n            const secondPoint = vertice.getLatLngs()[1] as LatLng;\n\n            const spread = toolState.mappedMarkersToVertices[lId] || {};\n            // * depending on if first or second latlng of vertice matches with marker's latlng\n            // * we save this information so we know which side we should move on drag\n            if (firstPoint.equals(latlng)) {\n              toolState.setVerticesToMarker(lId, {\n                ...spread,\n                [`${index}-0`]: vertice,\n              });\n            } else if (secondPoint.equals(latlng)) {\n              toolState.setVerticesToMarker(lId, {\n                ...spread,\n                [`${index}-1`]: vertice,\n              });\n            }\n          }\n        );\n      });\n  }\n\n  /**\n   * @brief event listener so vetice is dragged with marker\n   */\n  public static applyTopologyMarkerListeners(\n    layer: DrawnObject,\n    state: IDrawingLayerToolState\n  ): void {\n    layer.on(\"drag\", (event: LeafletDrag) => {\n      const { latlng, target } = event;\n      const markerVertices = state.mappedMarkersToVertices[target._leaflet_id];\n\n      TopologyTool.changeVerticesLocation(latlng, markerVertices);\n    });\n  }\n\n  /**\n   * @brief called on drag to change vertice's point location\n   */\n  private static changeVerticesLocation(\n    latlng: LatLng,\n    markerVertices?: IndexedVertices\n  ): void {\n    if (!markerVertices) return;\n\n    Object.keys(markerVertices).forEach((key) => {\n      const vertice: DrawnObject = markerVertices[key];\n      const splitKey = key?.split(\"-\");\n      const idx = splitKey ? splitKey[1] : undefined;\n      if (idx === undefined) return;\n      // ? for some reason cloneLatLngs has return type of LatLng[][] even though it returns value of type LatLng[]\n      const latLngs = (L.LatLngUtil.cloneLatLngs(\n        vertice.getLatLngs() as LatLng[]\n      ) as unknown) as LatLng[];\n      latLngs[Number(idx)] = latlng;\n      vertice.setLatLngs(latLngs);\n    });\n  }\n}\n\nexport default TopologyTool;\n","import L from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport {\n  getGeoJSONFeatures,\n  isFeaturePoly,\n  isLayerPoly,\n  morphFeatureToPolygon,\n} from \"../../util/polyHelpers\";\nimport union from \"@turf/union\";\nimport { isEmpty } from \"../../util/baseHelpers\";\nimport { FIRST } from \"../../util/constants\";\nimport { TopologyTool } from \"../TopologyTool\";\nimport { TJoinTool } from \"./types\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport { DrawnObject, Optional, TurfPolygon } from \"../../model/types\";\n\nconst MAX_CHOSEN = 2;\n\nclass JoinTool extends TopologyTool implements TJoinTool {\n  private chosenLayers: DrawnObject[];\n\n  public constructor(props: ToolProps) {\n    super(props);\n\n    // * selected for join\n    this.chosenLayers = [];\n  }\n\n  public static NAME(): string {\n    return \"join-drawing-tool\";\n  }\n\n  public getName(): string {\n    return JoinTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-plus-circle\";\n  }\n\n  public getTitle(): string {\n    return \"Join drawing tool\";\n  }\n\n  public result = (): \"\" => {\n    return \"\";\n  };\n\n  public canBeCanceled = (): boolean => {\n    return true;\n  };\n\n  public enable = (): void => {\n    this._redrawSidebar(this.result());\n    this._isActive = true;\n    const toolState = this.drawingTool.getState();\n    toolState.setSelecting(true);\n    (document.querySelector(\".leaflet-container\") as HTMLElement).style.cursor =\n      \"crosshair\";\n  };\n\n  public disable = (): void => {\n    this._redrawSidebar(this.result());\n    this._isActive = false;\n    const toolState = this.drawingTool.getState();\n    toolState.setSelecting(false);\n    (document.querySelector(\".leaflet-container\") as HTMLElement).style.cursor =\n      \"\";\n    this.deselectChosenLayers();\n  };\n\n  /**\n   * checks if geo. object may be push to an array and be joined later on\n   */\n  private canPushToChosen = (layer: DrawnObject): boolean => {\n    const acceptableType = this.isConnectMarker(layer) || isLayerPoly(layer);\n    if (isEmpty<DrawnObject[]>(this.chosenLayers)) {\n      if (acceptableType) return true;\n    } else {\n      const firstChosen = this.chosenLayers[FIRST];\n      if (this.isConnectMarker(firstChosen) && this.isConnectMarker(layer))\n        return true;\n      if (isLayerPoly(firstChosen) && isLayerPoly(layer)) return true;\n    }\n\n    return false;\n  };\n\n  private chosenLayersArePolys = (): boolean => {\n    const firstChosen = this.chosenLayers[FIRST];\n    return isLayerPoly(firstChosen);\n  };\n\n  /**\n   * checks if layers, to be joined, are markers\n   */\n  private chosenLayersAreMarkers = (): boolean => {\n    const firstChosen = this.chosenLayers[FIRST];\n    return this.isConnectMarker(firstChosen);\n  };\n\n  /**\n   * checks if maximum size of an array is reached\n   */\n  private chosenLayersMaxed = (): boolean => {\n    return this.chosenLayers.length === MAX_CHOSEN;\n  };\n\n  /**\n   * pushes passed object into array, if length exceeds maximum array is shifted\n   * so the lenght is constant\n   */\n  private pushChosenLayer = (layer: DrawnObject): void => {\n    if (this.chosenLayers.length >= MAX_CHOSEN) {\n      this.chosenLayers.shift();\n    }\n    this.drawingTool.highlightElement(layer);\n    this.chosenLayers.push(layer);\n  };\n\n  /**\n   * deselects all selected ones\n   */\n  public deselectChosenLayers = (): void => {\n    this.chosenLayers.forEach((chosen) =>\n      this.drawingTool.normalizeElement(chosen)\n    );\n    this.chosenLayers = [];\n  };\n\n  /**\n   * removes all selected ones\n   */\n  public clearChosenLayers = (): void => {\n    this.chosenLayers.forEach((chosen) =>\n      this.drawingTool.getState().removeLayer(chosen)\n    );\n    this.chosenLayers = [];\n  };\n\n  /**\n   * layers are joined which means remove previous ones and append joined\n   */\n  private pushJoinedToChosenLayers = (joined: DrawnObject): void => {\n    this.clearChosenLayers();\n    this.drawingTool.highlightElement(joined);\n    this.chosenLayers.push(joined);\n    this.drawingTool.getState().addLayer(joined);\n  };\n\n  /**\n   * @brief unifies all the features in array\n   */\n  private _getSummedFeature = (\n    features: Optional<GeoJSON.Feature[]>\n  ): Optional<TurfPolygon> => {\n    if (!features || !Array.isArray(features)) return null;\n\n    let summedFeature = features[0];\n    for (let index = 1; index < features.length; index++) {\n      const feature = features[index];\n      const isfeaturePoly = isFeaturePoly(feature);\n\n      if (isfeaturePoly) {\n        const result = union(\n          feature as TurfPolygon,\n          summedFeature as TurfPolygon\n        );\n        if (result) summedFeature = result;\n      }\n    }\n\n    return summedFeature as TurfPolygon;\n  };\n\n  public joinChosen = (drawObject: DrawnObject): void => {\n    const unfit = !this.canPushToChosen(drawObject);\n    if (unfit) return;\n    this.pushChosenLayer(drawObject);\n    // * if true that means user selected second geo. object of the same correct type\n    if (this.chosenLayersMaxed()) {\n      // * if all polys unify them\n      if (this.chosenLayersArePolys()) {\n        const { chosenLayers } = this;\n        const chosenFeatures = chosenLayers\n          .filter((c) => isLayerPoly(c))\n          .map((chosen) => getGeoJSONFeatures(chosen));\n\n        if (chosenFeatures.length !== chosenLayers.length) return;\n\n        const first = this._getSummedFeature(chosenFeatures[0]);\n        const second = this._getSummedFeature(chosenFeatures[1]);\n\n        if (first && second) {\n          const resultFeature = union(first, second);\n          const opts = {\n            ...chosenLayers[0].options,\n            ...chosenLayers[1].options,\n          };\n          if (resultFeature) {\n            const result = morphFeatureToPolygon(resultFeature, opts);\n            this.pushJoinedToChosenLayers(result);\n          }\n        }\n\n        this._redrawSidebar(drawObject.layerType);\n      }\n      // *  if all markers plot topology\n      if (this.chosenLayersAreMarkers()) {\n        const { chosenLayers } = this;\n\n        this.plotTopology(chosenLayers);\n\n        this.deselectChosenLayers();\n        this.clearChosenLayers();\n\n        this._redrawSidebar();\n      }\n    }\n  };\n}\n\nexport default JoinTool;\n","import L, { DrawMap } from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport { LayerType } from \"../../model/types\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport { TLineTool } from \"./types\";\nimport { ActiveTool } from \"../../model/types/tool/IDrawingLayerTool\";\n\nclass LineTool extends AbstractTool implements TLineTool {\n  public constructor(props: ToolProps) {\n    super(props);\n  }\n\n  public static NAME(): string {\n    return \"line-drawing-tool\";\n  }\n\n  public getName(): string {\n    return LineTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-minus\";\n  }\n\n  public getTitle(): string {\n    return \"Line drawing tool\";\n  }\n\n  public result = (): LayerType => {\n    return \"polyline\";\n  };\n\n  public canBeCanceled = (): boolean => {\n    return true;\n  };\n\n  private _polylineCreate = (): void => {\n    if (!this.leafletMap) return;\n    this.activetool = new L.Draw.Polyline(\n      this.leafletMap as DrawMap,\n      {\n        shapeOptions: {\n          color: this.sidebar.getState().getSelectedColor(),\n          weight: this.sidebar.getState().getSelectedStroke(),\n          draggable: true,\n          transform: true,\n        },\n        guideLayers: this.sidebar.getState().guideLayers,\n        repeatMode: true,\n      } as L.DrawOptions.PolylineOptions\n    ) as ActiveTool;\n    this.activetool.enable();\n  };\n\n  public enable = (): void => {\n    this._polylineCreate();\n  };\n}\n\nexport default LineTool;\n","import { ToolProps } from \"./../AbstractTool/types\";\nimport L, { DrawMap } from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport { TPolygonTool } from \"./types\";\nimport { LayerType } from \"../../model/types\";\nimport { ActiveTool } from \"../../model/types/tool/IDrawingLayerTool\";\n\nclass PolygonTool extends AbstractTool implements TPolygonTool {\n  public static result: LayerType | \"\" = \"polygon\";\n\n  public constructor(props: ToolProps) {\n    super(props);\n  }\n\n  public static NAME(): string {\n    return \"polygon-drawing-tool\";\n  }\n\n  public getName(): string {\n    return PolygonTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-star\";\n  }\n\n  public getTitle(): string {\n    return \"Polygon drawing tool\";\n  }\n\n  public result = (): LayerType => {\n    return \"polygon\";\n  };\n\n  public canBeCanceled = (): boolean => {\n    return true;\n  };\n\n  private _polygonCreate = (): void => {\n    if (!this.leafletMap) return;\n    this.activetool = new L.Draw.Polygon(\n      this.leafletMap as DrawMap,\n      {\n        allowIntersection: false,\n        drawError: {\n          color: \"#e1e100\",\n          message: \"<strong>You cannot draw that!<strong>\",\n        },\n        shapeOptions: {\n          color: this.sidebar.getState().getSelectedColor(),\n          weight: this.sidebar.getState().getSelectedStroke(),\n          draggable: true,\n          transform: true,\n        },\n        guideLayers: this.sidebar.getState().guideLayers,\n        snapDistance: 5,\n        repeatMode: true,\n      } as L.DrawOptions.PolygonOptions\n    ) as ActiveTool;\n    this.activetool.enable();\n  };\n\n  public enable = (): void => {\n    this._polygonCreate();\n  };\n}\n\nexport default PolygonTool;\n","import L from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport { TRemoveTool } from \"./types\";\n\nclass RemoveTool extends AbstractTool implements TRemoveTool {\n  public constructor(props: ToolProps) {\n    super(props);\n  }\n\n  public static NAME(): string {\n    return \"remove-drawing-tool\";\n  }\n\n  public getName(): string {\n    return RemoveTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-times\";\n  }\n\n  public getTitle(): string {\n    return \"Remove tool\";\n  }\n\n  public result = (): \"\" => {\n    return \"\";\n  };\n\n  public enable = (): void => {\n    this.removeElement();\n  };\n\n  private removeElement(): void {\n    const state = this.drawingTool.getState();\n    const selectedLayer = this.getSelectedLayer();\n    // * if marker is being removed, remove its vertices if any\n    if (selectedLayer && state.selectedLayerIsConnectMarker()) {\n      state.removeMarkersMappedVertices(selectedLayer._leaflet_id);\n    }\n    if (selectedLayer?.layerType === \"vertice\") {\n      state.removeGivenVertice(selectedLayer._leaflet_id);\n    }\n    state.removeSelectedLayer();\n    this._redrawSidebar();\n  }\n}\n\nexport default RemoveTool;\n","import { Geometry } from \"@turf/turf\";\nimport { Feature } from \"@turf/turf\";\nimport { AllGeoJSON } from \"@turf/turf\";\nimport { normalStyles } from \"./../../util/constants\";\nimport { simplifyFeature } from \"./../../util/polyHelpers\";\nimport osmtogeojson from \"osmtogeojson\";\nimport L, { FeatureGroup, LatLng } from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { OpenStreetMapProvider } from \"leaflet-geosearch\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport { iconStarter, ICON_SRCS } from \"../../util/constants\";\nimport { DrawnObject, LayerType, LooseObject } from \"../../model/types\";\nimport { AreasData, TSearchTool } from \"./types\";\nimport { ToolProps } from \"../AbstractTool/types\";\n\nclass SearchTool extends AbstractTool implements TSearchTool {\n  public static result = \"search\";\n\n  public constructor(props: ToolProps) {\n    super(props);\n  }\n\n  public static NAME(): string {\n    return \"search-drawing-tool\";\n  }\n\n  public getName(): string {\n    return SearchTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-search\";\n  }\n\n  public getTitle(): string {\n    return \"Search drawing tool\";\n  }\n\n  public result = (): LayerType => {\n    return \"search\";\n  };\n\n  public enable = (): void => {\n    this._redrawSidebar(this.result());\n  };\n\n  /**\n   * append marker on map with given latlng\n   */\n  public static putMarkerOnMap = (\n    featureGroup: FeatureGroup,\n    latlng: LatLng,\n    popup: string,\n    iconUrl: string,\n    connectClick = false\n  ): DrawnObject => {\n    const additionalOpts = { iconUrl: iconUrl || ICON_SRCS[0], connectClick };\n    const icon = new L.Icon({\n      ...iconStarter,\n      ...additionalOpts,\n    });\n\n    const marker = new (L.Marker as any).Touch(latlng, { icon });\n    if (popup) {\n      marker.bindPopup(popup, { closeOnClick: false, autoClose: false });\n      marker.popupContent = popup;\n    }\n\n    marker.layerType = \"marker\";\n    featureGroup.addLayer(marker);\n    // map.fire(L.Draw.Event.CREATED, { layer: marker, layerType: 'marker' });\n    return marker;\n  };\n\n  /**\n   * sends request to OSM with given query\n   */\n  public static geoSearch = async (\n    featureGroup: FeatureGroup,\n    query = \"\"\n  ): Promise<LooseObject[] | undefined> => {\n    if (!query) return;\n\n    // setup\n    const provider = new OpenStreetMapProvider();\n\n    // search\n    const results = await provider.search({ query });\n\n    return results;\n  };\n\n  public static fetchAreas = async (\n    countryCode: string,\n    adminLevel: number,\n    highQuality: boolean,\n    color: string\n  ): Promise<AreasData> => {\n    const result: AreasData = { data: [], error: \"\" };\n\n    const endPoint = \"https://overpass-api.de/api/interpreter?data=[out:json];\";\n    const query = `area[\"ISO3166-1\"=\"${countryCode}\"]->.searchArea;(relation[\"admin_level\"=\"${adminLevel}\"](area.searchArea););out;>;out skel qt;`;\n\n    try {\n      const response = await fetch(endPoint + query);\n\n      const data = await response.json();\n\n      const gJSON = osmtogeojson(data);\n\n      const opts = {\n        color,\n        draggable: true,\n        transform: true,\n      };\n\n      gJSON?.features\n        ?.filter((feat) => feat?.geometry?.type === \"Polygon\")\n        ?.forEach((feat) => {\n          let coords = (feat.geometry as Geometry).coordinates;\n          if (!highQuality) {\n            const simplified = simplifyFeature(feat as AllGeoJSON, 0.01);\n            coords = ((simplified as Feature).geometry as Geometry).coordinates;\n          }\n          const latlngs = L.GeoJSON.coordsToLatLngs(coords, 1);\n          const drawnCountry: DrawnObject = new (L as any).polygon(latlngs, {\n            ...opts,\n            ...normalStyles,\n          });\n          drawnCountry?.dragging?.disable();\n          drawnCountry.layerType = \"polygon\";\n          drawnCountry.countryCode = countryCode;\n\n          result.data.push(drawnCountry);\n        });\n      result.error = \"\";\n    } catch (err) {\n      result.error = \"There was a problem, re-try later.\";\n      console.error(err);\n    }\n\n    return result;\n  };\n}\n\nexport default SearchTool;\n","import L from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { AbstractTool } from \"../AbstractTool\";\nimport { TTransformTool } from \"./types\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport { DrawnObject } from \"../../model/types\";\n\nclass TransformTool extends AbstractTool implements TTransformTool {\n  public constructor(props: ToolProps) {\n    super(props);\n  }\n\n  public static NAME(): string {\n    return \"transform-drawing-tool\";\n  }\n\n  public getName(): string {\n    return TransformTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-arrows-alt\";\n  }\n\n  public getTitle(): string {\n    return \"Transform tool\";\n  }\n\n  public result = (): \"\" => {\n    return \"\";\n  };\n\n  public enable = (): void => {\n    const selected = this.getSelectedLayer();\n\n    TransformTool.initTransform(selected);\n  };\n\n  public static initTransform(\n    drawObject: DrawnObject | null,\n    disable = false\n  ): void {\n    const layer = drawObject;\n    if (layer?.transform) {\n      if (layer.transform._enabled || disable) {\n        layer.transform.disable();\n        layer?.dragging?.disable();\n      } else {\n        layer.transform.enable({ rotation: true, scaling: true });\n        layer?.dragging?.enable();\n      }\n    } else if (layer?.layerType === \"marker\") {\n      if (layer?.dragging?._enabled || disable) {\n        layer?.dragging?.disable();\n      } else {\n        layer?.dragging?.enable();\n      }\n    }\n  }\n\n  public static disableTransform = (selectedEl: DrawnObject | null): void => {\n    TransformTool.initTransform(selectedEl, true);\n  };\n}\n\nexport default TransformTool;\n","import { Feature } from \"@turf/turf\";\nimport {\n  LooseObject,\n  LayerType,\n  DrawnOptions,\n  LatLngs,\n} from \"./model/types/index\";\nimport L, { LatLng } from \"leaflet\";\nimport {\n  convertCoords,\n  convertOptionsToProperties,\n  convertPropertiesToOptions,\n  getLeafletTypeFromFeature,\n  isLayerPoly,\n} from \"./util/polyHelpers\";\nimport { isEmpty, sortReverseAlpha } from \"./util/baseHelpers\";\nimport { NOT_FOUND, iconStarter, normalStyles } from \"./util/constants\";\nimport { EditTool, TransformTool } from \"./tools\";\nimport { DrawnObject } from \"./model/types\";\nimport IDrawingLayerTool from \"./model/types/tool/IDrawingLayerTool\";\nimport { LayerToolState } from \"geovisto\";\nimport IDrawingLayerToolState, {\n  DrawnGroup,\n  ExportGeoJSON,\n  IndexedVertices,\n  MappedMarkersToVertices,\n  Source,\n} from \"./model/types/tool/IDrawingLayerToolState\";\nimport { IDrawingLayerToolConfig } from \"./model/types/tool/IDrawingLayerToolConfig\";\nimport IDrawingLayerToolDefaults from \"./model/types/tool/IDrawingLayerToolDefaults\";\n\nexport const EMPTY_GEOJSON = {\n  type: \"FeatureCollection\",\n  features: [],\n};\n\n/**\n * This class provide functions for using the state of the layer tool.\n *\n * @author Andrej Tlcina\n */\nclass DrawingLayerToolState\n  extends LayerToolState\n  implements IDrawingLayerToolState {\n  public featureGroup: DrawnGroup;\n  public selecting: boolean;\n  public selectedLayer: DrawnObject | null;\n  public tool: IDrawingLayerTool;\n  public createdVertices: Array<DrawnObject>;\n  public mappedMarkersToVertices: MappedMarkersToVertices;\n  public extraSelected: Array<DrawnObject>;\n  /**\n   * It creates a tool state.\n   */\n  public constructor(tool: IDrawingLayerTool) {\n    super(tool);\n    // * retyping because I'm accessing private attribute '_layers'\n    this.featureGroup = new L.FeatureGroup() as DrawnGroup;\n    // * for knowing if we are using select tool\n    this.selecting = false;\n    // * for knowing if we already selected layer\n    this.selectedLayer = null;\n\n    this.tool = tool;\n\n    this.createdVertices = [];\n    this.mappedMarkersToVertices = {};\n\n    // * selected for customization\n    this.extraSelected = [];\n  }\n\n  /**\n   * clears extraSelected array and sets normal styles to each geo. object\n   */\n  public clearExtraSelected = (): void => {\n    this.extraSelected.forEach((selected) => {\n      this.tool.normalizeElement(selected);\n    });\n    this.extraSelected = [];\n  };\n\n  /**\n   * checks if layer is in extraSelected objects\n   */\n  private isInExtraSelected = (layerId: string): number => {\n    const found = this.extraSelected\n      .map((el) => el._leaflet_id)\n      .indexOf(layerId);\n    return found;\n  };\n\n  /**\n   * checks if selected and passed object are of the same type\n   */\n  private areSameType = (layer: DrawnObject): boolean => {\n    if (!this.selectedLayer) return false;\n\n    if (isLayerPoly(this.selectedLayer)) {\n      return isLayerPoly(layer);\n    }\n\n    return this.selectedLayer.layerType === layer.layerType;\n  };\n\n  /**\n   * add passed layer to array and highlights it\n   */\n  public addExtraSelected = (layer: DrawnObject): void => {\n    // * have only one type of object in array\n    if (!this.areSameType(layer)) return;\n\n    const idx = this.isInExtraSelected(layer._leaflet_id);\n    if (idx > -1) {\n      this.tool.normalizeElement(layer);\n      this.extraSelected.splice(idx, 1);\n    } else {\n      this.tool.highlightElement(layer);\n      this.extraSelected.push(layer);\n    }\n  };\n\n  /**\n   * checks if markers is connect marker\n   */\n  public isConnectMarker = (marker: DrawnObject | null): boolean => {\n    return (\n      marker?.layerType === \"marker\" &&\n      marker?.options?.icon?.options?.connectClick\n    );\n  };\n\n  /**\n   * checks if selected layer is connect marker\n   */\n  public selectedLayerIsConnectMarker = (): boolean => {\n    return this.isConnectMarker(this.selectedLayer);\n  };\n\n  /**\n   * Pushes vertice into created ones\n   */\n  public pushVertice = (vertice: DrawnObject): void => {\n    this.createdVertices.push(vertice);\n  };\n\n  /**\n   * removes vertice based on given leaflet id\n   *\n   * @param {String} lId\n   */\n  public removeGivenVertice = (lId: string): void => {\n    const idsOfVerticesToRemove = new Set([lId]);\n\n    const result = this.removeMappedVertices(idsOfVerticesToRemove);\n\n    const index = this.createdVertices.map((v) => v._leaflet_id).indexOf(lId);\n    if (index !== NOT_FOUND) {\n      this.createdVertices.splice(index, 1);\n    }\n\n    this.mappedMarkersToVertices = result;\n  };\n\n  /**\n   * removes vertice which ids were passed\n   *\n   * @param {Set} idsOfVerticesToRemove\n   * @returns {Object} mappedMarkersToVertices\n   */\n  private removeMappedVertices = (\n    idsOfVerticesToRemove: Set<string>\n  ): MappedMarkersToVertices => {\n    // * copy object\n    const newMapped = { ...this.mappedMarkersToVertices };\n\n    // *  go through each marker object, containing { [index]: vertice } pairs\n    Object.values(newMapped).forEach((vertObj) => {\n      // * now go through each index\n      Object.keys(vertObj).forEach((key) => {\n        const vert = vertObj[key];\n        if (idsOfVerticesToRemove.has(vert._leaflet_id)) {\n          this.removeLayer(vert);\n          delete vertObj[key];\n        }\n      });\n    });\n\n    return newMapped;\n  };\n\n  /**\n   * takes in leaflet id and removes vertices mapped to marker\n   */\n  public removeMarkersMappedVertices = (lId: string): void => {\n    const markerVertices = this.mappedMarkersToVertices[lId];\n\n    const idsOfVerticesToRemove: Set<string> = new Set();\n    // * save vertices' ids\n    Object.values(markerVertices)?.forEach((v) =>\n      idsOfVerticesToRemove.add(v._leaflet_id)\n    );\n\n    // * remove vertices\n    const newMapped = this.removeMappedVertices(idsOfVerticesToRemove);\n\n    // * marker no longer has vertices, so remove it\n    delete newMapped[lId];\n\n    this.mappedMarkersToVertices = newMapped;\n  };\n\n  /**\n   * setter\n   */\n  public setSelecting(is: boolean): void {\n    this.selecting = is;\n  }\n\n  /**\n   * getter\n   */\n  public getSelecting(): boolean {\n    return this.selecting;\n  }\n\n  /**\n   * add layer to featureGroup and it is displayed\n   */\n  public addLayer(layer: DrawnObject): DrawnObject {\n    this.featureGroup.addLayer(layer);\n    this.tool.applyEventListeners(layer);\n    return layer;\n  }\n\n  /**\n   * removes layer from featureGroup and from map\n   */\n  public removeLayer(layer: DrawnObject): void {\n    this.featureGroup.removeLayer(layer);\n  }\n\n  /**\n   * removes selected layer\n   */\n  public removeSelectedLayer(): void {\n    if (!this.selectedLayer) return;\n    TransformTool.disableTransform(this.selectedLayer);\n    EditTool.disableNodeEdit(this.selectedLayer);\n    this.featureGroup.removeLayer(this.selectedLayer);\n    this.selectedLayer = null;\n  }\n\n  /**\n   * sets selected layer and highlights it\n   */\n  public setSelectedLayer(layer: DrawnObject): void {\n    if (this.selectedLayer) this.tool.normalizeElement(this.selectedLayer);\n    this.selectedLayer = layer;\n    this.tool.highlightElement(layer);\n    this.clearExtraSelected();\n  }\n\n  /**\n   * removes selected layer\n   */\n  public clearSelectedLayer(): void {\n    this.selectedLayer = null;\n  }\n\n  /**\n   * sets vertices to marker\n   */\n  public setVerticesToMarker(lId: string, val: IndexedVertices): void {\n    this.mappedMarkersToVertices[lId] = val;\n  }\n\n  /**\n   * saving topology information to marker\n   */\n  private addMappedVertices = (layer: DrawnObject, result: Source): void => {\n    const lId = layer._leaflet_id;\n    const mappedVertices = this.mappedMarkersToVertices[lId];\n    const mappedProperty: LooseObject = {};\n    Object.keys(mappedVertices).forEach((key) => {\n      mappedProperty[key] = mappedVertices[key]._leaflet_id;\n    });\n    if (!isEmpty<LooseObject>(mappedProperty))\n      result.mappedVertices = mappedProperty;\n  };\n\n  /**\n   * called so when we import topology dragging of vertices works\n   */\n  private initMappedMarkersToVertices = (\n    lType: LayerType | \"\",\n    result: DrawnObject,\n    source: Source\n  ) => {\n    if (lType === \"marker\" && source.mappedVertices) {\n      this.mappedMarkersToVertices[result._leaflet_id] = source.mappedVertices;\n    }\n    if (lType === \"polyline\" || lType === \"vertice\") {\n      // * keys are marker leaflet ids\n      Object.keys(this.mappedMarkersToVertices).forEach((markerId) => {\n        // * values are index of vertice\n        const verticesKeyArr = Object.keys(\n          this.mappedMarkersToVertices[markerId]\n        );\n        // * leaflet id of vertice\n        const vertLeafId = source.mappedVerticeId;\n        const verticesObj = this.mappedMarkersToVertices[markerId];\n        verticesKeyArr.forEach((vertKey) => {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          if (verticesObj[vertKey] === vertLeafId) {\n            const spreadable = this.mappedMarkersToVertices[markerId] || {};\n            this.mappedMarkersToVertices[markerId] = {\n              ...spreadable,\n              [vertKey]: result,\n            };\n          }\n        });\n      });\n    }\n  };\n\n  /**\n   * serializes map state to GeoJSON\n   */\n  public serializeToGeoJSON(): ExportGeoJSON {\n    const geo: ExportGeoJSON = EMPTY_GEOJSON;\n\n    this.featureGroup.eachLayer((l) => {\n      const layer = l as DrawnObject;\n      const feature = layer.toGeoJSON() as Feature;\n\n      const properties = convertOptionsToProperties(layer.options);\n      feature.properties = properties;\n\n      if (layer.popupContent)\n        feature.properties.popupContent = layer.popupContent;\n      if (layer.identifier) feature.id = layer.identifier;\n\n      const iconOptions = layer?.options?.icon?.options;\n      if (iconOptions) feature.properties.iconOptions = iconOptions;\n\n      if (this.isConnectMarker(layer)) {\n        this.addMappedVertices(layer, feature.properties as Source);\n      }\n      if (layer.layerType === \"vertice\")\n        feature.properties.mappedVerticeId = layer._leaflet_id;\n\n      (geo.features as Feature[]).push(feature);\n    });\n\n    return geo;\n  }\n\n  /**\n   * deserializes GeoJSON to map state\n   *\n   * @param {Object} geojson\n   * @returns\n   */\n  public deserializeGeoJSON(geojson: ExportGeoJSON): void {\n    const sidebarState = this.tool.getMapForm().getState();\n     console.log({ geojson });\n     console.log(\"hello world\");\n     console.log(\"prve\");\n    console.log(\"simon\");\n    if (geojson.type === \"FeatureCollection\" && geojson.features) {\n      geojson.features\n        .sort((a, b) =>\n          sortReverseAlpha(Number(a.geometry.type), Number(b.geometry.type))\n        )\n        .forEach((f) => {\n          const opts = convertPropertiesToOptions(f.properties || {});\n          const lType = getLeafletTypeFromFeature(f);\n          const latlng = convertCoords(f);\n\n          let result;\n          if (lType === \"polygon\") {\n            result = new (L as any).polygon(latlng, opts);\n          } else if (lType === \"polyline\") {\n            result = new (L as any).polyline(latlng, opts);\n          } else if (lType === \"marker\") {\n            const spreadable = f?.properties?.iconOptions || {};\n            if (spreadable.iconUrl)\n              sidebarState.appendToIconSrcs(spreadable.iconUrl);\n            const options = {\n              ...iconStarter,\n              iconUrl: sidebarState.getSelectedIcon(),\n              ...spreadable,\n            };\n\n            const icon = new L.Icon(options);\n            result = new (L as any).Marker.Touch(latlng, { icon });\n          }\n          if (result) {\n            result.layerType = lType;\n\n            // result.snapediting = new L.Handler.MarkerSnap(map, result);\n            // result.snapediting.enable();\n            sidebarState.pushGuideLayer(result);\n\n            if (f?.properties?.popupContent) {\n              result.popupContent = f.properties.popupContent;\n              result.bindPopup(f.properties.popupContent, {\n                closeOnClick: false,\n                autoClose: false,\n              });\n            }\n            if (f.id) {\n              result.identifier = f.id;\n            }\n            if (result.dragging) result.dragging.disable();\n            this.initMappedMarkersToVertices(\n              lType,\n              result,\n              f.properties as Source\n            );\n            console.log(\"Result before adding layer:\", result);\n            this.addLayer(result);\n            console.log(\"Layer added:\", result);\n          }\n        });\n    }\n\n    return;\n  }\n\n  /**\n   * serializes map state to internal JSON representation\n   */\n  public serialize(\n    defaults: IDrawingLayerToolDefaults | undefined\n  ): IDrawingLayerToolConfig {\n    const config = super.serialize(defaults);\n\n    const exportSettings: {\n      layerType: LayerType;\n      options: DrawnOptions;\n      latlngs: LatLngs | LatLng;\n      popupContent: string;\n      [key: string]: any;\n    }[] = [];\n\n    const pushPolygon = (\n      layer: DrawnObject,\n      layerType: LayerType,\n      extra = {}\n    ) => {\n      const { options, _latlngs: latlngs, popupContent = \"\" } = layer;\n      exportSettings.push({\n        layerType,\n        options:\n          options &&\n          ({\n            ...normalStyles,\n            draggable: true,\n            transform: true,\n          } as any),\n        latlngs,\n        popupContent,\n        ...extra,\n      });\n    };\n\n    const pushMarker = (layer: DrawnObject, layerType: LayerType) => {\n      const { popupContent = \"\" } = layer;\n      const extra = {};\n      if (this.isConnectMarker(layer)) {\n        this.addMappedVertices(layer, extra as Source);\n      }\n      exportSettings.push({\n        layerType,\n        options: {\n          ...layer?.options?.icon?.options,\n          draggable: true,\n          transform: true,\n        } as any,\n        latlngs: layer._latlng,\n        popupContent,\n        ...extra,\n      });\n    };\n\n    this.featureGroup.eachLayer((l) => {\n      const layer = l as DrawnObject;\n      const { layerType } = layer;\n      if (layerType === \"marker\") {\n        pushMarker(layer, layerType);\n      } else {\n        if (layer._layers) {\n          layer._layers.forEach((l) => {\n            pushPolygon(l, layerType);\n          });\n        } else {\n          const extra =\n            layerType === \"vertice\"\n              ? { mappedVerticeId: layer._leaflet_id }\n              : {};\n          pushPolygon(layer, layerType, extra);\n        }\n      }\n    });\n\n    config.data = exportSettings;\n    return config;\n  }\n\n  /**\n   * deserializes internal JSON representation to map state\n   */\n  public deserialize(config: IDrawingLayerToolConfig): void {\n    super.deserialize(config);\n\n    const sidebarState = this.tool.getMapForm().getState();\n\n    const { data = [] } = config;\n\n    (data as DrawnObject[]).forEach((layer) => {\n      let layerToAdd;\n      // decide what type they are according to it render what is needed\n      if (layer.layerType === \"marker\") {\n        const { latlngs } = layer;\n        const latlng = L.latLng(\n          (latlngs as LatLng).lat,\n          (latlngs as LatLng).lng\n        );\n        if (layer?.options?.iconUrl)\n          sidebarState.appendToIconSrcs(layer.options.iconUrl as string);\n\n        const iconAnchor = layer.options.iconAnchor\n          ? {\n              iconAnchor: new L.Point(\n                layer.options.iconAnchor.x,\n                layer.options.iconAnchor.y\n              ),\n            }\n          : {};\n        const iconSize = layer.options.iconSize\n          ? {\n              iconSize: new L.Point(\n                layer.options.iconSize.x,\n                layer.options.iconSize.y\n              ),\n            }\n          : {};\n        const options = {\n          ...layer.options,\n          ...iconAnchor,\n          ...iconSize,\n        };\n        const MyCustomMarker = L.Icon.extend({\n          options,\n        });\n\n        const icon = new MyCustomMarker();\n        icon.options = options;\n        const marker = new (L as any).Marker.Touch(latlng, { icon });\n\n        layerToAdd = marker;\n      } else {\n        let _latlng;\n        let poly;\n        if (layer.layerType === \"polyline\" || layer.layerType === \"vertice\") {\n          _latlng = (layer.latlngs as [LatLngs])[0].map((l: LatLng) =>\n            L.latLng(l.lat, l.lng)\n          );\n          poly = new (L as any).polyline(_latlng, layer.options);\n        }\n        if (layer.layerType === \"polygon\" || layer.layerType === \"painted\") {\n          _latlng = (layer.latlngs as [LatLngs])[0].map((l: LatLng) =>\n            L.latLng(l.lat, l.lng)\n          );\n          poly = new (L as any).polygon(_latlng, layer.options);\n        }\n\n        layerToAdd = poly;\n      }\n\n      if (layer.popupContent) {\n        layerToAdd.bindPopup(layer.popupContent, {\n          closeOnClick: false,\n          autoClose: false,\n        });\n        layerToAdd.popupContent = layer.popupContent;\n      }\n\n      sidebarState.pushGuideLayer(layer);\n\n      layerToAdd.layerType = layer.layerType;\n      if (layerToAdd.dragging) layerToAdd.dragging.disable();\n      this.initMappedMarkersToVertices(layer.layerType, layerToAdd, layer);\n      this.addLayer(layerToAdd);\n    });\n  }\n}\nexport default DrawingLayerToolState;\n","import { LayerToolDefaults } from \"geovisto\";\nimport IDrawingLayerToolDefaults from \"./model/types/tool/IDrawingLayerToolDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n *\n * @author Andrej Tlcina\n */\nclass DrawingLayerToolDefaults\n  extends LayerToolDefaults\n  implements IDrawingLayerToolDefaults {\n  public static TYPE = \"geovisto-tool-layer-drawing\";\n  /**\n   * It initializes tool defaults.\n   */\n  public constructor() {\n    super();\n  }\n  /**\n   * A unique string of the tool type.\n   */\n  public getType(): string {\n    return DrawingLayerToolDefaults.TYPE;\n  }\n\n  /**\n   * It returns the layer name.\n   */\n  public getLayerName(): string {\n    return \"Drawing layer\";\n  }\n\n  /**\n   * It returns the label of the tool.\n   */\n  public getLabel(): string {\n    return this.getLayerName();\n  }\n\n  /**\n   * It returns the icon of the tool.\n   */\n  public getIcon(): string {\n    return '<i class=\"fa fa-pencil\"></i>';\n  }\n}\nexport default DrawingLayerToolDefaults;\n","\n\nimport { \n    AbstractMapFormInput,\n    IMapFormInput,\n    IMapFormInputProps,\n    MapFormInputFactory\n} from \"geovisto\";\n\nimport { SelectOpt } from \"../util/constants\";\n\nconst ID = \"geovisto-input-select-drawing\";\n\nexport interface IDrawingSelectFormInputProps extends IMapFormInputProps {\n    onChangeAction: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;\n    options: string[] | SelectOpt[];\n}\n\nexport interface DrawingILabeledSelectFormInputProps extends IDrawingSelectFormInputProps {\n    label: string;\n}\n\nexport class DrawingMapFormInputFactory extends MapFormInputFactory {\n    \n    /**\n     * It creates the select form input.\n     */\n     public selectOpt(props: IDrawingSelectFormInputProps): IMapFormInput {\n        return new DrawingSelectFormInput(props);\n    }\n\n    /**\n     * It creates the labeled select form input.\n     */\n     public labeledSelectOpt(props: DrawingILabeledSelectFormInputProps): IMapFormInput {\n        return new DrawingSelectFormInput(props);\n    }\n}\n\n/**\n * This class represents a basic select form input composed of options.\n * \n * @author Jiri Hynek\n * @author Anfrej Tlcina\n */\nclass DrawingSelectFormInput extends AbstractMapFormInput {\n    \n    /**\n     * the input element is initialized when required\n     */\n    private element?: HTMLSelectElement;\n\n    public constructor(props: IDrawingSelectFormInputProps) {\n        super(props);\n    }\n    \n    /**\n     * Static function returns identifier of the input type\n     */\n    public static ID(): string {\n        return ID;\n    }\n\n    /**\n     * It returns select element.\n     */\n    public create(): HTMLElement {\n        if(this.element == undefined) {\n            const props = (<IDrawingSelectFormInputProps> this.getProps());\n            // create select element\n            this.element = document.createElement('select');\n            this.element.onchange = props.onChangeAction;\n            // append options\n            let option: HTMLOptionElement;\n            const options: string[] | SelectOpt[] = props.options;\n            for (let i = 0; i < options.length; i++) {\n              option = this.element.appendChild(\n                document.createElement(\"option\")\n              );\n              if (typeof options[i] === \"object\" && options[i] !== null) {\n                const opt = options[i] as SelectOpt;\n                option.setAttribute(\"value\", String(opt.value));\n                option.innerHTML = opt.label;\n                option.selected = Boolean(opt.selected);\n              } else {\n                const opt = options[i] as string;\n                option.setAttribute(\"value\", opt);\n                option.innerHTML = opt;\n              }\n            }\n        }\n        return this.element;\n    }\n\n    /**\n     * It returns value of the select element.\n     */\n    public getValue(): string {\n        return this.element ? this.element.value : \"\";\n    }\n\n    /**\n     * It sets value of the select element.\n     * \n     * @param value \n     */\n    public setValue(value: string): void {\n        if(this.element) {\n            this.element.value = value;\n        }\n    }\n\n    /*\n     * Sets/removes attribute 'disabled' from input box.\n     */\n    public setDisabled(disabled: boolean): void {\n        if(this.element) {\n            if(disabled == true) {\n                this.element.setAttribute(\"disabled\", \"true\");            \n            } else {\n                this.element.removeAttribute(\"disabled\");\n            }\n        }\n    }\n}\nexport default DrawingSelectFormInput;","/**\n * @author Andrej Tlcina\n */\n\nimport { DrawingMapFormInputFactory } from \"../inputs/DrawingSelectFormInput\";\nimport { MappingModel } from \"../model/types/tool/IDrawingLayerToolDefaults\";\n\n/**\n * creates checkbox\n */\nexport const createCheck = (\n  value: boolean,\n  onCheck: (val: boolean) => void,\n  prefix: string,\n  label: string\n): HTMLDivElement => {\n  const onChange = (e: Event) => {\n    const val = (<HTMLInputElement>e.target).checked;\n    onCheck(val);\n  };\n  const ID = prefix + \"-check-input\";\n  const inputWrapper = document.createElement(\"div\");\n  inputWrapper.className = `${ID}-wrapper check-wrapper`;\n  const check = document.createElement(\"input\");\n  check.type = \"checkbox\";\n  check.checked = value;\n  check.id = ID;\n  check.onchange = onChange;\n  const checkLabel = document.createElement(\"label\");\n  // checkLabel.for = ID;\n  checkLabel.innerText = label;\n  inputWrapper.appendChild(check);\n  inputWrapper.appendChild(checkLabel);\n  return inputWrapper;\n};\n\n/**\n * creates a grid of options, when a tile is clicked passed function runs\n * was made for colors and icons, if img is true it expects icon urls as options\n */\nexport const createPalette = (\n  label: string,\n  opts: string[],\n  activeIdx: number,\n  changeAction: (opt: string) => void,\n  img = false\n): HTMLDivElement => {\n  const inputPalette = document.createElement(\"div\");\n  if (label) inputPalette.appendChild(document.createTextNode(label + \": \"));\n  const wrapper = document.createElement(\"div\");\n  wrapper.style.display = \"grid\";\n  wrapper.style.width = \"100%\";\n  wrapper.style.gridTemplateColumns = \"repeat(4, 1fr)\";\n  inputPalette.appendChild(wrapper);\n  opts.forEach((opt, idx) => {\n    const elem = document.createElement(\"div\");\n    elem.style.boxSizing = \"border-box\";\n    elem.style.background = img ? `url(${opt})` : opt;\n    elem.style.backgroundRepeat = \"no-repeat\";\n    elem.style.backgroundPosition = \"center\";\n    elem.style.backgroundSize = \"contain\";\n    elem.style.height = \"20px\";\n    elem.style.display = \"inline-block\";\n    elem.style.cursor = \"pointer\";\n    if (idx === activeIdx) {\n      elem.style.border = \"1px solid #333\";\n    }\n    elem.addEventListener(\"click\", () => changeAction(opt));\n    wrapper.appendChild(elem);\n  });\n  return inputPalette;\n};\n\nexport const createButton = (\n  text: string,\n  onClick: () => void,\n  disabled: boolean\n): HTMLButtonElement => {\n  const btn = document.createElement(\"button\");\n  btn.innerText = text;\n  btn.addEventListener(\"click\", onClick);\n  if (disabled) {\n    btn.setAttribute(\"disabled\", String(disabled));\n  } else {\n    btn.removeAttribute(\"disabled\");\n  }\n  return btn;\n};\n\nconst FormInput = new DrawingMapFormInputFactory();\n\n/**\n * Data mapping model which can be used in the sidebar form.\n */\nexport const MAPPING_MODEL: MappingModel = {\n  idKey: {\n    props: {\n      name: \"idKey\",\n      label: \"ID key\",\n    },\n    input: FormInput.labeledSelectOpt,\n  },\n  identifier: {\n    props: { name: \"identifier\", label: \"Identifier\" },\n    input: FormInput.labeledAutocomplete,\n  },\n  description: {\n    props: { name: \"description\", label: \"Description\" },\n    input: FormInput.textArea,\n  },\n  strokeThickness: {\n    props: {\n      name: \"stroke-thickness\",\n      label: \"Stroke thickness\",\n    },\n    input: FormInput.labeledSelectOpt,\n  },\n  search: {\n    props: { name: \"search\", label: \"Search\" },\n    input: FormInput.labeledAutocomplete,\n  },\n  searchForArea: {\n    props: {\n      name: \"search-for-area\",\n      label: \"Search\",\n    },\n    input: FormInput.labeledSelectOpt,\n  },\n  adminLevel: {\n    props: {\n      name: \"admin-level\",\n      label: \"Pick level of administration\",\n    },\n    input: FormInput.labeledSelectOpt,\n  },\n  iconUrl: {\n    props: {\n      name: \"iconUrl\",\n      label: \"Icon URL\",\n    },\n    input: FormInput.labeledText,\n  },\n  dataFilterKey: {\n    props: {\n      name: \"data-filter-key\",\n      label: \"Pick column\",\n    },\n    input: FormInput.labeledSelectOpt,\n  },\n  dataFilterValue: {\n    props: {\n      name: \"data-filter-value\",\n      label: \"Pick value\",\n    },\n    input: FormInput.labeledSelectOpt,\n  },\n  brushSize: {\n    props: {\n      name: \"brush-size\",\n    },\n    input: FormInput.labeledSlider,\n  },\n  customToleranceValue: {\n    props: {\n      name: \"custom-tolerance\",\n    },\n    input: FormInput.labeledSlider,\n  },\n  iconAnchor: {\n    props: {\n      name: \"icon-anchor\",\n    },\n    input: FormInput.labeledSlider,\n  },\n  customToleranceCheck: {\n    props: {\n      name: \"custom-tolerance\",\n      label:\n        \"By selecting the option you can custom level of detail for brush strokes\",\n    },\n    input: FormInput.labeledCheckbox,\n  },\n  changeConnect: {\n    props: {\n      name: \"change-connect\",\n      label: \"By selecting the option marker will be able to create topology\",\n    },\n    input: FormInput.labeledCheckbox,\n  },\n  intersectActivated: {\n    props: {\n      name: \"intersect-activated\",\n      label:\n        \"By selecting the option you can create intersects with selected polygon\",\n    },\n    input: FormInput.labeledCheckbox,\n  },\n  searchConnect: {\n    props: {\n      name: \"search-connect\",\n      label:\n        \"By creating new marker while having this choice selected, you will create path between newly created marker and selected marker or last created marker via Topology tool\",\n    },\n    input: FormInput.labeledCheckbox,\n  },\n  highQuality: {\n    props: {\n      name: \"high-quality\",\n      label:\n        \"By selecting the option displayed polygons will be in higher quality, which however means that some operations will take longer to execute\",\n    },\n    input: FormInput.labeledCheckbox,\n  },\n};\n","import IDrawingLayerTool, {\n  DrawingForm,\n} from \"./../../../model/types/tool/IDrawingLayerTool\";\nimport { DrawnObject, LayerType } from \"../../../model/types\";\nimport { ControlStateProps, TAbstractControlState } from \"./types\";\n\n/**\n * Abstract class for control state.\n *\n * control gives inputs for manipulation of created objects\n *\n * class should should contain only methods for data and logic of inputs, not rendering\n */\nclass AbstractControlState implements TAbstractControlState {\n  public tabControl: DrawingForm;\n  public tool: IDrawingLayerTool;\n  public control;\n\n  public constructor(props: ControlStateProps) {\n    this.tabControl = props.tabControl;\n    this.tool = props.tabControl.getTool();\n    this.control = props.control;\n  }\n\n  public _getSelected = (): DrawnObject | null => {\n    return this.tool.getState().selectedLayer;\n  };\n\n  public _getExtraSelected = (): Array<DrawnObject> => {\n    return this.tool.getState().extraSelected;\n  };\n\n  public _redrawSidebar = (type?: LayerType): void => {\n    return this.tabControl.redrawTabContent(type || \"\");\n  };\n}\n\nexport default AbstractControlState;\n","import AbstractControlState from \"./AbstractControlState\";\nimport { ControlProps, TAbstractControl } from \"./types\";\n\n/**\n * Abstract class for control\n *\n * control gives inputs for manipulation of created objects\n *\n * class should should contain only methods for rendering of inputs, not logic\n */\nclass AbstractControl implements TAbstractControl {\n  public state;\n\n  public constructor(props: ControlProps) {\n    this.state = new AbstractControlState({\n      tabControl: props.tabControl,\n      control: this,\n    });\n  }\n}\n\nexport default AbstractControl;\n","/**\n * Help class which contains static methods\n */\nclass DataControlUtils {\n\n    /**\n   * for linebreak in poup text we use '<br>' tag\n   */\n  public static convertDescToPopText = (descText: string): string => {\n    if (!descText) return \"\";\n    return descText.replaceAll(\"\\n\", \"<br />\");\n  };\n\n  /**\n   * for linebreak in field we use '\\n' character\n   */\n  public static convertDescfromPopText = (popText: string): string => {\n    if (!popText) return \"\";\n    return popText.replaceAll(\"<br />\", \"\\n\");\n  };\n\n}\nexport default DataControlUtils;","import { IMapData } from \"geovisto\";\nimport AbstractControlState from \"../AbstractControl/AbstractControlState\";\nimport { ControlStateProps } from \"../AbstractControl/types\";\nimport DataControlUtils from \"./DataControlUtils\";\nimport { TDataControlState, TFilterValue } from \"./types\";\n\nclass DataControlState\n  extends AbstractControlState\n  implements TDataControlState {\n  public data: IMapData;\n  public identifierType: string;\n  public filtersAmount: number;\n  public filtersKeys: string[];\n  public filtersValues: TFilterValue[];\n\n  public constructor(props: ControlStateProps) {\n    super(props);\n\n    this.data =\n      props.tabControl\n        .getTool()\n        .getMap()\n        ?.getState()\n        ?.getMapData()\n        ?.getDataRecords() || [];\n\n    this.identifierType = \"\";\n\n    this.filtersAmount = 0;\n    this.filtersKeys = [];\n    this.filtersValues = [];\n  }\n\n  /**\n   * clears all filters for data mapping\n   */\n  public clearFilters(): void {\n    this.filtersAmount = 0;\n    this.filtersKeys = [];\n    this.filtersValues = [];\n  }\n\n  /**\n   * gets filter key (column header)\n   */\n  public getFiltersKey(idx: number): string {\n    const key = this.filtersKeys[idx];\n    return key;\n  }\n\n  /**\n   * gets value in column\n   */\n  public getFiltersValue(idx: number): TFilterValue {\n    const value = this.filtersValues[idx];\n    return value;\n  }\n\n  /**\n   * sets value in filterKeys array\n   */\n  public setFiltersKey(idx: number, value: string): void {\n    if (idx > this.filtersAmount) return;\n    this.filtersKeys[idx] = value;\n  }\n\n  /**\n   * sets value in filterValues array\n   *\n   * @param {Number} idx\n   * @param {any} value\n   * @returns\n   */\n  public setFiltersValue(idx: number, value: TFilterValue): void {\n    if (idx > this.filtersAmount) return;\n    this.filtersValues[idx] = value;\n  }\n\n  /**\n   * runs whenever user clicks on 'Add Filter' button\n   * essentially creates new filter\n   */\n  public increaseFilters = (): void => {\n    this.filtersAmount += 1;\n    this.filtersKeys.push(\"\");\n    this.filtersValues.push(\"\");\n  };\n  /**\n   * runs whenever user clicks on 'Remove Filter' button\n   * essentially removes last added filter and it's values\n   */\n  public decreaseFilters = (): void => {\n    if (this.filtersAmount === 0) return;\n    this.filtersAmount -= 1;\n    this.filtersKeys.pop();\n    this.filtersValues.pop();\n  };\n\n  /**\n   * returns \"column header name\"\n   */\n  public getIdentifierType(): string {\n    return this.identifierType;\n  }\n\n  /**\n   * sets which column we should take identifier from\n   */\n  public changeWhichIdUseAction = (e: InputEvent): void => {\n    const id = (e.target as HTMLSelectElement).value;\n    const selectedEl = this._getSelected();\n\n    this.identifierType = id;\n\n    this._redrawSidebar(selectedEl?.layerType);\n  };\n\n  /**\n   * called on field change\n   */\n  public changeIdentifierAction = (id: string): void => {\n    if (!id) return;\n    const selectedEl = this._getSelected();\n    if (selectedEl) selectedEl.identifier = id;\n\n    const data =\n      this.tool.getMap()?.getState()?.getMapData()?.getDataRecords() || [];\n\n    // * create new variable and store imported data\n    let filteredData = data;\n    // * go through all appended filter keys\n    this.filtersKeys.forEach((key, idx) => {\n      // * loop through each row of imported data\n      filteredData = filteredData.filter(\n        (d) => String(d[key]) === this.filtersValues[idx]\n      );\n    });\n\n    const idType = this.identifierType;\n    const found = filteredData.find((d) => String(d[idType]) === id);\n\n    let popupText = \"\";\n    if (found) {\n      Object.keys(found).forEach((key) => {\n        popupText += `${key}: ${found[key]}<br />`;\n      });\n    }\n\n    this.changeDesc(popupText);\n    this._redrawSidebar(selectedEl?.layerType);\n  };\n\n  /**\n   * called on change of field\n   */\n  public changeDescriptionAction = (e: InputEvent): void => {\n    this.changeDesc((e.target as HTMLTextAreaElement).value);\n  };\n\n  /**\n   * Takes selected element and bind new popup to it\n   *\n   * @param {String} inputText\n   */\n  public changeDesc = (inputText: string): void => {\n    const selectedEl = this._getSelected();\n    const modInputText = DataControlUtils.convertDescToPopText(inputText);\n\n    const popup1 = selectedEl?.getPopup();\n    if (popup1) {\n      popup1.setContent(modInputText);\n    } else {\n      selectedEl?.bindPopup(modInputText, {\n        closeOnClick: false,\n        autoClose: false,\n      });\n    }\n    // store for import\n    if (selectedEl) selectedEl.popupContent = modInputText;\n    if (selectedEl?.setStyle) selectedEl.setStyle(modInputText);\n  };\n\n  /**\n   * forcefuly change identifier (not on field change)\n   */\n  public callIdentifierChange = (haveToCheckFilters = false): void => {\n    if (haveToCheckFilters && this.filtersAmount === 0) return;\n    const selectedEl = this._getSelected();\n    this.changeIdentifierAction(selectedEl?.identifier || \"\");\n  };\n}\n\nexport default DataControlState;\n","import { IMapFormInput } from \"geovisto\";\nimport { createButton, MAPPING_MODEL } from \"../../../util/inputs\";\nimport AbstractControl from \"../AbstractControl/AbstractControl\";\nimport { ControlProps } from \"../AbstractControl/types\";\nimport DataControlState from \"./DataControlState\";\nimport DataControlUtils from \"./DataControlUtils\";\nimport { TDataControl } from \"./types\";\n\nclass DataControl extends AbstractControl implements TDataControl {\n  public state;\n\n  public constructor(props: ControlProps) {\n    super(props);\n\n    this.state = new DataControlState({\n      tabControl: props.tabControl,\n      control: this,\n    });\n  }\n\n  // ************************* Data Inputs ***************************************\n\n  /**\n   * creates a field for picking column name where to choose identifier from\n   */\n  private createPickIdentifier = (): IMapFormInput => {\n    const { data } = this.state;\n\n    const idOpts = data[0]\n      ? Object.keys(data[0]).map((k) => ({ value: k, label: k }))\n      : [];\n\n    const result = MAPPING_MODEL.idKey.input({\n      ...MAPPING_MODEL.idKey.props,\n      onChangeAction: this.state.changeWhichIdUseAction,\n      options: [{ value: \"\", label: \"\" }, ...idOpts],\n    });\n\n    return result;\n  };\n\n  /**\n   * creates a field for identier input\n   */\n  private createIdentifierInput = (): IMapFormInput => {\n    const { data } = this.state;\n\n    const idKey = this.state.getIdentifierType();\n\n    let idOpts = data && data[0][idKey] ? data.map((d) => d[idKey]) : [];\n    idOpts = Array.from(new Set(idOpts));\n\n    const result = MAPPING_MODEL.identifier.input({\n      ...MAPPING_MODEL.identifier.props,\n      onChangeAction: (e: Event) =>\n        this.state.changeIdentifierAction((e.target as HTMLInputElement).value),\n      options: idOpts,\n      placeholder: \"e.g. CZ\",\n    });\n\n    return result;\n  };\n\n  public renderDataInputs = (elem: HTMLDivElement): void => {\n    const disableTextFields = !this.state._getSelected();\n    // Select Pick Identifier\n    const inputPickIdentifier = this.createPickIdentifier();\n    elem.appendChild(inputPickIdentifier.create() as Node);\n    inputPickIdentifier.setDisabled(disableTextFields);\n    inputPickIdentifier.setValue(this.state.getIdentifierType());\n    // textfield Identifier\n    const inputId = this.createIdentifierInput();\n    elem.appendChild(inputId.create() as Node);\n    inputId.setDisabled(disableTextFields);\n    inputId.setValue(this.state._getSelected()?.identifier || \"\");\n    // textarea Description\n    const inputDesc = MAPPING_MODEL.description.input({\n      ...MAPPING_MODEL.description.props,\n      onChangeAction: this.state.changeDescriptionAction,\n    });\n    elem.appendChild(inputDesc.create() as Node);\n    inputDesc.setValue(\n      DataControlUtils.convertDescfromPopText(\n        (this.state._getSelected()?.getPopup()?.getContent() || \"\") as string\n      )\n    );\n    inputDesc.setDisabled(disableTextFields);\n  };\n\n  // ************************* Data Inputs END ***************************************\n\n  // ************************* Filter Inputs ***************************************\n\n  private setDataKey = (e: InputEvent, index: number): void => {\n    const val = (e.target as HTMLSelectElement).value;\n    this.state.setFiltersKey(index, val);\n    this.state._redrawSidebar(this.state._getSelected()?.layerType);\n  };\n\n  private setDataValue = (e: InputEvent, index: number): void => {\n    const val = (e.target as HTMLSelectElement).value;\n    this.state.setFiltersValue(index, val);\n    this.state.callIdentifierChange();\n    this.state._redrawSidebar(this.state._getSelected()?.layerType);\n  };\n\n  /**\n   * creates the filter fields\n   */\n  public renderDataFilters = (elem: HTMLDivElement): void => {\n    const { data } = this.state;\n\n    const idOpts = data[0]\n      ? Object.keys(data[0]).map((k) => ({ value: k, label: k }))\n      : [];\n\n    for (let index = 0; index < this.state.filtersAmount; index++) {\n      const filtersKey = this.state.getFiltersKey(index);\n      // * input for key\n      const inputKey = MAPPING_MODEL.dataFilterKey.input({\n        ...MAPPING_MODEL.dataFilterKey.props,\n        onChangeAction: (e: InputEvent) => this.setDataKey(e, index),\n        options: [{ value: \"\", label: \"\" }, ...idOpts],\n      });\n\n      // ***********************************************************\n      let valueOpts =\n        data && data[0][filtersKey] ? data.map((d) => d[filtersKey]) : [];\n      valueOpts = Array.from(new Set(valueOpts));\n      // * input for value\n      const inputValue = MAPPING_MODEL.dataFilterValue.input({\n        ...MAPPING_MODEL.dataFilterValue.props,\n        onChangeAction: (e: InputEvent) => this.setDataValue(e, index),\n        options: [\"\", ...valueOpts],\n      });\n\n      // * append elements\n      elem.appendChild(document.createElement(\"hr\"));\n      elem.appendChild(inputKey.create() as Node);\n      elem.appendChild(inputValue.create() as Node);\n\n      inputKey.setValue(filtersKey);\n      inputValue.setValue(this.state.getFiltersValue(index));\n    }\n  };\n\n  private addFilter = (): void => {\n    this.state.increaseFilters();\n    this.state._redrawSidebar(this.state._getSelected()?.layerType);\n  };\n\n  private removeFilter = (): void => {\n    this.state.decreaseFilters();\n    this.state.callIdentifierChange();\n    this.state._redrawSidebar(this.state._getSelected()?.layerType);\n  };\n\n  /**\n   * creates the buttons for adding/removing buttons\n   */\n  public renderFilterInputs = (elem: HTMLDivElement): void => {\n    const disabled = !this.state._getSelected();\n\n    const wrapper = document.createElement(\"div\");\n    wrapper.style.width = \"100%\";\n    const addFilterBtn = createButton(\"Add Filter\", this.addFilter, disabled);\n    const removeFilterBtn = createButton(\n      \"Remove Filter\",\n      this.removeFilter,\n      disabled\n    );\n    wrapper.appendChild(addFilterBtn);\n    wrapper.appendChild(removeFilterBtn);\n    elem.appendChild(wrapper);\n  };\n\n  // ************************* Filter Inputs END ***************************************\n}\n\nexport default DataControl;\n","import { TMarkerControlState } from \"./types\";\nimport { DrawnObject } from \"./../../../model/types/index\";\nimport L from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\n\nimport { FIRST, iconStarter, ICON_SRCS } from \"../../../util/constants\";\nimport AbstractControlState from \"../AbstractControl/AbstractControlState\";\nimport { ControlStateProps } from \"../AbstractControl/types\";\n\nclass MarkerControlState\n  extends AbstractControlState\n  implements TMarkerControlState {\n  public iconSrcs: Set<string>;\n  public selectedIcon: string;\n\n  public constructor(props: ControlStateProps) {\n    super(props);\n\n    this.iconSrcs = new Set(ICON_SRCS);\n    this.selectedIcon = ICON_SRCS[FIRST];\n  }\n\n  /**\n   * getter\n   */\n  public getSelectedIcon(): string {\n    return this.selectedIcon;\n  }\n\n  /**\n   * setter\n   */\n  public setSelectedIcon(icon: string): void {\n    this.selectedIcon = icon;\n  }\n\n  /**\n   * sets new marker icon options (iconUrl, anchor...) to selected object and to extra selected ones\n   */\n  public changeIconOpts = (iconOpt = {}): DrawnObject | null => {\n    const { enabledTool } = this.tabControl.getState();\n    const activeTool = enabledTool?.activetool;\n\n    let selectedEl = this._getSelected();\n    let marker = selectedEl;\n\n    if (activeTool?.type === \"marker\") {\n      selectedEl = activeTool;\n      marker = activeTool._marker;\n    }\n\n    const oldIconOptions = selectedEl?.options?.icon?.options || {};\n    const newIconOptions = {\n      ...oldIconOptions,\n      ...iconOpt,\n    };\n\n    const markerIcon = new L.Icon(newIconOptions);\n    if (marker) marker.setIcon(markerIcon);\n    if (marker) this.tool.highlightElement(marker);\n    this._getExtraSelected().forEach((layer) => {\n      layer?.setIcon(markerIcon);\n      this.tool.highlightElement(layer);\n    });\n    if (activeTool?.type === \"marker\") activeTool.setIconOptions(markerIcon);\n\n    return marker;\n  };\n\n  /**\n   * sets new icon to marker\n   *\n   * @param {String} icon\n   */\n  public changeIconAction = (icon: string): void => {\n    this.changeIconOpts({ iconUrl: icon });\n\n    this.selectedIcon = icon;\n    this._redrawSidebar(\"marker\");\n  };\n\n  /**\n   * sets new anchor to marker\n   */\n  public changeIconAnchor = (e: Event, coordinate: \"x\" | \"y\"): void => {\n    const selectedEl =\n      this.tabControl.getState().enabledTool?.activetool || this._getSelected();\n    const iconOptions = selectedEl?.options?.icon?.options || {};\n    const iconAnchor = iconOptions.iconAnchor || iconStarter.iconAnchor;\n    const val = Number((e.target as HTMLInputElement).value);\n    iconAnchor[coordinate] = val;\n    this.changeIconOpts({ iconAnchor });\n  };\n\n  /**\n   * runs on 'Enter' whenever user adds new icon to list of icons\n   */\n  public addIconAction = (e: InputEvent): void => {\n    const iconUrl = (e.target as HTMLInputElement).value;\n    this.appendToIconSrcs(iconUrl);\n    this._redrawSidebar(\"marker\");\n  };\n\n  /**\n   * append to icon Set\n   */\n  public appendToIconSrcs(iconUrl: string): void {\n    this.iconSrcs.add(iconUrl);\n  }\n}\n\nexport default MarkerControlState;\n","import { TMarkerControlState } from \"./types\";\nimport { createPalette, MAPPING_MODEL } from \"../../../util/inputs\";\nimport { iconStarter } from \"../../../util/constants\";\nimport AbstractControl from \"../AbstractControl/AbstractControl\";\nimport MarkerControlState from \"./MarkerControlState\";\nimport { ControlProps, TAbstractControl } from \"../AbstractControl/types\";\n\nclass MarkerControl\n  extends AbstractControl\n  implements TAbstractControl<TMarkerControlState> {\n  private tabControl;\n  public state;\n\n  public constructor(props: ControlProps) {\n    super(props);\n\n    this.tabControl = props.tabControl;\n\n    this.state = new MarkerControlState({\n      tabControl: props.tabControl,\n      control: this,\n    });\n  }\n\n  /**\n   * creates a icon grid\n   */\n  private createIconPalette(): HTMLDivElement {\n    const iconsSet = this.state.iconSrcs;\n    const iconUrl = this.state._getSelected()?.options?.icon?.options?.iconUrl;\n    if (iconUrl) iconsSet.add(iconUrl);\n    const activeIcon = this.state.getSelectedIcon();\n    const iconsArr: string[] = Array.from(iconsSet);\n    const activeIndex = iconsArr.indexOf(activeIcon);\n    const res = createPalette(\n      \"Pick icon\",\n      iconsArr,\n      activeIndex,\n      this.state.changeIconAction,\n      true\n    );\n    return res;\n  }\n\n  /**\n   * slider for anchor change\n   */\n  private createIconAnchorSlider = (coordinate: \"x\" | \"y\"): HTMLElement => {\n    const selectedEl = this.state._getSelected();\n\n    const iconOptions = selectedEl?.options?.icon?.options || {};\n    const iconAnchor = iconOptions.iconAnchor || iconStarter.iconAnchor;\n    const value = iconAnchor[coordinate] || \"\";\n\n    const customAnchor = MAPPING_MODEL.iconAnchor.input({\n      label: `Icon '${coordinate.toUpperCase()}' anchor`,\n      minValue: 0,\n      maxValue: 50,\n      onChangeAction: (e: Event) => this.state.changeIconAnchor(e, coordinate),\n      defaultValue: value,\n    });\n\n    return customAnchor.create();\n  };\n\n  /**\n   * X coordinate slider\n   */\n  private createXAnchorSlider = (): HTMLElement =>\n    this.createIconAnchorSlider(\"x\");\n\n  /**\n   * Y coordinate slider\n   */\n  private createYAnchorSlider = (): HTMLElement =>\n    this.createIconAnchorSlider(\"y\");\n\n  /**\n   * checkbox to set if marker is connect marker\n   */\n  private createChangeConnectCheck = (): HTMLElement => {\n    const toolState = this.tabControl.getTool().getState();\n    const onChange = (e: Event) => {\n      const connectClick = (e.target as HTMLInputElement).checked;\n      const selected = this.state.changeIconOpts({ connectClick });\n\n      if (selected) {\n        this.tabControl.getTool().highlightElement(selected);\n      }\n    };\n    const isConnect = toolState.selectedLayerIsConnectMarker();\n\n    const result = MAPPING_MODEL.changeConnect.input({\n      ...MAPPING_MODEL.changeConnect.props,\n      defaultValue: isConnect,\n      onChangeAction: onChange,\n    });\n\n    return result.create();\n  };\n\n  /**\n   * creates the fields associated with marker\n   */\n  public renderIconInputs = (elem: HTMLDivElement): void => {\n    // palette Icons\n    const inputIcon = this.createIconPalette();\n    elem.appendChild(inputIcon);\n\n    const inputUrl = MAPPING_MODEL.iconUrl.input({\n      ...MAPPING_MODEL.iconUrl.props,\n      action: this.state.addIconAction,\n    });\n\n    elem.appendChild(inputUrl.create() as Node);\n    inputUrl.setValue(\"\");\n\n    const changeConnect = this.createChangeConnectCheck();\n    elem.appendChild(changeConnect);\n\n    elem.appendChild(this.createXAnchorSlider());\n    elem.appendChild(this.createYAnchorSlider());\n  };\n}\n\nexport default MarkerControl;\n","import { COLORS, SelectOpts, STROKES } from \"../../../util/constants\";\nimport AbstractControlState from \"../AbstractControl/AbstractControlState\";\nimport { ControlStateProps } from \"../AbstractControl/types\";\nimport { TPolyControlState } from \"./types\";\n\nclass PolyControlState\n  extends AbstractControlState\n  implements TPolyControlState {\n  public intersectActivated: boolean;\n  public colors: string[];\n  public selectedColor: string;\n  public strokes: SelectOpts;\n  public selectedStroke: number;\n\n  public constructor(props: ControlStateProps) {\n    super(props);\n\n    this.intersectActivated = false;\n\n    this.colors = COLORS;\n    this.selectedColor = COLORS[0];\n\n    this.strokes = STROKES;\n    this.selectedStroke = STROKES[1].value;\n  }\n\n  /**\n   * getter\n   */\n  public getSelectedColor(): string {\n    return this.selectedColor;\n  }\n\n  /**\n   * getter\n   */\n  public getSelectedStroke(): number {\n    return this.selectedStroke;\n  }\n\n  /**\n   * sets whether we are creating new polygons within selected one\n   */\n  public setIntersectActivated(val: boolean): void {\n    this.intersectActivated = val;\n  }\n\n  /**\n   * sets new color to selected object and to extra selected ones\n   */\n  public changeColorAction = (color: string): void => {\n    const selectedEl = this._getSelected();\n    this.selectedColor = color;\n    if (selectedEl?.setStyle) selectedEl.setStyle({ color });\n    this._getExtraSelected().forEach((layer) => {\n      layer?.setStyle({ color });\n    });\n  };\n\n  /**\n   * sets new stroke weight to selected object and to extra selected ones\n   */\n  public changeWeightAction = (e: Event): void => {\n    const weight = Number((e.target as HTMLSelectElement).value);\n    const selectedEl = this._getSelected();\n    this.selectedStroke = weight;\n    if (selectedEl?.setStyle) selectedEl.setStyle({ weight });\n    this._getExtraSelected().forEach((layer) => {\n      layer?.setStyle({ weight });\n    });\n  };\n}\n\nexport default PolyControlState;\n","import { MAPPING_MODEL } from \"../../../util/inputs\";\nimport AbstractControl from \"../AbstractControl/AbstractControl\";\nimport { ControlProps, TAbstractControl } from \"../AbstractControl/types\";\nimport PolyControlState from \"./PolyControlState\";\nimport { TPolyControlState } from \"./types\";\n\nclass PolyControl\n  extends AbstractControl\n  implements TAbstractControl<TPolyControlState> {\n  public state;\n\n  public constructor(props: ControlProps) {\n    super(props);\n\n    this.state = new PolyControlState({\n      tabControl: props.tabControl,\n      control: this,\n    });\n  }\n\n  /**\n   * checkbox to set if we can create within selected object\n   */\n  public createIntersectionCheck = (): HTMLElement => {\n    const onChange = (e: Event) => {\n      const val = (e.target as HTMLInputElement).checked;\n      this.state.setIntersectActivated(val);\n    };\n    const { intersectActivated } = this.state;\n\n    const result = MAPPING_MODEL.intersectActivated.input({\n      ...MAPPING_MODEL.intersectActivated.props,\n      defaultValue: intersectActivated,\n      onChangeAction: onChange,\n    });\n\n    return result.create();\n  };\n\n  /**\n   * creates the fields associated with polygons/polylines\n   *\n   * @param {Object} elem\n   * @param {Object} model\n   */\n  public renderPolyInputs = (elem: HTMLDivElement): void => {\n    // select stroke thickness\n    const thicknessOpts = this.state.strokes;\n    const inputThickness = MAPPING_MODEL.strokeThickness.input({\n      ...MAPPING_MODEL.strokeThickness.props,\n      options: thicknessOpts,\n      action: this.state.changeWeightAction,\n    });\n    elem.appendChild(inputThickness.create() as Node);\n    inputThickness.setValue(\n      this.state._getSelected()?.options?.weight ||\n        this.state.getSelectedStroke()\n    );\n\n    // palette Colors\n    const inputColor = this.createColorPicker();\n    elem.appendChild(inputColor);\n  };\n\n  /**\n   * creates color picker field\n   */\n  private createColorPicker(): HTMLDivElement {\n    const inputWrapper = document.createElement(\"div\");\n    inputWrapper.appendChild(document.createTextNode(\"Pick color: \"));\n    const colorPicker = document.createElement(\"input\");\n    colorPicker.setAttribute(\"type\", \"color\");\n    colorPicker.onchange = (e) =>\n      this.state.changeColorAction((e.target as HTMLInputElement).value);\n    colorPicker.value = String(\n      this.state._getSelected()?.options?.color || this.state.getSelectedColor()\n    );\n    inputWrapper.appendChild(colorPicker);\n    return inputWrapper;\n  }\n}\n\nexport default PolyControl;\n","import { MAPPING_MODEL } from \"../../../util/inputs\";\nimport { EraseTool, PaintTool } from \"../../../tools\";\nimport { getIntervalStep } from \"../../../util/baseHelpers\";\nimport AbstractControl from \"../AbstractControl/AbstractControl\";\nimport { ControlProps } from \"../AbstractControl/types\";\nimport { TBrushControl } from \"./types\";\nimport { TPaintTool } from \"../../../tools/PaintTool/types\";\nimport { TEraseTool } from \"../../../tools/EraseTool/types\";\nimport { Map } from \"leaflet\";\n\nclass BrushControl extends AbstractControl implements TBrushControl {\n  private tabControl;\n  private customToleranceInput: HTMLDivElement;\n  private map: Map | undefined;\n\n  public constructor(props: ControlProps) {\n    super(props);\n\n    this.tabControl = props.tabControl;\n    this.customToleranceInput = document.createElement(\"div\");\n    this.map = props.tabControl.getTool().getMap()?.getState()?.getLeafletMap();\n  }\n\n  /**\n   * creates a field for brush size input\n   */\n  public createBrushSizeControl = (): HTMLDivElement | null => {\n    const { drawingTools = {} } = this.tabControl.getTool();\n\n    const paintTool = drawingTools[PaintTool.NAME()];\n    const eraseTool = drawingTools[EraseTool.NAME()];\n\n    let brush: TPaintTool | TEraseTool | null = null;\n    if (paintTool?.isToolActive()) brush = paintTool as TPaintTool;\n    if (eraseTool?.isToolActive()) brush = eraseTool as TEraseTool;\n\n    if (!brush) return null;\n\n    const { maxBrushSize, minBrushSize } = brush.getBrushSizeConstraints();\n\n    const controlWrapper = document.createElement(\"div\");\n    const brushControl = MAPPING_MODEL.brushSize.input({\n      onChangeAction: (e: Event) =>\n        brush?.resizeBrush(Number((e.target as HTMLInputElement).value)),\n      label: \"Brush size: \",\n      defaultValue: brush.getBrushSize(),\n      maxValue: maxBrushSize,\n      minValue: minBrushSize,\n    });\n    controlWrapper.appendChild(brushControl.create());\n\n    const customToleranceCheck = this.createCustomToleranceCheck();\n    controlWrapper.appendChild(customToleranceCheck);\n\n    controlWrapper.appendChild(this.customToleranceInput);\n    return controlWrapper;\n  };\n\n  private toleranceChange = (e: Event): void => {\n    const val = Number((e.target as HTMLInputElement).value);\n    window.customTolerance = val;\n  };\n\n  private onChange = (e: Event): void => {\n    const check = (e.target as HTMLInputElement).checked;\n    if (check) {\n      const val = window.customTolerance;\n      const step = getIntervalStep(val);\n      const customTolerance = MAPPING_MODEL.customToleranceValue.input({\n        label: \"Custom tolerance\",\n        onChangeAction: (e: Event) => this.toleranceChange(e),\n        minValue: 0.0,\n        maxValue: val * 2,\n        defaultValue: String(val || \"\"),\n        step: step,\n      });\n      this.customToleranceInput.appendChild(customTolerance.create());\n    } else {\n      const firstChild = this.customToleranceInput.firstChild;\n      if (firstChild) this.customToleranceInput.removeChild(firstChild);\n      this.tabControl.getTool().setGlobalSimplificationTolerance(this.map);\n    }\n  };\n\n  private createCustomToleranceCheck = (): HTMLElement => {\n    // * tolerance changes with zoom\n    this.map?.on(\"zoomend\", () => {\n      const firstChild = this.customToleranceInput.firstChild;\n      if (firstChild) {\n        const interval = firstChild?.firstChild?.lastChild as HTMLInputElement;\n        const display = firstChild.lastChild;\n        const val = window.customTolerance;\n        if (display) (display as HTMLElement).innerText = String(val);\n        if (interval) {\n          interval.value = String(val);\n          const step = getIntervalStep(val);\n          interval.step = String(step);\n          interval.max = String(val * 2);\n        }\n      }\n    });\n\n    const result = MAPPING_MODEL.customToleranceCheck.input({\n      ...MAPPING_MODEL.customToleranceCheck.props,\n      defaultValue: false,\n      onChangeAction: this.onChange,\n    });\n\n    return result.create();\n  };\n}\n\nexport default BrushControl;\n","import { TSearchControlState } from \"./types\";\nimport { LooseObject, DrawnObject } from \"./../../../model/types/index\";\nimport { ControlStateProps } from \"./../AbstractControl/types\";\nimport L from \"leaflet\";\nimport \"leaflet-path-drag\";\nimport \"leaflet-path-transform\";\nimport \"leaflet-draw\";\nimport { SearchTool, TopologyTool } from \"../../../tools\";\nimport { ADMIN_LEVELS, ICON_SRCS } from \"../../../util/constants\";\nimport AbstractControlState from \"../AbstractControl/AbstractControlState\";\n\nclass SearchControlState\n  extends AbstractControlState\n  implements TSearchControlState {\n  public countries: Array<{\n    name: string;\n    \"alpha-2\": string;\n    \"country-code\": string;\n  }>;\n  public countryCode: string;\n  public adminLevel: number;\n  public searchOpts: LooseObject[];\n  public highQuality: boolean;\n  public connectActivated: boolean;\n\n  public constructor(props: ControlStateProps) {\n    super(props);\n\n    // this.countries = require(\"/static/geo/iso3166_countries.json\");\n    this.countries = [];\n    this.countryCode = \"\";\n\n    this.adminLevel = ADMIN_LEVELS[1].value;\n    this.searchOpts = [];\n\n    this.highQuality = false;\n    this.connectActivated = false;\n  }\n\n  /**\n   * takes countries from static file and maps through them\n   */\n  public getSelectCountries(): { value: string; label: string }[] {\n    const result = this.countries.map((c) => ({\n      value: c[\"alpha-2\"],\n      label: c[\"name\"],\n    }));\n    return [{ value: \"\", label: \"\" }, ...result];\n  }\n\n  /**\n   * sets whether displayed polygon will be of high quality\n   */\n  public setHighQuality(val: boolean): void {\n    this.highQuality = val;\n  }\n\n  /**\n   * sets whether we are creating topology with search\n   */\n  public setConnectActivated(val: boolean): void {\n    this.connectActivated = val;\n  }\n\n  /**\n   * sets for what area we are searching for\n   */\n  public searchForAreaAction = (e: InputEvent): void => {\n    const val = (e.target as HTMLSelectElement).value;\n    this.countryCode = val;\n  };\n\n  /**\n   * sets for what administration level we are searching for\n   */\n  public pickAdminLevelAction = (e: InputEvent): void => {\n    const val = (e.target as HTMLSelectElement).value;\n    this.adminLevel = Number(val);\n  };\n\n  /**\n   * sets new options for place search\n   */\n  public searchAction = async (e: InputEvent): Promise<void> => {\n    const value = (e.target as HTMLInputElement).value;\n    const featureGroup = this.tool.getState().featureGroup;\n\n    const opts = await SearchTool.geoSearch(featureGroup, value);\n\n    this.searchOpts = opts || [];\n    this.control.inputSearch.changeOptions(\n      opts ? opts.map((opt) => opt.label || \"\") : []\n    );\n  };\n\n  /**\n   * called when user picks a place from displayed options\n   */\n  public onInputOptClick = (value: string): void => {\n    const featureGroup = this.tabControl.getTool().getState().featureGroup;\n    const { searchOpts: opts, connectActivated } = this;\n\n    const found = opts.find((opt) => opt.label === value);\n\n    const latlng = L.latLng(0, 0);\n    latlng.lat = found?.y || 0;\n    latlng.lng = found?.x || 0;\n    const iconUrl = found?.raw?.icon || ICON_SRCS[0];\n    const marker = SearchTool.putMarkerOnMap(\n      featureGroup,\n      latlng,\n      found?.label,\n      iconUrl,\n      connectActivated\n    );\n    this.tool.applyEventListeners(marker);\n    this.tabControl.getState().setSelectedIcon(iconUrl);\n    this.tabControl.getState().appendToIconSrcs(iconUrl);\n    if (connectActivated) {\n      this.tool.drawingTools[TopologyTool.NAME()].plotTopology();\n    }\n    this._redrawSidebar(\"search\");\n  };\n\n  /**\n   * builds query from inputed values and send it to Overpass API\n   *\n   * @returns\n   */\n  public fetchAreas = async (): Promise<void> => {\n    const { countryCode, adminLevel, highQuality } = this;\n\n    if (!countryCode || !adminLevel) return;\n\n    (document.querySelector(\n      \".leaflet-container\"\n    ) as HTMLDivElement).style.cursor = \"wait\";\n    this.control.searchForAreasBtn.setAttribute(\"disabled\", true);\n\n    const color = this.tabControl.getState().getSelectedColor();\n    const { data, error } = await SearchTool.fetchAreas(\n      countryCode,\n      adminLevel,\n      highQuality,\n      color\n    );\n\n    if (error) {\n      this.control.errorMsg.innerText = error;\n    } else {\n      this.control.errorMsg.innerText = \"\";\n      const toolState = this.tool.getState();\n      // * remove previous object of fetched country\n      toolState.featureGroup.eachLayer((layer) => {\n        const drawnLayer = layer as DrawnObject;\n        if (drawnLayer.countryCode === countryCode)\n          toolState.removeLayer(drawnLayer);\n      });\n      data.forEach((country) => toolState.addLayer(country));\n    }\n\n    (document.querySelector(\n      \".leaflet-container\"\n    ) as HTMLDivElement).style.cursor = \"\";\n    this.control.searchForAreasBtn.removeAttribute(\"disabled\");\n  };\n}\n\nexport default SearchControlState;\n","import { TSearchControl } from \"./types\";\nimport { ControlProps } from \"./../AbstractControl/types\";\nimport { MAPPING_MODEL } from \"../../../util/inputs\";\nimport { ADMIN_LEVELS } from \"../../../util/constants\";\nimport AbstractControl from \"../AbstractControl/AbstractControl\";\nimport SearchControlState from \"./SearchControlState\";\nimport { IMapFormInput } from \"geovisto\";\n\nclass SearchControl extends AbstractControl implements TSearchControl {\n  public state;\n  public inputSearch: IMapFormInput | null;\n  public inputConnect: HTMLElement | null;\n  public errorMsg: HTMLDivElement | null;\n  public searchForAreasBtn: HTMLButtonElement | null;\n\n  public constructor(props: ControlProps) {\n    super(props);\n\n    this.state = new SearchControlState({\n      tabControl: props.tabControl,\n      control: this,\n    });\n\n    this.inputSearch = null;\n    this.inputConnect = null;\n    this.errorMsg = null;\n    this.searchForAreasBtn = null;\n  }\n\n  /**\n   * checkbox to be able to create topology with place search\n   */\n  private createConnectCheck = (): HTMLElement => {\n    const onChange = (e: Event) => {\n      const val = (e.target as HTMLInputElement).checked;\n      this.state.setConnectActivated(val);\n    };\n    const { connectActivated } = this.state;\n\n    const result = MAPPING_MODEL.searchConnect.input({\n      ...MAPPING_MODEL.searchConnect.props,\n      defaultValue: connectActivated,\n      onChangeAction: onChange,\n    });\n\n    const checkWrapper = document.createElement(\"div\");\n    checkWrapper.classList.add(\"connect-check\");\n    checkWrapper.appendChild(result.create());\n\n    return checkWrapper;\n  };\n\n  /**\n   * checkbox to set if result of area search will be HQ\n   */\n  private createHighQualityCheck = (): HTMLElement => {\n    const onChange = (e: Event) => {\n      const val = (e.target as HTMLInputElement).checked;\n      this.state.setHighQuality(val);\n    };\n    const { highQuality } = this.state;\n\n    const result = MAPPING_MODEL.highQuality.input({\n      ...MAPPING_MODEL.highQuality.props,\n      defaultValue: highQuality,\n      onChangeAction: onChange,\n    });\n\n    return result.create();\n  };\n\n  /**\n   * creates heading element\n   */\n  private addHeading = (title: string, elem: HTMLDivElement): void => {\n    const headingTag = document.createElement(\"h3\");\n    headingTag.innerText = title;\n    elem.appendChild(headingTag);\n  };\n\n  /**\n   * creates all of the search inputs\n   *\n   * @param {Object} elem HTML element wrapper\n   * @param {Object} model\n   */\n  public renderSearchInputs = (elem: HTMLDivElement): void => {\n    this.addHeading(\"Search for place\", elem);\n    // * labeled text Search\n    this.inputSearch = MAPPING_MODEL.search.input({\n      ...MAPPING_MODEL.search.props,\n      onChangeAction: this.state.searchAction,\n      placeholder: \"Press enter for search\",\n      setData: this.state.onInputOptClick,\n      options: [],\n    });\n    elem.appendChild(this.inputSearch.create() as Node);\n\n    this.inputConnect = this.createConnectCheck();\n    elem.appendChild(this.inputConnect);\n    // * divider\n    elem.appendChild(document.createElement(\"hr\"));\n\n    this.addHeading(\"Search for area\", elem);\n    // * labeled text Search\n    const inputSearchForArea = MAPPING_MODEL.searchForArea.input({\n      ...MAPPING_MODEL.searchForArea.props,\n      options: this.state.getSelectCountries(),\n      onChangeAction: this.state.searchForAreaAction,\n    });\n    elem.appendChild(inputSearchForArea.create() as Node);\n    inputSearchForArea.setValue(this.state.countryCode || \"\");\n    elem.appendChild(document.createElement(\"br\"));\n\n    const inputAdminLevel = MAPPING_MODEL.adminLevel.input({\n      ...MAPPING_MODEL.adminLevel.props,\n      options: ADMIN_LEVELS,\n      onChangeAction: this.state.pickAdminLevelAction,\n    });\n    inputAdminLevel.setValue(this.state.adminLevel);\n    elem.appendChild(inputAdminLevel.create() as Node);\n    elem.appendChild(document.createElement(\"br\"));\n\n    const hqCheck = this.createHighQualityCheck();\n    elem.appendChild(hqCheck);\n\n    this.errorMsg = document.createElement(\"div\");\n    this.errorMsg.className = \"error-text\";\n    this.errorMsg.innerText = \"\";\n    elem.appendChild(this.errorMsg);\n\n    this.searchForAreasBtn = document.createElement(\"button\");\n    this.searchForAreasBtn.innerText = \"Submit\";\n    this.searchForAreasBtn.addEventListener(\"click\", this.state.fetchAreas);\n    elem.appendChild(this.searchForAreasBtn);\n  };\n}\n\nexport default SearchControl;\n","import AbstractControlState from \"../AbstractControl/AbstractControlState\";\nimport { ControlStateProps } from \"../AbstractControl/types\";\nimport { TGeoJSONControlState } from \"./types\";\n\nclass GeoJSONControlState\n  extends AbstractControlState\n  implements TGeoJSONControlState {\n\n  public constructor(props: ControlStateProps) {\n    super(props);\n  }\n}\n\nexport default GeoJSONControlState;\n","import { IGeoData, IGeoDataManager, LabeledAutocompleteFormInput } from \"geovisto\";\n\nimport AbstractControl from \"../AbstractControl/AbstractControl\";\nimport { ControlProps } from \"../AbstractControl/types\";\nimport GeoJSONControlState from \"./GeoJSONControlState\";\nimport { TGeoJSONControl } from \"./types\";\n\n\nclass GeoJSONControl extends AbstractControl implements TGeoJSONControl {\n  public state;\n  \n  private geoDataManager?: IGeoDataManager;\n\n  public constructor(props: ControlProps) {\n    super(props);\n\n    this.state = new GeoJSONControlState({\n      tabControl: props.tabControl,\n      control: this,\n    });\n\n    this.geoDataManager = this.state.tool.getMap()?.getState().getGeoDataManager();\n  }\n  /**\n   * creates heading element\n   */\n  private addHeading = (title: string, elem: HTMLDivElement): void => {\n    const headingTag = document.createElement(\"h3\");\n    headingTag.innerText = title;\n    elem.appendChild(headingTag);\n  };\n\n  /**\n   * creates all of the search inputs\n   *\n   * @param {Object} elem HTML element wrapper\n   * @param {Object} model\n   */  \n  public renderGeoJSONInputs(elem: HTMLDivElement): void {\n    this.createImportForm(elem);\n    this.createExportForm(elem);\n  }\n\n  protected createImportForm(elem: HTMLDivElement): void {\n    const exportDiv: HTMLDivElement = document.createElement(\"div\");\n    const autocompleteInput = new LabeledAutocompleteFormInput({\n      label: \"Import geoJSON:\",\n      options: this.geoDataManager?.getDomainNames() ?? [],\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      onChangeAction: () => {}\n    });\n\n    const importButton: HTMLInputElement = document.createElement(\"input\");\n    importButton.id = \"geovisto-tool-drawing-geojson-export-button\";\n    importButton.type = \"button\";\n    importButton.size = 3;\n    importButton.value = \"import\";\n    importButton.onclick = () => {\n      const geoData: IGeoData | undefined = this.geoDataManager?.getDomain(autocompleteInput.getValue());\n      if(geoData) {\n        this.state.tool.getState().deserializeGeoJSON(geoData.getGeoJSON() as any);\n      }\n    };\n    importButton.style.display = \"block\";\n\n    exportDiv.appendChild(autocompleteInput.create());\n    exportDiv.appendChild(importButton);\n\n    elem.appendChild(exportDiv);\n  }\n\n  protected createExportForm(elem: HTMLDivElement): void {\n    const exportDiv: HTMLDivElement = document.createElement(\"div\");\n    exportDiv.style.paddingTop = \"1rem\";\n\n    const exportLabel:  HTMLDivElement = document.createElement(\"div\");\n    exportLabel.style.paddingLeft = \"5px\";\n    //exportLabel.htmlFor = \"geovisto-tool-drawing-geojson-export-button\";\n    exportLabel.innerHTML = \"Export geoJSON:\";\n\n    const exportButton: HTMLInputElement = document.createElement(\"input\");\n    exportButton.id = \"geovisto-tool-drawing-geojson-export-button\";\n    exportButton.type = \"button\";\n    exportButton.size = 3;\n    exportButton.value = \"export\";\n    exportButton.onclick = () => {\n      const config = JSON.stringify(\n        this.state.tool.getState().serializeToGeoJSON(),\n        null,\n        2\n      );\n      // download file\n      const element = document.createElement(\"a\");\n      element.setAttribute(\n        \"href\",\n        \"data:text/plain;charset=utf-8,\" + encodeURIComponent(config)\n      );\n      element.setAttribute(\"download\", \"map.json\");\n      element.style.display = \"none\";\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    };\n\n    exportDiv.appendChild(exportLabel);\n    exportDiv.appendChild(exportButton);\n\n    elem.appendChild(exportDiv);\n  }\n\n}\n\nexport default GeoJSONControl;\n","import DataControl from \"./components/DataControl/DataControl\";\nimport MarkerControl from \"./components/MarkerControl/MarkerControl\";\nimport PolyControl from \"./components/PolyControl/PolyControl\";\nimport BrushControl from \"./components/BrushControl/BrushControl\";\nimport SearchControl from \"./components/SearchControl/SearchControl\";\nimport {\n  Controls,\n  DrawingForm,\n  SelectedDrawingTool,\n  TabState,\n} from \"../model/types/tool/IDrawingLayerTool\";\n\nimport { DrawnObject } from \"../model/types\";\nimport GeoJSONControl from \"./components/GeoJSONControl/GeoJSONControl\";\n\n/**\n * This class manages the state of the sidebar tab.\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\n *\n * @author Andrej Tlcina\n */\nclass DrawingLayerToolMapFormState implements TabState {\n  public tabControl: DrawingForm;\n  public enabledTool: SelectedDrawingTool | null;\n  public guideLayers: DrawnObject[];\n  public controls!: Controls;\n  /**\n   * It creates a tab control state.\n   */\n  public constructor(tabControl: DrawingForm) {\n    this.tabControl = tabControl;\n\n    // * element/layer that was enabled and not created yet\n    this.enabledTool = null;\n\n    this.guideLayers = [];\n  }\n\n  /**\n   * method initializes controls for objects manipulation\n   */\n  public initializeControls = (): void => {\n    const { tabControl } = this;\n\n    const controls = {\n      DataControl: new DataControl({ tabControl }),\n      MarkerControl: new MarkerControl({ tabControl }),\n      PolyControl: new PolyControl({ tabControl }),\n      SearchControl: new SearchControl({ tabControl }),\n      BrushControl: new BrushControl({ tabControl }),\n      GeoJSONControl: new GeoJSONControl({ tabControl }),\n    };\n\n    this.controls = controls;\n  };\n\n  /**\n   * method if defined for easier access through tabControlState class/object\n   */\n  public getSelectedColor(): string {\n    const state = this.controls[\"PolyControl\"]?.state;\n    return state?.getSelectedColor() || \"\";\n  }\n\n  /**\n   * method if defined for easier access through tabControlState class/object\n   */\n  public getSelectedStroke(): number {\n    const state = this.controls[\"PolyControl\"]?.state;\n    return state?.getSelectedStroke() || 0;\n  }\n\n  /**\n   * method if defined for easier access through tabControlState class/object\n   */\n  public getSelectedIcon(): string {\n    const state = this.controls[\"MarkerControl\"]?.state;\n    return state?.getSelectedIcon() || \"\";\n  }\n\n  public setSelectedIcon(icon: string): void {\n    this.controls[\"MarkerControl\"]?.state?.setSelectedIcon(icon);\n  }\n\n  /**\n   * method if defined for easier access through tabControlState class/object\n   */\n  public callIdentifierChange(haveToCheckFilters = false): void {\n    const state = this.controls[\"DataControl\"]?.state;\n    state?.callIdentifierChange(haveToCheckFilters);\n  }\n\n  /**\n   * method if defined for easier access through tabControlState class/object\n   */\n  public appendToIconSrcs(iconUrl: string): void {\n    const state = this.controls[\"MarkerControl\"]?.state;\n    state?.appendToIconSrcs(iconUrl);\n  }\n\n  /**\n   * method for easier access through tabControlState class/object\n   */\n  public getIntersectActivated(): boolean {\n    const state = this.controls[\"PolyControl\"]?.state;\n    return state?.intersectActivated || false;\n  }\n  /**\n   * adds guide layer for snapping\n   */\n  public pushGuideLayer(layer: DrawnObject): void {\n    this.guideLayers.push(layer);\n  }\n\n  /**\n   * setter for enabledTool variable\n   */\n  public setEnabledTool(val: SelectedDrawingTool | null): void {\n    this.enabledTool?.disable();\n    this.enabledTool = val;\n  }\n\n  /**\n   * getter\n   */\n  public getEnabledTool(): SelectedDrawingTool | null {\n    return this.enabledTool;\n  }\n}\nexport default DrawingLayerToolMapFormState;\n","import { LayerType } from \"../../model/types\";\nimport { AbstractTool } from \"../AbstractTool\";\nimport { ToolProps } from \"../AbstractTool/types\";\nimport { TGeoJSONTool } from \"./types\";\n\n\nclass GeoJSONTool extends AbstractTool implements TGeoJSONTool {\n  public static result = \"geojson\";\n\n  public constructor(props: ToolProps) {\n    super(props);\n  }\n\n  public static NAME(): string {\n    return \"geojson-drawing-tool\";\n  }\n\n  public getName(): string {\n    return GeoJSONTool.NAME();\n  }\n\n  public getIconName(): string {\n    return \"fa fa-download\";\n  }\n\n  public getTitle(): string {\n    return \"GeoJSON drawing tool\";\n  }\n\n  public result = (): LayerType => {\n    return \"geojson\";\n  };\n\n  public enable = (): void => {\n    this._redrawSidebar(this.result());\n  };\n\n\n}\n\nexport default GeoJSONTool;\n","import DrawingLayerToolMapFormState from \"./DrawingLayerToolMapFormState\";\n\nimport { MarkerTool, PaintTool, PolygonTool, SearchTool } from \"../tools\";\n\nimport \"../style/drawingLayerTabControl.scss\";\nimport { isEmpty } from \"../util/baseHelpers\";\nimport { MapLayerToolForm } from \"geovisto\";\nimport IDrawingLayerTool, {\n  DrawingForm,\n  TabState,\n} from \"../model/types/tool/IDrawingLayerTool\";\nimport { LayerType, LooseObject } from \"../model/types\";\nimport IDrawingLayerToolDimensions from \"../model/types/tool/IDrawingLayerToolDimensions\";\nimport { FIRST } from \"../util/constants\";\nimport { GeoJSONTool } from \"../tools/GeoJSONTool\";\n\nconst POLYS = [\"polyline\", \"polygon\", \"painted\", \"vertice\"];\n\nconst tabContentClassName = \"drawing-sidebar\";\n\n/**\n * This class provides controls for management of the layer sidebar tab.\n *\n * @author Andrej Tlcina\n */\nclass DrawingLayerToolMapForm\n  extends MapLayerToolForm<IDrawingLayerTool>\n  implements DrawingForm {\n  private htmlContent!: HTMLDivElement;\n\n  private tool: IDrawingLayerTool;\n  private state: TabState;\n\n  public constructor(props: { tool: IDrawingLayerTool }) {\n    super(props.tool);\n\n    this.tool = props.tool;\n    this.state = new DrawingLayerToolMapFormState(this);\n  }\n\n  public setInputValues(dimensions: IDrawingLayerToolDimensions): void {\n    return;\n  }\n\n  public getTool(): IDrawingLayerTool {\n    return this.tool;\n  }\n\n  /**\n   * It creates new state of the tab control.\n   */\n  public getState(): TabState {\n    return this.state;\n  }\n\n  /**\n   * removes all elements of a sidebar and calls function to create new content of the sidebar\n   */\n  public redrawTabContent(layerType: LayerType | \"\"): void {\n    //console.log(\"redrawing sidebar...\");\n\n    // create sidebar tab content\n    const tabContent = document.getElementsByClassName(tabContentClassName)[\n      FIRST\n    ];\n\n    while (tabContent.firstChild) {\n      tabContent.removeChild(tabContent.firstChild);\n    }\n\n    tabContent.appendChild(this.getContent(layerType));\n  }\n\n  /**\n   * It returns the sidebar tab pane.\n   */\n  public getContent(layerType: LayerType | \"\" = \"\"): HTMLDivElement {\n    const { controls } = this.getState();\n\n    // tab content\n    this.htmlContent = document.createElement(\"div\");\n    const elem = this.htmlContent.appendChild(document.createElement(\"div\"));\n    elem.classList.add(tabContentClassName);\n\n    if (!controls || isEmpty<LooseObject>(controls)) return this.htmlContent;\n\n    const brushControl = controls[\"BrushControl\"].createBrushSizeControl();\n    if (brushControl) elem.appendChild(brushControl);\n\n    if (!layerType) {\n      controls[\"DataControl\"].state.clearFilters();\n      return this.htmlContent;\n    }\n\n    if (layerType === SearchTool.result) {\n      controls[\"SearchControl\"].renderSearchInputs(elem);\n      controls[\"DataControl\"].state.clearFilters();\n      return this.htmlContent;\n    }\n\n    if (layerType === GeoJSONTool.result) {\n      controls[\"GeoJSONControl\"].renderGeoJSONInputs(elem);\n      return this.htmlContent;\n    }\n\n    controls[\"DataControl\"].renderDataInputs(elem);\n    controls[\"DataControl\"].renderDataFilters(elem);\n    controls[\"DataControl\"].renderFilterInputs(elem);\n\n    if (layerType === PaintTool.result || layerType === PolygonTool.result) {\n      elem.appendChild(document.createElement(\"br\"));\n      elem.appendChild(document.createElement(\"br\"));\n      const intersectCheck = controls[\"PolyControl\"].createIntersectionCheck();\n      elem.appendChild(intersectCheck);\n    }\n\n    if (POLYS.includes(layerType)) {\n      controls[\"PolyControl\"].renderPolyInputs(elem);\n    }\n\n    if (layerType === MarkerTool.result) {\n      controls[\"MarkerControl\"].renderIconInputs(elem);\n    }\n\n    return this.htmlContent;\n  }\n}\nexport default DrawingLayerToolMapForm;\n","import * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport \"leaflet-draw\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\n\nimport \"../style/drawingLayer.scss\";\nimport { EditTool, TransformTool } from \"../tools\";\nimport { Tool } from \"../model/types\";\nimport { DrawingBtns, Options } from \"../model/types/sidebar/DrawingToolbar\";\n\n/**\n * @author Andrej Tlcina\n */\nexport default function useDrawingToolbar(): void {\n  const DrawingToolbar = L.Control.extend({\n    options: {\n      position: \"topleft\",\n      drawingBtns: {},\n      map: undefined,\n      tool: null,\n      selectedTool: null,\n    } as Options,\n    /**\n     * runs whenever you create instance\n     *\n     * @param {Object} options\n     */\n    initialize: function (options: Options) {\n      if (options) {\n        L.Util.setOptions(this, options);\n      }\n    },\n    /**\n     * runs whenever control is being added\n     */\n    onAdd: function (map: L.Map) {\n      this.options.map = map;\n      return this.createUi();\n    },\n    /**\n     * creates toolbar with multiple buttons\n     */\n    createUi: function () {\n      const topContainer = L.DomUtil.create(\"div\", \"drawingtoolbar\");\n      const toolContainer: HTMLDivElement = L.DomUtil.create(\n        \"div\",\n        \"leaflet-bar leaflet-control\",\n        topContainer\n      ) as HTMLDivElement;\n      toolContainer.style.cursor = \"pointer\";\n      const cancelables: HTMLAnchorElement[] = [];\n\n      const toggleHideBtnVisibility = (e: Event) => {\n        cancelables.forEach((btn) =>\n          btn?.lastElementChild?.classList?.add(\"hide\")\n        );\n        let hideBtn = (e?.target as HTMLElement)?.lastChild as HTMLElement;\n        // * if there is no last child we must've clicked the 'outside' the icon\n        if (!hideBtn)\n          hideBtn = (e?.target as HTMLElement)?.nextSibling as HTMLElement;\n        // * careful not to hide the icon\n        if (hideBtn?.tagName === \"I\") return;\n        if (hideBtn) {\n          // console.log({ hideBtn });\n          hideBtn.classList.toggle(\"hide\");\n        }\n      };\n\n      const drawingTools = this.options.tool?.drawingTools || {};\n\n      const handleClick = (e: Event, tool: Tool) => {\n        const selectedEl = this.getSelectedLayer();\n        // * functions are called so user is not drawing over object that has transform handles\n        if (tool.getName() !== \"transform-drawing-tool\") {\n          if (selectedEl) TransformTool.disableTransform(selectedEl);\n        }\n        if (tool.getName() !== \"edit-drawing-tool\") {\n          if (selectedEl) EditTool.disableNodeEdit(selectedEl);\n        }\n        // * disable previous tool\n        this.options.selectedTool?.deactivate();\n        toggleHideBtnVisibility(e);\n\n        // * enable currently selected tool\n        tool.activate();\n        this.options.selectedTool = tool;\n      };\n\n      Object.keys(drawingTools).forEach((key) => {\n        const tool: Tool = drawingTools[key];\n        const canBeCanceled = tool.canBeCanceled();\n\n        const btn = this.createToolbarBtn(\n          tool.getName(),\n          toolContainer,\n          tool.getTitle(),\n          tool.getIconName(),\n          canBeCanceled\n        );\n\n        if (canBeCanceled) cancelables.push(btn as HTMLAnchorElement);\n\n        L.DomEvent.on(btn, \"click\", (e) => handleClick(e, tool), this);\n\n        (this.options.drawingBtns as DrawingBtns)[key] = btn as HTMLAnchorElement;\n      });\n\n      L.DomEvent.disableClickPropagation(topContainer);\n      return topContainer;\n    },\n\n    /**\n     * creates toolbar button\n     */\n    createToolbarBtn: function (\n      className: string,\n      btnContainer: HTMLDivElement,\n      title: string,\n      icon: string,\n      extra = false\n    ) {\n      const returnBtn = L.DomUtil.create(\n        \"a\",\n        `${className} d-side-button`,\n        btnContainer\n      );\n      returnBtn.title = title;\n      returnBtn.innerHTML = `<i class=\"${icon}\" aria-hidden=\"true\"></i>`;\n      if (extra) {\n        const extraBtn = L.DomUtil.create(\"a\", \"extra-btn hide\", returnBtn);\n        extraBtn.innerHTML = `Cancel`;\n      }\n      return returnBtn;\n    },\n\n    /**\n     *\n     * @returns currently selected geo. object\n     */\n    getSelectedLayer: function () {\n      return this.options.tool?.getState()?.selectedLayer;\n    },\n  });\n\n  (L.control.drawingToolbar as any) = function (options?: Options) {\n    if (!options) {\n      options = {} as Options;\n    }\n    return new DrawingToolbar(options);\n  };\n}\n","import { DrawnObject } from \"../model/types\";\nimport {\n  getGeoJSONFeatures,\n  getFirstGeoJSONFeature,\n  isFeaturePoly,\n  morphFeatureToPolygon,\n} from \"../util/polyHelpers\";\n\n/**\n * @brief - takes selected object and currently created object\n *        and executes passed operation\n *        - used for union and intersection\n */\nexport const operateOnSelectedAndCurrectLayer = (\n  layer: DrawnObject,\n  operation: (a: GeoJSON.Feature, b: GeoJSON.Feature) => GeoJSON.Feature,\n  selectedLayer: DrawnObject\n): { layer: DrawnObject; result: boolean } => {\n  const feature = getFirstGeoJSONFeature(layer);\n  const isFeatPoly = feature ? isFeaturePoly(feature) : false;\n  if (!isFeatPoly || !feature) return { layer, result: false };\n\n  let summedFeature = feature;\n\n  // * this can be multipolygon whenever user joins 2 unconnected polygons\n  const selectedFeatures = getGeoJSONFeatures(selectedLayer);\n  if (!selectedFeatures) return { layer, result: false };\n\n  // * selected feature may be multiple polygons so we sum them\n  selectedFeatures.forEach((selectedFeature: GeoJSON.Feature) => {\n    const isSelectedFeaturePoly = isFeaturePoly(selectedFeature);\n\n    if (isSelectedFeaturePoly) {\n      summedFeature = operation(selectedFeature, summedFeature);\n    }\n  });\n\n  layer = morphFeatureToPolygon(summedFeature, layer.options);\n\n  return { layer, result: true };\n};\n","import { DrawnObject, TurfPolygon } from \"./../model/types/index\";\nimport * as turf from \"@turf/turf\";\nimport { isLayerPoly } from \"../util/polyHelpers\";\nimport { operateOnSelectedAndCurrectLayer } from \"./shared\";\nimport IDrawingLayerToolState from \"../model/types/tool/IDrawingLayerToolState\";\n\n/**\n * @brief intersect selected object with the one being currently created\n *\n * @param {Layer} layer\n * @param {Number | undefined} eKeyIndex\n * @returns\n */\nexport const polyIntersect = (\n  layer: DrawnObject,\n  state: IDrawingLayerToolState\n): DrawnObject => {\n  const selectedLayer = state.selectedLayer;\n  if (!selectedLayer || !isLayerPoly(selectedLayer)) return layer;\n  const { layer: updatedLayer, result } = operateOnSelectedAndCurrectLayer(\n    layer,\n    (a: GeoJSON.Feature, b: GeoJSON.Feature) =>\n      turf.intersect(a as TurfPolygon, b as TurfPolygon) as GeoJSON.Feature,\n    selectedLayer\n  );\n\n  if (result) {\n    layer.remove();\n  }\n\n  return updatedLayer;\n};\n","import { TurfPolygon } from \"./../model/types/index\";\nimport union from \"@turf/union\";\nimport { DrawnObject } from \"../model/types\";\nimport { isLayerPoly } from \"../util/polyHelpers\";\nimport { operateOnSelectedAndCurrectLayer } from \"./shared\";\nimport IDrawingLayerToolState from \"../model/types/tool/IDrawingLayerToolState\";\n\n/**\n * @brief unifies selected object with the one being currently created\n */\nexport const polyJoin = (\n  layer: DrawnObject,\n  state: IDrawingLayerToolState\n): DrawnObject => {\n  const selectedLayer = state.selectedLayer;\n  if (!selectedLayer || !isLayerPoly(selectedLayer)) return layer;\n  const { layer: updatedLayer, result } = operateOnSelectedAndCurrectLayer(\n    layer,\n    (a: GeoJSON.Feature, b: GeoJSON.Feature) =>\n      union(a as TurfPolygon, b as TurfPolygon) as GeoJSON.Feature,\n    selectedLayer\n  );\n\n  if (result) {\n    layer.remove();\n    state.removeSelectedLayer();\n    state.setSelectedLayer(updatedLayer);\n  }\n\n  return updatedLayer;\n};\n","import L, { LatLng } from \"leaflet\";\nimport difference from \"@turf/difference\";\nimport {\n  getConversionDepth,\n  getFirstGeoJSONFeature,\n  isLayerPoly,\n} from \"../util/polyHelpers\";\nimport { FIRST, normalStyles } from \"../util/constants\";\nimport { DrawnObject, TurfPolygon } from \"../model/types\";\nimport IDrawingLayerToolState from \"../model/types/tool/IDrawingLayerToolState\";\n\nconst replaceLayer = (\n  state: IDrawingLayerToolState,\n  replacement: DrawnObject,\n  replacedLayer: DrawnObject,\n  replacementCoords?: LatLng[]\n) => {\n  replacement?.dragging?.disable();\n  replacement.layerType = \"polygon\";\n  if (replacementCoords) replacement._latlngs = replacementCoords;\n  replacement.identifier = replacedLayer.identifier;\n  replacement.setStyle({ ...replacement.options, ...normalStyles } as any);\n  const content = replacedLayer.popupContent;\n  if (content) {\n    replacement.bindPopup(content, {\n      closeOnClick: false,\n      autoClose: false,\n    });\n    replacement.popupContent = content;\n  }\n  state.addLayer(replacement);\n  state.removeLayer(replacedLayer);\n};\n\nconst diffLayers = (\n  geoObject: DrawnObject,\n  layerFeature: GeoJSON.Feature,\n  state: IDrawingLayerToolState,\n  canDiff: boolean\n) => {\n  if (!geoObject) return;\n  const feature = getFirstGeoJSONFeature(geoObject);\n\n  if (canDiff) {\n    const diffFeature = difference(\n      feature as TurfPolygon,\n      layerFeature as TurfPolygon\n    );\n\n    if (diffFeature) {\n      let latlngs;\n      const coords = diffFeature.geometry.coordinates;\n      const isJustPoly = diffFeature.geometry.type === \"Polygon\";\n      // * when substracting you can basically slice polygon into more parts,\\\n      // * then we have to increase depth by one because we have an array within an array\n      const depth = getConversionDepth(diffFeature);\n      try {\n        // * - this conditional asks if created polygon is polygon with hole punched in it\n        // * - for the rest of cases i.e. when polygon is split into multiple parts or not, we use loop\\\n        // * otherwise we create polygon, where hole should be\n        if (isJustPoly && coords.length !== 1) {\n          latlngs = L.GeoJSON.coordsToLatLngs(coords, 1);\n          const result = new (L as any).polygon(latlngs, {\n            ...geoObject.options,\n          });\n          replaceLayer(state, result, geoObject);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          coords.forEach((coord) => {\n            latlngs = L.GeoJSON.coordsToLatLngs([coord], depth);\n            const result = new (L as any).polygon(latlngs, {\n              ...geoObject.options,\n            });\n            const newLatLngs =\n              depth === 1 ? result._latlngs : result._latlngs[FIRST];\n            replaceLayer(state, result, geoObject, newLatLngs);\n          });\n        }\n      } catch (error) {\n        console.error({ coords, latlngs, error, depth });\n      }\n    } else {\n      state.removeLayer(geoObject);\n    }\n  }\n};\n\n/**\n * @brief takes currently created polygon and loops through each polygon\n *        and executes operation 'difference'\n *\n * @param {Layer} layer\n * @param {Boolean} intersect\n */\nexport const polyDiff = (\n  layer: DrawnObject,\n  state: IDrawingLayerToolState,\n  intersect = false\n): void => {\n  const layerFeature = getFirstGeoJSONFeature(layer);\n  const isCurrentLayerPoly = isLayerPoly(layer);\n  const createdIsNotEraser = layer.layerType !== \"erased\";\n\n  if (isCurrentLayerPoly && layerFeature) {\n    const selectedLayer = state.selectedLayer;\n    // * - if intersect is active execute difference with only selected polygon\n    // * - part of condition with 'selectedLayer' is here b/c, when you have intersect on\\\n    // * without selecting object stroke/object user creates stayes on top of everything\n    if (\n      intersect &&\n      createdIsNotEraser &&\n      selectedLayer &&\n      isLayerPoly(selectedLayer)\n    ) {\n      diffLayers(selectedLayer, layerFeature, state, true);\n    } else {\n      const fgLayers = state.featureGroup._layers;\n      // * else we execute difference with each geo. object\n      Object.values(fgLayers)\n        .filter((geoObject) => isLayerPoly(geoObject))\n        .forEach((geoObject) => {\n          // * we want to avoid damaging selected layer\n          const objectIsNotSelected =\n            geoObject?._leaflet_id !== selectedLayer?._leaflet_id;\n          const canDiff = objectIsNotSelected;\n          diffLayers(geoObject, layerFeature, state, canDiff);\n        });\n    }\n  }\n};\n","import L, { FeatureGroup, LeafletMouseEvent, Map, TileEvent } from \"leaflet\";\n\nimport DrawingLayerToolState, { EMPTY_GEOJSON } from \"./DrawingLayerToolState\";\nimport DrawingLayerToolDefaults from \"./DrawingLayerToolDefaults\";\nimport DrawingLayerToolMapForm from \"./sidebar/DrawingLayerToolMapForm\";\nimport useDrawingToolbar from \"./components/useDrawingToolbar\";\nimport { TDrawingToolbar } from \"./model/types/sidebar/DrawingToolbar\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"./style/drawingLayer.scss\";\nimport \"leaflet-snap\";\nimport \"leaflet-geometryutil\";\nimport \"leaflet-draw\";\n\n// import * as d33 from \"d3-3-5-5\";\nimport { SPACE_BAR, highlightStyles, normalStyles } from \"./util/constants\";\n\nimport { polyDiff, polyIntersect, polyJoin } from \"./rules\";\nimport {\n  DeselectTool,\n  EditTool,\n  EraseTool,\n  FreehandSliceTool,\n  GeometricSliceTool,\n  JoinTool,\n  LineTool,\n  MarkerTool,\n  PaintTool,\n  PolygonTool,\n  RemoveTool,\n  SearchTool,\n  TopologyTool,\n  TransformTool,\n} from \"./tools\";\nimport {\n  CreatedEvent,\n  LooseObject,\n  DrawnObject,\n  LayerType,\n} from \"./model/types\";\nimport IDrawingLayerToolProps from \"./model/types/tool/IDrawingLayerToolProps\";\nimport IDrawingLayerTool, {\n  DrawingForm,\n} from \"./model/types/tool/IDrawingLayerTool\";\nimport { AbstractLayerTool, IMapFormControl, IMapToolInitProps } from \"geovisto\";\nimport IDrawingLayerToolDefaults from \"./model/types/tool/IDrawingLayerToolDefaults\";\nimport IDrawingLayerToolState from \"./model/types/tool/IDrawingLayerToolState\";\nimport { IDrawingLayerToolConfig } from \"./model/types/tool/IDrawingLayerToolConfig\";\nimport { GeoJSONTool } from \"./tools/GeoJSONTool\";\n\n// ! pather throws errors without this line\n// window.d3 = d33;\n\n// * as advised in https://github.com/makinacorpus/Leaflet.Snap/issues/52\nL.Draw.Feature.include(L.Evented.prototype);\nL.Draw.Feature.include((L.Draw.Feature as any).SnapMixin);\nL.Draw.Feature.addInitHook((L.Draw.Feature as any).SnapMixin._snap_initialize);\n\ndeclare global {\n  interface Window {\n    customTolerance: number;\n    d3: any; //* we do not care about this type, b/c we're not even using it, it's just used in pather package\n  }\n}\n\n/**\n * This class represents Drawing layer tool.\n *\n * @author Andrej Tlcina\n */\nclass DrawingLayerTool\n  extends AbstractLayerTool\n  implements IDrawingLayerTool, IMapFormControl {\n  public drawingTools: LooseObject;\n  private mapForm!: DrawingForm;\n  private controlDrawingToolbar!: TDrawingToolbar;\n\n  /**\n   * It creates a new tool with respect to the props.\n   */\n  public constructor(props?: IDrawingLayerToolProps) {\n    super(props);\n    this.drawingTools = {};\n  }\n\n  /**\n   * Overrides the super method.\n   *\n   * @param initProps\n   */\n  public initialize(\n    initProps: IMapToolInitProps<IDrawingLayerToolConfig>\n  ): this {\n    // FIXME: use geo-data manager to acquire geojson\n    this.getState().deserializeGeoJSON(EMPTY_GEOJSON);\n    return super.initialize(initProps);\n  }\n\n  /**\n   * It creates a copy of the uninitialized tool.\n   */\n  public copy(): IDrawingLayerTool {\n    return new DrawingLayerTool(this.getProps());\n  }\n\n  /**\n   * It returns the props given by the programmer.\n   */\n  public getProps(): IDrawingLayerToolProps {\n    return <IDrawingLayerToolProps>super.getProps();\n  }\n\n  /**\n   * It returns default values of the state properties.\n   */\n  public getDefaults(): IDrawingLayerToolDefaults {\n    return <IDrawingLayerToolDefaults>super.getDefaults();\n  }\n  /**\n   * It returns the layer tool state.\n   */\n  public getState(): IDrawingLayerToolState {\n    return <IDrawingLayerToolState>super.getState();\n  }\n\n  /**\n   * It creates new defaults of the tool.\n   */\n  protected createDefaults(): IDrawingLayerToolDefaults {\n    return new DrawingLayerToolDefaults();\n  }\n\n  /**\n   * It returns default tool state.\n   */\n  protected createState(): IDrawingLayerToolState {\n    return new DrawingLayerToolState(this);\n  }\n\n  /**\n   * It returns a tab control.\n   */\n  public getMapForm(): DrawingForm {\n    if (this.mapForm == undefined) {\n      this.mapForm = this.createMapForm();\n    }\n    return this.mapForm;\n  }\n\n  public redrawMapForm(layerType: LayerType | \"\"): void {\n    if (this.mapForm == undefined) return;\n    this.mapForm.redrawTabContent(layerType);\n  }\n\n  /**\n   * It creates new tab control.\n   */\n  protected createMapForm(): DrawingForm {\n    return new DrawingLayerToolMapForm({ tool: this });\n  }\n\n  /**\n   * It changes layer state to enabled/disabled.\n   *\n   * @param enabled\n   */\n  public setEnabled(enabled: boolean): void {\n    if (enabled != this.isEnabled()) {\n      // update state\n      this.getState().setEnabled(enabled);\n\n      const map = this.getMap()?.getState()?.getLeafletMap();\n      // show ot hide the layer\n      if (enabled) {\n        this.showLayerItems();\n        map?.addControl(this.controlDrawingToolbar);\n      } else {\n        map?.removeControl(this.controlDrawingToolbar);\n\n        this.hideLayerItems();\n      }\n    }\n  }\n\n  public initializeDrawingTools(): void {\n    const tools: LooseObject = {};\n\n    tools[GeoJSONTool.NAME()] = new GeoJSONTool({ drawingTool: this });\n    tools[LineTool.NAME()] = new LineTool({ drawingTool: this });\n    tools[MarkerTool.NAME()] = new MarkerTool({ drawingTool: this });\n    tools[PolygonTool.NAME()] = new PolygonTool({ drawingTool: this });\n\n    tools[SearchTool.NAME()] = new SearchTool({ drawingTool: this });\n    tools[TopologyTool.NAME()] = new TopologyTool({ drawingTool: this });\n\n    tools[GeometricSliceTool.NAME()] = new GeometricSliceTool({\n      drawingTool: this,\n    });\n    \n    //Problem with tool - require old D3 version\n    // tools[FreehandSliceTool.NAME()] = new FreehandSliceTool({\n    //   drawingTool: this,\n    // });\n\n    tools[PaintTool.NAME()] = new PaintTool({ drawingTool: this });\n    tools[EraseTool.NAME()] = new EraseTool({ drawingTool: this });\n\n    tools[JoinTool.NAME()] = new JoinTool({ drawingTool: this });\n\n    tools[DeselectTool.NAME()] = new DeselectTool({ drawingTool: this });\n    tools[TransformTool.NAME()] = new TransformTool({ drawingTool: this });\n    tools[EditTool.NAME()] = new EditTool({ drawingTool: this });\n    tools[RemoveTool.NAME()] = new RemoveTool({ drawingTool: this });\n\n    this.drawingTools = tools;\n  }\n\n  /**\n   * It creates layer items.\n   */\n  protected createLayerItems(): FeatureGroup[] {\n    //console.log(\"%c ...creating\", \"color: #ff5108\");\n    const map = this.getMap()?.getState()?.getLeafletMap();\n\n    this.getMapForm().getState().initializeControls();\n    this.initializeDrawingTools();\n    useDrawingToolbar();\n    this.setGlobalSimplificationTolerance(map);\n    this.controlDrawingToolbar = L.control.drawingToolbar({\n      tool: this,\n      selectedTool: null,\n    });\n    if(this.isEnabled()) {\n      map?.addControl(this.controlDrawingToolbar);\n    }\n\n    // * eventlistener for when object is created\n    map?.on(\"draw:created\" as any, this.createdListener as any);\n    map?.on(\"zoomend\", () => this.setGlobalSimplificationTolerance(map));\n    map?.on(\"click\", () => {\n      const sidebar = this.getMapForm();\n      if (sidebar.getState()?.enabledTool?.isToolActive()) return;\n      if (\n        (document.querySelector(\".leaflet-container\") as HTMLDivElement).style\n          .cursor === \"wait\"\n      )\n        return;\n      const selected = this.getState().selectedLayer;\n      if (selected) {\n        DeselectTool.deselect(selected, this);\n        TransformTool.initTransform(selected, true);\n      }\n      this.getState().clearExtraSelected();\n    });\n\n    const sidebarState = this.getMapForm().getState();\n    const handleSpacePress = (e: KeyboardEvent, exec: (el: any) => void) => {\n      if (e.keyCode === SPACE_BAR) {\n        const enabledTool = sidebarState.enabledTool;\n        if (enabledTool?.isToolActive()) {\n          exec(enabledTool);\n        }\n      }\n    };\n    const handleSpaceDown = (e: KeyboardEvent) =>\n      handleSpacePress(e, (enabledTool) => enabledTool?.disable());\n    const handleSpaceUp = (e: KeyboardEvent) =>\n      handleSpacePress(e, (enabledTool) => enabledTool?.enable());\n\n    document.addEventListener(\"keydown\", handleSpaceDown);\n    document.addEventListener(\"keyup\", handleSpaceUp);\n\n    const { featureGroup } = this.getState();\n    return [featureGroup];\n  }\n\n  /**\n   * @brief called whenever new geo. object is created\n   */\n  private createdListener = (e: CreatedEvent): void => {\n    let layer: DrawnObject = e.layer;\n    if (!layer) return;\n\n    layer.layerType = e.layerType;\n    const sidebarState = this.getMapForm().getState();\n    const state = this.getState();\n\n    const intersectActivated = sidebarState.getIntersectActivated();\n\n    if (layer?.dragging) layer.dragging.disable();\n\n    if (\n      e.layerType === PolygonTool.result ||\n      e.layerType === PaintTool.result\n    ) {\n      // * INTERSECT\n      if (intersectActivated) layer = polyIntersect(layer, state);\n      // * JOIN\n      else layer = polyJoin(layer, state);\n    }\n\n    if (\n      e.layerType === PolygonTool.result ||\n      e.layerType === PaintTool.result ||\n      e.layerType === EraseTool.result\n    ) {\n      // * DIFFERENCE\n      polyDiff(layer, state, intersectActivated);\n    }\n\n    // * PUSH LAYER IF NOT SLICING/ERASING\n    if (\n      e.layerType !== GeometricSliceTool.result &&\n      e.layerType !== EraseTool.result\n    ) {\n      state.addLayer(layer);\n      sidebarState.pushGuideLayer(layer);\n    }\n  };\n\n  /**\n   * @brief aplies event listeners for each geo. object\n   *\n   * @param {Layer} layer\n   */\n  public applyEventListeners(layer: DrawnObject): void {\n    layer\n      .on(\"click\", L.DomEvent.stopPropagation)\n      .on(\"click\", this.initChangeStyle, this);\n    layer.on(\"mouseover\" as any, this.hightlightOnHover, this);\n    layer.on(\"mouseout\" as any, this.normalizeOnHover, this);\n    if (layer.layerType === \"marker\") {\n      TopologyTool.applyTopologyMarkerListeners(layer, this.getState());\n    }\n  }\n\n  /**\n   * @brief sets global tolerance for brush stroke\n   */\n  public setGlobalSimplificationTolerance(map: Map | undefined): void {\n    if (!map) return;\n    const metersPerPixel =\n      (40075016.686 *\n        Math.abs(Math.cos((map.getCenter().lat * Math.PI) / 180))) /\n      Math.pow(2, map.getZoom() + 8);\n    const zoom = map.getZoom();\n\n    // ! this is tried out, so no real calculation\n    window.customTolerance = zoom >= 4 ? 0.0001 * metersPerPixel : 1.5;\n  }\n\n  /**\n   * @brief highlights element\n   */\n  public highlightElement(el: DrawnObject): void {\n    if (el?._icon) {\n      L.DomUtil.addClass(el._icon, \"highlight-marker\");\n    } else {\n      if (el?.setStyle) el.setStyle(highlightStyles);\n    }\n  }\n\n  /**\n   * @brief highlights element on mouse hover\n   */\n  private hightlightOnHover(e: TileEvent): void {\n    if (this.getState().getSelecting()) return;\n    this.highlightElement(e.target as DrawnObject);\n  }\n\n  /**\n   * @brief sets normal styles for element\n   */\n  public normalizeElement(el: DrawnObject): void {\n    if (el?._icon) {\n      L.DomUtil.removeClass(el._icon, \"highlight-marker\");\n    } else {\n      if (el?.setStyle) el.setStyle(normalStyles);\n    }\n  }\n\n  /**\n   * @brief sets normal styles for element on mouse hover\n   *\n   * @param {Object} el\n   */\n  private normalizeOnHover(e: TileEvent): void {\n    if (this.getState().getSelecting()) return;\n    if (\n      this.getState()?.selectedLayer?._leaflet_id ===\n      (e.target as DrawnObject)._leaflet_id\n    )\n      return;\n    this.normalizeElement(e.target as DrawnObject);\n  }\n\n  /**\n   * @brief called on object click to change its style accordingly\n   */\n  private initChangeStyle = (e: LeafletMouseEvent): void => {\n    const drawObject = e.target as DrawnObject;\n    const state = this.getState();\n\n    const selecting = state.getSelecting();\n    if (selecting) {\n      const joinTool = this.drawingTools[JoinTool.NAME()];\n      if (joinTool) {\n        joinTool.joinChosen(drawObject);\n        return;\n      }\n    }\n\n    if (e?.originalEvent?.ctrlKey && state.selectedLayer) {\n      state.addExtraSelected(drawObject);\n      return;\n    }\n\n    const fgLayers = state.featureGroup._layers;\n    Object.values(fgLayers).forEach((_) => {\n      this.normalizeElement(_);\n      _?.dragging?.disable();\n      if (_?.transform?._enabled) {\n        _.transform.disable();\n      }\n    });\n    state.setSelectedLayer(drawObject);\n    TransformTool.initTransform(drawObject);\n    this.redrawMapForm(drawObject?.layerType);\n\n    this.mapForm.getState().callIdentifierChange(true);\n\n    (document.querySelector(\n      \".leaflet-container\"\n    ) as HTMLDivElement).style.cursor = \"\";\n    // * at this point user clicked without holdin 'CTRL' key\n    // state.clearExtraSelected();\n  };\n}\n\nexport default DrawingLayerTool;\n","import DrawingLayerTool from \"./DrawingLayerTool\";\nimport DrawingLayerToolDefaults from \"./DrawingLayerToolDefaults\";\nimport IDrawingLayerTool from \"./model/types/tool/IDrawingLayerTool\";\nimport IDrawingLayerToolProps from \"./model/types/tool/IDrawingLayerToolProps\";\n\nexport const GeovistoDrawingLayerTool: {\n  getType: () => string;\n  createTool: (props?: IDrawingLayerToolProps) => IDrawingLayerTool;\n} = {\n  getType: () => DrawingLayerToolDefaults.TYPE,\n  createTool: (props) => new DrawingLayerTool(props),\n};\n"],"names":["L","ERASER_COLOR"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAEG;AAII,MAAM,SAAS,GAAG,CAAC,CAAC,CAAC;AAErB,MAAM,KAAK,GAAG,CAAC,CAAC;AAEhB,MAAM,SAAS,GAAG,EAAE,CAAC;AAErB,MAAM,eAAe,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAC3D,MAAM,YAAY,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAE/D;;AAEG;AACI,MAAM,WAAW,GAAG;AACzB,IAAA,SAAS,EAAE,SAAS;IACpB,UAAU,EAAE,IAAIA,UAAC,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;IAC/B,QAAQ,EAAE,IAAIA,UAAC,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;CAC9B,CAAC;AAEK,MAAM,SAAS,GAAa;IACjC,yEAAyE;IACzE,4GAA4G;CAC7G,CAAC;AACK,MAAM,MAAM,GAAa;IAC9B,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;CACV,CAAC;AAUK,MAAM,OAAO,GAAe;AACjC,IAAA,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE;IAC3B,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC7C,IAAA,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE;CAC5B,CAAC;AACK,MAAM,YAAY,GAAe;AACtC,IAAA,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;IAC5B,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC/C,IAAA,EAAE,KAAK,EAAE,wBAAwB,EAAE,KAAK,EAAE,CAAC,EAAE;AAC7C,IAAA,EAAE,KAAK,EAAE,wBAAwB,EAAE,KAAK,EAAE,CAAC,EAAE;AAC7C,IAAA,EAAE,KAAK,EAAE,wBAAwB,EAAE,KAAK,EAAE,CAAC,EAAE;AAC7C,IAAA,EAAE,KAAK,EAAE,wBAAwB,EAAE,KAAK,EAAE,CAAC,EAAE;AAC7C,IAAA,EAAE,KAAK,EAAE,wBAAwB,EAAE,KAAK,EAAE,CAAC,EAAE;AAC7C,IAAA,EAAE,KAAK,EAAE,yBAAyB,EAAE,KAAK,EAAE,EAAE,EAAE;CAChD;;AClDD;;AAEG;AAEH;;AAEG;AACI,MAAM,yBAAyB,GAAG,CACvC,OAAwB,KACN;;IAClB,QAAQ,CAAA,EAAA,GAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI;AAC7B,QAAA,KAAK,SAAS;AACZ,YAAA,OAAO,SAAS,CAAC;AACnB,QAAA,KAAK,YAAY;AACf,YAAA,OAAO,UAAU,CAAC;AACpB,QAAA,KAAK,OAAO;AACV,YAAA,OAAO,QAAQ,CAAC;AAClB,QAAA;AACE,YAAA,OAAO,EAAE,CAAC;AACb,KAAA;AACH,CAAC,CAAC;AAEF;;AAEG;AACI,MAAM,0BAA0B,GAAG,CACxC,UAAuB,KACP;IAChB,MAAM,OAAO,GAAgB,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;AAClE,IAAA,IAAI,CAAC,UAAU;AAAE,QAAA,OAAO,OAAO,CAAC;AAChC,IAAA,OAAO,CAAC,MAAM,GAAG,UAAU,CAAC,cAAc,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AAChE,IAAA,OAAO,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;IAChD,OAAO,CAAC,WAAW,GAAG,UAAU,CAAC,cAAc,CAAC,IAAI,YAAY,CAAC,WAAW,CAAC;IAC7E,OAAO,CAAC,OAAO,GAAG,UAAU,CAAC,gBAAgB,CAAC,IAAI,YAAY,CAAC,OAAO,CAAC;AAEvE,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF;;AAEG;AACI,MAAM,0BAA0B,GAAG,CACxC,OAAqB,KACN;IACf,MAAM,UAAU,GAAgB,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;AACrE,IAAA,UAAU,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AAChE,IAAA,UAAU,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;;AAEhD,IAAA,UAAU,CAAC,cAAc,CAAC,GAAG,YAAY,CAAC,WAAW,CAAC;AACtD,IAAA,UAAU,CAAC,gBAAgB,CAAC,GAAG,YAAY,CAAC,OAAO,CAAC;AAEpD,IAAA,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF;;;AAGG;AACI,MAAM,kBAAkB,GAAG,CAChC,KAAkB,KACe;AACjC,IAAA,IAAI,CAAC,KAAK;AAAE,QAAA,OAAO,IAAI,CAAC;AACxB,IAAA,MAAM,YAAY,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;AACvC,IAAA,MAAM,OAAO,GACX,YAAY,CAAC,IAAI,KAAK,mBAAmB;UACrC,YAAY,CAAC,QAAQ;AACvB,UAAE,CAAC,YAAY,CAAC,CAAC;AACrB,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF;;;;;;AAMG;AACI,MAAM,sBAAsB,GAAG,CACpC,KAAkB,KACQ;AAC1B,IAAA,IAAI,CAAC,KAAK;AAAE,QAAA,OAAO,IAAI,CAAC;AACxB,IAAA,MAAM,WAAW,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;AAC9C,IAAA,MAAM,OAAO,GAAG,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACpD,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF;;AAEG;AACI,MAAM,aAAa,GAAG,CAC3B,OAA2D,KAChD;;AACX,IAAA,IAAI,CAAC,OAAO;AAAE,QAAA,OAAO,KAAK,CAAC;IAC3B,IAAI,CAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,IAAI,MAAK,mBAAmB,EAAE;QACzC,MAAM,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC9B,QAAA,QACE,CAAA,CAAA,EAAA,GAAA,CAAC,KAAD,IAAA,IAAA,CAAC,KAAD,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAC,CAAE,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAK,SAAS,IAAI,CAAA,CAAA,EAAA,GAAA,CAAC,KAAD,IAAA,IAAA,CAAC,KAAD,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAC,CAAE,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAK,cAAc,EACvE;AACH,KAAA;AACD,IAAA,QACE,CAAA,CAAA,EAAA,GAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAK,SAAS;AACrC,QAAA,CAAA,CAAA,EAAA,GAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAK,cAAc,EAC1C;AACJ,CAAC,CAAC;AAEF;;;AAGG;AACI,MAAM,eAAe,GAAG,CAC7B,OAAwB,EACxB,MAAe,KACI;AACnB,IAAA,MAAM,SAAS,GAAG,MAAM,IAAI,MAAM,CAAC,eAAe,CAAC;AAEnD,IAAA,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,CAAoB,CAAC;AACxE,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF;;AAEG;AACI,MAAM,WAAW,GAAG,CAAC,KAAkB,KAAa;AACzD,IAAA,MAAM,OAAO,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;AAC9C,IAAA,OAAO,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;AAClD,CAAC,CAAC;AAEK,MAAM,kBAAkB,GAAG,CAAC,OAA+B,KAAW;;IAC3E,IAAI,KAAK,GAAU,CAAC,CAAC;AACrB,IAAA,IAAI,CAAA,CAAA,EAAA,GAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAK,cAAc,EAAE;QAC9C,KAAK,GAAG,CAAC,CAAC;AACX,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;;;;AAIK;AACE,MAAM,aAAa,GAAG,CAAC,OAAmB,KAA6B;AAC5E,IAAA,IAAI,CAAC,OAAO;AAAE,QAAA,OAAO,IAAI,CAAC;AAE1B,IAAA,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC;AAC5C,IAAA,MAAM,KAAK,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;AAE1C,IAAA,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;QACrC,OAAOA,UAAC,CAAC,OAAO,CAAC,cAAc,CAC7B,MAAqD,CACtD,CAAC;AACH,KAAA;AAAM,SAAA,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY,EAAE;AACjD,QAAA,OAAOA,UAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/C,KAAA;AAAM,SAAA;QACL,OAAOA,UAAC,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACjD,KAAA;AACH,CAAC,CAAC;AAEF;;AAEG;AACI,MAAM,qBAAqB,GAAG,CACnC,OAAwB,EACxB,OAAO,GAAG,EAAE,EACZ,QAAQ,GAAG,KAAK,KACD;AACf,IAAA,MAAM,KAAK,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;IAC1C,MAAM,UAAU,GAAG,QAAQ;AACzB,UAAE,eAAe,CAAC,OAAqB,CAAC;UACtC,OAAO,CAAC;AACZ,IAAA,MAAM,MAAM,GAAI,UAAU,CAAC,QAAqB,CAAC,WAAW,CAAC;AAC7D,IAAA,MAAM,OAAO,GAAGA,UAAC,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACzD,IAAA,MAAM,MAAM,GAAG,IAAKA,UAAS,CAAC,OAAO,CAAC,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACxC,OAAO,CACV,EAAA,EAAA,SAAS,EAAE,IAAI,EACf,SAAS,EAAE,IAAI,IACf,CAAC;AACH,IAAA,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,IAAI,MAAM,CAAC,QAAQ;AAAE,QAAA,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;AAC/C,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;;AC1MD;;AAEG;AAEH;;AAEG;AACI,MAAM,OAAO,GAAG,CAAI,GAAM,KAAa;IAC5C,QACE,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,EACxE;AACJ,CAAC,CAAC;AAEK,MAAM,gBAAgB,GAAG,CAAC,CAAS,EAAE,CAAS,KAAgB;IACnE,IAAI,CAAC,GAAG,CAAC;AAAE,QAAA,OAAO,CAAC,CAAC;IACpB,IAAI,CAAC,GAAG,CAAC;QAAE,OAAO,CAAC,CAAC,CAAC;AACrB,IAAA,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;AAYK,MAAM,eAAe,GAAG,CAAC,CAAS,KAAY;AACnD,IAAA,IAAI,CAAC,CAAC;AAAE,QAAA,OAAO,GAAG,CAAC;IACnB,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACnC,IAAA,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AACtB,QAAA,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACvB,QAAA,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AACvD,QAAA,MAAM,QAAQ,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE9C,IAAI,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,IAAI,CAAC;aACzB,IAAI,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,GAAG,CAAC;;AAC7B,YAAA,OAAO,MAAM,CAAC,CAAA,EAAA,EAAK,QAAQ,CAAA,CAAA,CAAG,CAAC,CAAC;AACtC,KAAA;AAED,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;;ACnCD;;;;;;AAMG;AACH,MAAM,YAAY,CAAA;AAOhB,IAAA,WAAA,CAAmB,KAAgB,EAAA;;;AAEjC,QAAA,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;AAC9C,QAAA,IAAI,CAAC,UAAU,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,aAAa,EAAE,CAAC;;AAG1E,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;;AAEvB,QAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KACxB;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,uBAAuB,CAAC;KAChC;AAED;;AAEG;IACI,OAAO,GAAA;AACZ,QAAA,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;KAC5B;AAED;;AAEG;IACI,WAAW,GAAA;AAChB,QAAA,OAAO,cAAc,CAAC;KACvB;AAED;;AAEG;IACI,QAAQ,GAAA;AACb,QAAA,OAAO,uBAAuB,CAAC;KAChC;AAED;;AAEG;IACI,MAAM,GAAA;AACX,QAAA,OAAO,EAAE,CAAC;KACX;IAEM,aAAa,GAAA;AAClB,QAAA,OAAO,KAAK,CAAC;KACd;AAEM,IAAA,cAAc,CAAC,IAAqB,EAAA;QACzC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;KAC5C;IAEM,uBAAuB,GAAA;QAC5B,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;KAC9C;AAED;;AAEG;IACI,QAAQ,GAAA;QACb,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,EAAE,CAAC;AACd,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;KACpC;IAEM,UAAU,GAAA;QACf,IAAI,CAAC,OAAO,EAAE,CAAC;AACf,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,QAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;AAED;;AAEG;IACI,MAAM,GAAA;QACX,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;KACpC;AAED;;AAEG;IACI,OAAO,GAAA;AACZ,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACnC,QAAA,IAAI,UAAU,EAAE;YACd,UAAU,CAAC,OAAO,EAAE,CAAC;AACtB,SAAA;KACF;AAED;;;AAGG;IACI,gBAAgB,GAAA;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC;KAClD;IAEM,YAAY,GAAA;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;AACF;;AClHD,MAAM,QAAS,SAAQ,YAAY,CAAA;AACjC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAmBR,IAAM,CAAA,MAAA,GAAG,MAAS;AACvB,YAAA,OAAO,EAAE,CAAC;AACZ,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;AACzB,YAAA,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAE9C,YAAA,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;AACvC,SAAC,CAAC;KA1BD;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,mBAAmB,CAAC;KAC5B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;KACxB;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,cAAc,CAAC;KACvB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,iBAAiB,CAAC;KAC1B;AAYM,IAAA,OAAO,YAAY,CACxB,aAAiC,EACjC,OAAO,GAAG,KAAK,EAAA;AAEf,QAAA,IAAI,aAAa,KAAb,IAAA,IAAA,aAAa,uBAAb,aAAa,CAAE,OAAO,EAAE;AAC1B,YAAA,IAAI,aAAa,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,EAAE;AAC7C,gBAAA,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;AACjC,aAAA;AAAM,iBAAA;AACL,gBAAA,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;AAChC,aAAA;AACF,SAAA;KACF;;AAEa,QAAA,CAAA,eAAe,GAAG,CAAC,UAA8B,KAAU;AACvE,IAAA,QAAQ,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAC1C,CAAC;;AC5CH,MAAM,YAAa,SAAQ,YAAY,CAAA;AACrC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAmBR,IAAM,CAAA,MAAA,GAAG,MAAS;AACvB,YAAA,OAAO,EAAE,CAAC;AACZ,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;AACzB,YAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAEzC,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;AACpD,SAAC,CAAC;KA1BD;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,uBAAuB,CAAC;KAChC;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;KAC5B;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,mBAAmB,CAAC;KAC5B;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,eAAe,CAAC;KACxB;AAYM,IAAA,OAAO,QAAQ,CACpB,QAA4B,EAC5B,IAAuB,EAAA;;QAEvB,IAAI,CAAA,EAAA,GAAA,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,EAAE;AAC/B,YAAA,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;AAC5B,SAAA;AACD,QAAA,IAAI,QAAQ,EAAE;YACZ,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACjC,YAAA,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACtC,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,QAAQ,EAAA,CAAG,kBAAkB,EAAE,CAAC;YACtC,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,aAAa,CAAC,EAAE,CAAC,CAAC;YACvB,QAAQ,CAAC,aAAa,CACrB,oBAAoB,CACL,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;AACrC,SAAA;KACF;AACF;;ACvCD,MAAM,aAAa,GAAG,SAAS,CAAC;AAChC,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,MAAMC,cAAY,GAAG,WAAW,CAAC;AAEjC,MAAM,SAAU,SAAQ,YAAY,CAAA;AAclC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAkCR,IAAM,CAAA,MAAA,GAAG,MAAgB;AAC9B,YAAA,OAAO,SAAS,CAAC;AACnB,SAAC,CAAC;QAEK,IAAa,CAAA,aAAA,GAAG,MAAc;AACnC,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;AACzB,YAAA,IAAI,IAAI,CAAC,OAAO,IAAI,MAAM,EAAE;gBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;AAChB,aAAA;AAAM,iBAAA;gBACL,IAAI,CAAC,WAAW,EAAE,CAAC;AACpB,aAAA;AACH,SAAC,CAAC;AAEF;;AAEG;QACK,IAAW,CAAA,WAAA,GAAG,MAAW;YAC/B,IAAI,CAAC,UAAU,EAAE,CAAC;AACpB,SAAC,CAAC;AAEF;;AAEG;QACI,IAAY,CAAA,YAAA,GAAG,MAAc;YAClC,OAAO,IAAI,CAAC,UAAU,CAAC;AACzB,SAAC,CAAC;AAEF;;AAEG;QACI,IAAY,CAAA,YAAA,GAAG,MAAa;YACjC,OAAO,IAAI,CAAC,aAAa,CAAC;AAC5B,SAAC,CAAC;AAEF;;AAEG;QACI,IAAuB,CAAA,uBAAA,GAAG,MAG7B;YACF,OAAO;gBACL,YAAY,EAAE,IAAI,CAAC,gBAAgB;gBACnC,YAAY,EAAE,IAAI,CAAC,gBAAgB;aACpC,CAAC;AACJ,SAAC,CAAC;AAEF;;;;AAIG;AACI,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,GAAW,KAAU;;AACzC,YAAA,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,CAAC,gBAAgB,IAAI,GAAG,IAAI,IAAI,CAAC,gBAAgB,EAAE;AACvE,gBAAA,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,CAAC,GAAG,CAAC,CAAC;AAC9B,aAAA;AACH,SAAC,CAAC;AAEF;;AAEG;QACI,IAAI,CAAA,IAAA,GAAG,MAAW;AACvB,YAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,IAAI,CAAC,OAAO,EAAE;AAChB,gBAAA,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;AACvB,aAAA;YACD,IAAI,CAAC,oBAAoB,EAAE,CAAC;AAC9B,SAAC,CAAC;AAEF;;AAEG;QACK,IAAU,CAAA,UAAA,GAAG,MAAW;YAC9B,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,YAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,IAAI,CAAC,UAAU;gBACjB,IAAI,CAAC,OAAO,GAAGD,UAAC,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE;AAC1C,oBAAA,KAAK,EAAE,aAAa;iBACrB,CAAC;AACC,qBAAA,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC;AAC7B,qBAAA,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC9B,SAAC,CAAC;AAEF;;AAEG;QACK,IAAY,CAAA,YAAA,GAAG,MAAW;AAChC,YAAA,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AAC9B,YAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC1B,SAAC,CAAC;AAEF;;AAEG;QACK,IAAe,CAAA,eAAA,GAAG,MAAa;YACrC,IAAI,CAAC,IAAI,CAAC,UAAU;AAAE,gBAAA,OAAO,CAAC,CAAC;AAE/B,YAAA,MAAM,cAAc,GAClB,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;AACtE,gBAAA,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;AAE7C,YAAA,OAAO,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC;AAC7C,SAAC,CAAC;AAEF;;AAEG;QACK,IAAU,CAAA,UAAA,GAAG,MAAW;YAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI,aAAa,CAAC;AACrE,YAAA,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAC1E,MAAM,UAAU,GAAG,MAAM,CACvB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EACpC,IAAI,CAAC,eAAe,EAAE,EACtB;AACE,gBAAA,KAAK,EAAE,EAAE;AACT,gBAAA,KAAK,EAAE,QAAQ;AAChB,aAAA,CACF,CAAC;AAEF,YAAA,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;AAC3B,gBAAA,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;AACrC,aAAA;AAAM,iBAAA;gBACL,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAC5B,IAAI,CAAC,iBAAgC,EACrC,UAAU,CACX,CAAC;AACH,aAAA;YAED,IAAI,IAAI,CAAC,iBAAiB;AACxB,gBAAA,IAAI,CAAC,iBAAiB,CAAC,UAAU,GAAG;AAClC,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,cAAc,EAAE,WAAW;iBAC5B,CAAC;YAEJ,IAAI,CAAC,aAAa,EAAE,CAAC;AACvB,SAAC,CAAC;AAEF;;AAEG;QACK,IAAa,CAAA,aAAA,GAAG,MAAW;;YACjC,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC;YAEhE,MAAM,UAAU,GAAG,eAAe,CAChC,IAAI,CAAC,iBAAoC,CAC5B,CAAC;AAChB,YAAA,MAAM,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YAC/C,MAAM,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AACzD,YAAA,MAAM,OAAO,GAAGA,UAAC,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACzD,YAAA,MAAM,KAAK,GAAG,CAAA,CAAA,EAAA,GAAA,MAAA,IAAI,CAAC,iBAAiB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,KAAI,aAAa,CAAC;YACxE,MAAM,MAAM,GAAG,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,iBAAiB,0CAAE,UAAU;kBAC7C,MAAA,IAAI,CAAC,iBAAiB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC,cAAc,CAAC;AACpD,kBAAE,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AAErB,YAAA,MAAM,MAAM,GACV,aAAa,IAAI,WAAW,CAAC,aAAa,CAAC;AACzC,kBAAE,eAAe;kBACf,YAAY,CAAC;AAEnB,YAAA,MAAM,IAAI,GACR,IAAI,CAAC,OAAO,KAAK,OAAO;AACtB,kBAAE,EAAE,KAAK,EAAEC,cAAY,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE;AAC7D,kBAAE;oBACE,KAAK;oBACL,MAAM;AACN,oBAAA,SAAS,EAAE,IAAI;AACf,oBAAA,SAAS,EAAE,IAAI;iBAChB,CAAC;AAER,YAAA,MAAM,MAAM,GAAG,IAAKD,UAAS,CAAC,OAAO,CAAC,OAAO,EAAO,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAK,EAAA,MAAM,EAAG,CAAC;YAEvE,CAAA,EAAA,GAAA,MAAM,KAAN,IAAA,IAAA,MAAM,KAAN,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAM,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,EAAE,CAAC;;YAG5B,IAAI,IAAI,CAAC,WAAW;AAAE,gBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;;YAEhD,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACnD,SAAC,CAAC;AAEF;;;AAGG;QACK,IAAkB,CAAA,kBAAA,GAAG,MAAW;;;AAGtC,YAAA,CAAA,EAAA,GAAA,IAAI,KAAJ,IAAA,IAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,CAACA,UAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBAC3C,KAAK,EAAE,IAAI,CAAC,WAAW;AACvB,gBAAA,SAAS,EAAE,IAAI,CAAC,OAAO,KAAK,OAAO,GAAG,QAAQ,GAAG,SAAS;AAC3D,aAAA,CAAC,CAAC;YAEH,IAAI,CAAC,YAAY,EAAE,CAAC;AACtB,SAAC,CAAC;;QAGK,IAAiB,CAAA,iBAAA,GAAG,MAAW;YACpC,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO;YAC7B,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACnD,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACnD,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AACjD,SAAC,CAAC;QACK,IAAoB,CAAA,oBAAA,GAAG,MAAW;YACvC,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO;YAC7B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACpD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACpD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAClD,SAAC,CAAC;AACK,QAAA,IAAA,CAAA,YAAY,GAAG,CAAC,KAAwB,KAAU;YACvD,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO;AAC7B,YAAA,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;AACnC,YAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,YAAA,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAC3B,SAAC,CAAC;QACK,IAAU,CAAA,UAAA,GAAG,MAAW;YAC7B,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO;AAC7B,YAAA,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;AAClC,YAAA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC5B,SAAC,CAAC;AACK,QAAA,IAAA,CAAA,YAAY,GAAG,CAAC,KAAwB,KAAU;AACvD,YAAA,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,UAAU,EAAE,CAAC;AACnB,aAAA;AACH,SAAC,CAAC;;AAGF;;AAEG;AACI,QAAA,IAAA,CAAA,UAAU,GAAG,CAAC,MAAc,KAAU;YAC3C,IAAI,MAAM,KAAK,SAAS,EAAE;AACxB,gBAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AACvB,aAAA;YACD,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtC,aAAA;AACH,SAAC,CAAC;AAEF;;AAEG;QACI,IAAO,CAAA,OAAA,GAAG,MAAW;YAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;AACd,SAAC,CAAC;QAzRA,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;AACjD,QAAA,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;AAEtC,QAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,QAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,QAAA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,OAAO,GAAGA,UAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAE9B,QAAA,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;AAC5B,QAAA,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;AAC3B,QAAA,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC;AAEpC,QAAA,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AAC9B,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;KACzB;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,oBAAoB,CAAC;KAC7B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,SAAS,CAAC,IAAI,EAAE,CAAC;KACzB;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,mBAAmB,CAAC;KAC5B;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,oBAAoB,CAAC;KAC7B;;AA9Ca,SAAM,CAAA,MAAA,GAAc,SAAd;;AChBtB,MAAM,YAAY,GAAG,WAAW,CAAC;AAEjC,MAAM,SAAU,SAAQ,SAAS,CAAA;AAG/B,IAAA,WAAA,CAAmB,KAAgB,EAAA;;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAuBR,IAAM,CAAA,MAAA,GAAG,MAAgB;AAC9B,YAAA,OAAO,QAAQ,CAAC;AAClB,SAAC,CAAC;QAEK,IAAa,CAAA,aAAA,GAAG,MAAc;AACnC,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,OAAO,GAAG,CAAC,CAAe,KAAU;;AAC1C,YAAA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AACtB,YAAA,IAAI,CAAC,KAAK;gBAAE,OAAO;AACnB,YAAA,IAAI,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,MAAM,EAAE;gBAAE,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AACzE,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;AACzB,YAAA,IAAI,IAAI,CAAC,OAAO,IAAI,OAAO,EAAE;gBAC3B,IAAI,CAAC,OAAO,EAAE,CAAC;AAChB,aAAA;AAAM,iBAAA;gBACL,IAAI,CAAC,UAAU,EAAE,CAAC;AACnB,aAAA;AACH,SAAC,CAAC;AAEF;;AAEG;QACK,IAAU,CAAA,UAAA,GAAG,MAAW;YAC9B,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,YAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,IAAI,CAAC,UAAU;gBACjB,IAAI,CAAC,OAAO,GAAGA,UAAC,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE;AAC1C,oBAAA,KAAK,EAAE,YAAY;iBACpB,CAAC;AACC,qBAAA,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC;AAC7B,qBAAA,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC9B,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,KAAK,GAAG,CAAC,KAAmB,KAAU;AAC3C,YAAA,IAAI,KAAK,CAAC,IAAI,IAAI,WAAW,EAAE;AAC7B,gBAAAA,UAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACvB,OAAO;AACR,aAAA;AACH,SAAC,CAAC;QAlEA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,EAAE,CAAC,cAAqB,EAAE,CAAC,CAAY,KACtD,IAAI,CAAC,OAAO,CAAE,CAA6B,CAAC,CAC7C,CAAC;KACH;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,qBAAqB,CAAC;KAC9B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,SAAS,CAAC,IAAI,EAAE,CAAC;KACzB;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,cAAc,CAAC;KACvB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,aAAa,CAAC;KACtB;;AAxBa,SAAM,CAAA,MAAA,GAAc,QAAd;;ACItB;;AAEG;AACHA,UAAC,CAAC,IAAI,CAAC,KAAK,GAAGA,UAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;AACpC,IAAA,OAAO,EAAE;AACP,QAAA,IAAI,EAAE,OAAO;AACd,KAAA;;AAED,IAAA,UAAU,EAAE,UAAU,GAAY,EAAE,OAAoC,EAAA;;AAEtE,QAAA,IAAIA,UAAC,CAAC,OAAO,CAAC,KAAK,EAAE;YACnB,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;AAC5C,SAAA;;AAGD,QAAA,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,GAAGA,UAAC,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;;AAG1E,QAAA,IAAI,OAAO,IAAI,OAAO,CAAC,SAAS,EAAE;YAChC,OAAO,CAAC,SAAS,GAAGA,UAAC,CAAC,IAAI,CAAC,MAAM,CAC/B,EAAE,EACF,IAAI,CAAC,OAAO,CAAC,SAAS,EACtB,OAAO,CAAC,SAAS,CAClB,CAAC;AACH,SAAA;;QAGD,IAAI,CAAC,IAAI,GAAIA,UAAC,CAAC,IAAI,CAAC,KAAa,CAAC,IAAI,CAAC;AAEvC,QAAAA,UAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAC9D;IACD,wBAAwB,EAAE,UAAU,eAAoB,EAAA;AACtD,QAAA,IAAI,cAAc,CAAC;AACnB,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;AAC5B,YAAA,IAAI,YAAY,CAAC;YACjB,IACE,IAAI,CAAC,IAAI,KAAMA,UAAC,CAAC,IAAI,CAAC,QAAgB,CAAC,IAAI;gBAC3C,IAAI,CAAC,IAAI,KAAMA,UAAC,CAAC,IAAI,CAAC,KAAa,CAAC,IAAI,EACxC;AACA,gBAAA,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACxD,aAAA;iBAAM,IAAI,IAAI,CAAC,IAAI,KAAMA,UAAC,CAAC,IAAI,CAAC,OAAe,CAAC,IAAI,EAAE;AACrD,gBAAA,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACjC,aAAA;AAAM,iBAAA;AACL,gBAAA,OAAO,QAAQ,CAAC;AACjB,aAAA;YACD,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CACpD,YAAY,CAAC,SAAS,EAAE,CACzB,EACD,eAAe,GAAG,IAAIA,UAAC,CAAC,MAAM,CAAC,eAAe,EAAE;AAC9C,gBAAA,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;AACvB,gBAAA,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC;AAC5C,aAAA,CAAC,CAAC;AACL,YAAA,MAAM,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAC1D,eAAe,CAAC,SAAS,EAAE,CAC5B,CAAC;AACF,YAAA,cAAc,GAAG,eAAe,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;AAClE,SAAA;AAAM,aAAA;YACL,cAAc,GAAG,QAAQ,CAAC;AAC3B,SAAA;AACD,QAAA,OAAO,cAAc,CAAC;KACvB;AACF,CAAA,CAAC;;AC9CF,MAAM,kBAAmB,SAAQ,YAAY,CAAA;AAG3C,IAAA,WAAA,CAAmB,KAAgB,EAAA;;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAqBR,IAAa,CAAA,aAAA,GAAG,MAAc;AACnC,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,OAAO,GAAG,CAAC,CAAe,KAAU;AAC1C,YAAA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AACtB,YAAA,IAAI,CAAC,KAAK;gBAAE,OAAO;;AAGnB,YAAA,IAAI,CAAC,CAAC,SAAS,KAAK,kBAAkB,CAAC,MAAM,EAAE;AAC7C,gBAAA,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACtB,IAAI,CAAC,UAAU,EAAE,CAAC;AACnB,aAAA;AACH,SAAC,CAAC;QAgFM,IAAW,CAAA,WAAA,GAAG,MAAW;YAC/B,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO;AAC7B,YAAA,IAAI,CAAC,UAAU,GAAG,IAAIA,UAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE;AAClD,gBAAA,YAAY,EAAE;AACZ,oBAAA,KAAK,EAAE,MAAM;AACb,oBAAA,MAAM,EAAE,CAAC;AACT,oBAAA,SAAS,EAAE,IAAI;AACf,oBAAA,SAAS,EAAE,IAAI;oBACf,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,WAAW;AACjD,iBAAA;AACF,aAAA,CAAe,CAAC;AACjB,YAAA,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;AAC3B,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;YACzB,IAAI,CAAC,WAAW,EAAE,CAAC;AACrB,SAAC,CAAC;QAEK,IAAO,CAAA,OAAA,GAAG,MAAW;AAC1B,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AAEnC,YAAA,IAAI,UAAU,EAAE;gBACd,UAAU,CAAC,OAAO,EAAE,CAAC;AACtB,aAAA;;YAGD,MAAM,KAAK,GAAG,CAAoB,iBAAA,EAAA,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC;YAC9D,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAChD,YAAA,IAAI,SAAS;AAAE,gBAAA,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACjD,SAAC,CAAC;AA7IA,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,EAAE,CAAC,cAAqB,EAAE,IAAI,CAAC,OAAc,CAAC,CAAC;KACjE;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,8BAA8B,CAAC;KACvC;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,kBAAkB,CAAC,IAAI,EAAE,CAAC;KAClC;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,gBAAgB,CAAC;KACzB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,eAAe,CAAC;KACxB;AAiBD;;;AAGG;AACI,IAAA,SAAS,CAAC,KAAkB,EAAA;;AAEjC,QAAA,MAAM,QAAQ,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC;QAEhE,IAAI,QAAQ,IAAI,aAAa,EAAE;YAC7B,MAAM,gBAAgB,GAAG,OAAO,CAAC;YACjC,MAAM,gBAAgB,GAAG,YAAY,CAAC;AACtC,YAAA,IAAI,UAAU,CAAC;AACf,YAAA,MAAM,eAAe,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;AAE9D,YAAA,MAAM,UAAU,GAAG,aAAa,CAAC,eAAe,CAAC,CAAC;AAElD,YAAA,IAAI,UAAU,EAAE;AACd,gBAAA,IAAI,MAAM,CAAC;AACX,gBAAA,IAAI,OAAO,CAAC;gBACZ,IAAI;oBACF,UAAU,GAAG,IAAI,CAAC,UAAU,CACzB,QAAkC,EACnC,gBAAgB,EAChB;AACE,wBAAA,KAAK,EAAE,gBAAgB;AACxB,qBAAA,CACF,CAAC;oBAEF,MAAM,UAAU,GAAG,EAAE,CAAC;;AAEtB,oBAAA,KACE,IAAI,CAAC,GAAG,CAAC,EACT,CAAC,GAAI,QAAQ,CAAC,QAAqB,CAAC,WAAW,CAAC,MAAM,EACtD,CAAC,EAAE,EACH;AACA,wBAAA,UAAU,CAAC,IAAI,CAAE,QAAQ,CAAC,QAAqB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,qBAAA;;AAED,oBAAA,KACE,IAAI,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAClD,CAAC,IAAI,CAAC,EACN,CAAC,EAAE,EACH;AACA,wBAAA,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,qBAAA;;AAED,oBAAA,UAAU,CAAC,IAAI,CAAE,QAAQ,CAAC,QAAqB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEhE,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,UAAiB,CAAC,CAAC;oBAC3D,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;oBAC7D,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAC7B,eAA8B,EAC9B,gBAAgB,CACjB,CAAC;;AAEF,oBAAA,IAAI,CAAC,OAAO;wBAAE,OAAO;AAErB,oBAAA,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC;oBACtC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,mBAAmB,EAAE,CAAC;;;AAGlD,oBAAA,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;wBACvB,OAAO,GAAGA,UAAC,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAC9C,wBAAA,MAAM,MAAM,GAAG,IAAKA,UAAS,CAAC,OAAO,CAAC,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACxC,aAAa,CAAC,OAAO,CACrB,EAAA,YAAY,EACf,CAAC;AACH,wBAAA,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;wBAC7B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC/C,qBAAC,CAAC,CAAC;AACJ,iBAAA;AAAC,gBAAA,OAAO,KAAK,EAAE;oBACd,OAAO,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;AAC3C,iBAAA;AACF,aAAA;AACF,SAAA;KACF;;AAnHa,kBAAM,CAAA,MAAA,GAAmB,OAAnB;;ACdtB,MAAM,iBACJ,SAAQ,kBAAkB,CAAA;AAO1B,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QA+BR,IAAa,CAAA,aAAA,GAAG,MAAc;AACnC,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC;QAEM,IAAc,CAAA,cAAA,GAAG,MAAW;;AAClC,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC3B,YAAA,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACvC,IAAI,CAAC,YAAY,EAAE;gBACjB,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;AACnC,aAAA;AAAM,iBAAA;gBACL,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,CAAC,MAAM,CAAC,CAAC;AACtC,aAAA;AAED,YAAA,IAAI,CAAC,YAAY,GAAG,CAAC,YAAY,CAAC;AACpC,SAAC,CAAC;AAEF;;AAEG;AACK,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,CAAc,KAAI;;AAEvC,YAAA,MAAM,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;;AAGlC,YAAA,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;;AAG5B,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;AAE3B,YAAA,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;;AAGtB,YAAA,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;;YAEzB,GAAG,KAAA,IAAA,IAAH,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAG,CAAE,WAAW,CAAC,MAAM,CAAC,CAAC;;YAEzB,IAAI,CAAC,UAAU,EAAE,CAAC;AACpB,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;YACzB,IAAI,CAAC,cAAc,EAAE,CAAC;AACxB,SAAC,CAAC;QAEK,IAAO,CAAA,OAAA,GAAG,MAAW;;YAC1B,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC1C,YAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAC1B,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACnC,YAAA,IAAI,UAAU,EAAE;gBACd,UAAU,CAAC,OAAO,EAAE,CAAC;AACtB,aAAA;;YAGD,MAAM,KAAK,GAAG,CAAoB,iBAAA,EAAA,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC;YAC9D,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAChD,YAAA,IAAI,SAAS;AAAE,gBAAA,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACjD,SAAC,CAAC;;AAnFA,QAAA,IAAI,CAAC,MAAM,GAAG,IAAKA,UAAS,CAAC,MAAM,CAAC;AAClC,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,YAAY,EAAE,CAAC;AACf,YAAA,WAAW,EAAE,gBAAgB;AAC7B,YAAA,UAAU,EAAE,MAAM;AACnB,SAAA,CAAC,CAAC;AAEH,QAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAC7C;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,6BAA6B,CAAC;KACtC;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,iBAAiB,CAAC,IAAI,EAAE,CAAC;KACjC;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,eAAe,CAAC;KACxB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,qBAAqB,CAAC;KAC9B;;AAnCa,iBAAM,CAAA,MAAA,GAAmB,EAAnB;;ACCtB;;AAEG;AAEH;;AAEG;AACHA,UAAC,CAAC,IAAI,CAAC,cAAc,GAAGA,UAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC3C,cAAc,EAAE,UAAU,QAAqB,EAAA;AAC7C,QAAA,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC;KAC9B;AACF,CAAA,CAAC,CAAC;AAEH,MAAM,UAAW,SAAQ,YAAY,CAAA;AAGnC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAmBR,IAAM,CAAA,MAAA,GAAG,MAAqB;AACnC,YAAA,OAAO,QAAQ,CAAC;AAClB,SAAC,CAAC;QAEK,IAAa,CAAA,aAAA,GAAG,MAAc;AACnC,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC;AAEK,QAAA,IAAA,CAAA,aAAa,GAAG,CAAC,YAAY,GAAG,KAAK,KAAU;YACpD,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO;AAC7B,YAAA,MAAM,cAAc,GAAG;gBACrB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,eAAe,EAAE;gBAClD,YAAY;aACb,CAAC;YACF,MAAM,IAAI,GAAG,IAAIA,UAAC,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,WAAW,CAAA,EAAK,cAAc,CAAA,CAAG,CAAC;YAC/D,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;AAEhD,YAAA,IAAI,CAAC,UAAU,GAAG,IAAIA,UAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE;gBAC3D,IAAI;AACJ,gBAAA,SAAS,EAAE,IAAI;AACf,gBAAA,SAAS,EAAE,IAAI;AACf,gBAAA,UAAU,EAAE,IAAI;gBAChB,WAAW;AACX,gBAAA,YAAY,EAAE,KAAK;AACH,aAAA,CAAe,CAAC;AAClC,YAAA,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;AAC3B,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;YACzB,IAAI,CAAC,aAAa,EAAE,CAAC;AACvB,SAAC,CAAC;KAhDD;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,qBAAqB,CAAC;KAC9B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,UAAU,CAAC,IAAI,EAAE,CAAC;KAC1B;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,kBAAkB,CAAC;KAC3B;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,qBAAqB,CAAC;KAC9B;;AApBa,UAAM,CAAA,MAAA,GAAG,QAAH;;ACjBtB,MAAM,YAAa,SAAQ,UAAU,CAAA;AACnC,IAAA,WAAA,CAAmB,KAAgB,EAAA;;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAqBR,IAAM,CAAA,MAAA,GAAG,MAAqB;AACnC,YAAA,OAAO,QAAQ,CAAC;AAClB,SAAC,CAAC;QAEK,IAAa,CAAA,aAAA,GAAG,MAAc;AACnC,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC;AAEK,QAAA,IAAA,CAAA,OAAO,GAAG,CAAC,CAAe,KAAU;AACzC,YAAA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AACtB,YAAA,IAAI,CAAC,KAAK;gBAAE,OAAO;AACnB,YAAA,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;;AAG9B,YAAA,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;AAC/B,gBAAA,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAChC,aAAA;AACH,SAAC,CAAC;AAEK,QAAA,IAAA,CAAA,eAAe,GAAG,CAAC,KAAkB,KAAa;YACvD,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAC5D,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;AACzB,YAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC3B,SAAC,CAAC;AA5CA,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,EAAE,CAAC,cAAqB,EAAE,IAAI,CAAC,OAAc,CAAC,CAAC;KACjE;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,uBAAuB,CAAC;KAChC;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;KAC5B;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,eAAe,CAAC;KACxB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,uBAAuB,CAAC;KAChC;AA6BM,IAAA,YAAY,CACjB,MAAA,GAAkC,IAAI,EACtC,gBAAuC,IAAI,EAAA;QAE3C,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AAC9C,QAAA,MAAM,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC;AAE9C,QAAA,MAAM,SAAS,GAAgB,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC;QAC9D,MAAM,QAAQ,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;QAC/C,MAAM,YAAY,GAAG,QAAQ;AAC1B,aAAA,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AAC3C,aAAA,OAAO,EAAE,CAAC;AACb,QAAA,IAAI,QAAQ,GAAG,MAAM,IAAI,YAAY,CAAC;AACtC,QAAA,QAAQ,GAAG,aAAa,GAAG,CAAC,aAAa,EAAE,GAAG,QAAQ,CAAC,GAAG,QAAQ,CAAC;QAEnE,MAAM,KAAK,GAAG,CAAC,CAAC;;AAEhB,QAAA,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;AAEpC,QAAA,MAAM,4BAA4B,GAAG,SAAS,CAAC,4BAA4B,EAAE,CAAC;;AAG9E,QAAA,MAAM,YAAY,GAChB,4BAA4B,IAAI,CAAC,MAAM;AACrC,cAAE,aAAa;AACf,cAAE,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AAC1B,QAAA,IAAI,YAAY,EAAE;AAChB,YAAA,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,WAAW,CAAC,SAAS,EAAE,CAAC;AACzD,YAAA,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,YAAY,CAAC,SAAS,EAAE,CAAC;;YAG1D,MAAM,OAAO,GAAG,CAACA,UAAC,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,EAAEA,UAAC,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC7D,YAAA,MAAM,IAAI,GAAG,IAAKA,UAAS,CAAC,QAAQ,CAAC,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,EAC1C,KAAK,EAAE,SAAS,EAChB,MAAM,EAAE,CAAC,EACN,EAAA,YAAY,EACf,CAAC;AACH,YAAA,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC3B,YAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;AAChC,gBAAA,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC5B,gBAAA,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC1B,aAAA;AACF,SAAA;AAED,QAAA,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;KACtC;AAED;;;AAGG;AACK,IAAA,gBAAgB,CAAC,OAAiB,EAAA;AACxC,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW;AAC3B,aAAA,QAAQ,EAAE;AACV,aAAA,eAAe,CAAC,IAAI,CAAC,CAAC,OAAoB,KAAI;YAC7C,MAAM,mBAAmB,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAW,CAAC;YAC9D,MAAM,oBAAoB,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAW,CAAC;YAC/D,MAAM,mBAAmB,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAW,CAAC;YAC9D,MAAM,oBAAoB,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAW,CAAC;AAE/D,YAAA,QACE,CAAC,mBAAmB,CAAC,MAAM,CAAC,mBAAmB,CAAC;AAC9C,gBAAA,oBAAoB,CAAC,MAAM,CAAC,oBAAoB,CAAC;AACnD,iBAAC,mBAAmB,CAAC,MAAM,CAAC,oBAAoB,CAAC;AAC/C,oBAAA,oBAAoB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,EACnD;AACJ,SAAC,CAAC,CAAC;AAEL,QAAA,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;KACvB;AAED;;;AAGG;AACK,IAAA,qBAAqB,CAAC,QAAwB,EAAA;QACpD,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAE9C,QAAQ;AACL,aAAA,GAAG,CAAC,CAAC,MAAM,MAAM;AAChB,YAAA,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE;YAC1B,GAAG,EAAE,MAAM,CAAC,WAAW;YACvB,MAAM;AACP,SAAA,CAAC,CAAC;aACF,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,KAAI;YAC3B,SAAS,CAAC,eAAe,CAAC,OAAO,CAC/B,CAAC,OAAoB,EAAE,KAAa,KAAI;;gBAGtC,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAW,CAAC;gBACrD,MAAM,WAAW,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAW,CAAC;gBAEtD,MAAM,MAAM,GAAG,SAAS,CAAC,uBAAuB,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;;;AAG5D,gBAAA,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;AAC7B,oBAAA,SAAS,CAAC,mBAAmB,CAAC,GAAG,kCAC5B,MAAM,CAAA,EAAA,EACT,CAAC,CAAA,EAAG,KAAK,CAAI,EAAA,CAAA,GAAG,OAAO,IACvB,CAAC;AACJ,iBAAA;AAAM,qBAAA,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;AACrC,oBAAA,SAAS,CAAC,mBAAmB,CAAC,GAAG,kCAC5B,MAAM,CAAA,EAAA,EACT,CAAC,CAAA,EAAG,KAAK,CAAI,EAAA,CAAA,GAAG,OAAO,IACvB,CAAC;AACJ,iBAAA;AACH,aAAC,CACF,CAAC;AACJ,SAAC,CAAC,CAAC;KACN;AAED;;AAEG;AACI,IAAA,OAAO,4BAA4B,CACxC,KAAkB,EAClB,KAA6B,EAAA;QAE7B,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAkB,KAAI;AACtC,YAAA,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;YACjC,MAAM,cAAc,GAAG,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAEzE,YAAA,YAAY,CAAC,sBAAsB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAC9D,SAAC,CAAC,CAAC;KACJ;AAED;;AAEG;AACK,IAAA,OAAO,sBAAsB,CACnC,MAAc,EACd,cAAgC,EAAA;AAEhC,QAAA,IAAI,CAAC,cAAc;YAAE,OAAO;QAE5B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;AAC1C,YAAA,MAAM,OAAO,GAAgB,cAAc,CAAC,GAAG,CAAC,CAAC;AACjD,YAAA,MAAM,QAAQ,GAAG,GAAG,KAAA,IAAA,IAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,KAAK,CAAC,GAAG,CAAC,CAAC;AACjC,YAAA,MAAM,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;YAC/C,IAAI,GAAG,KAAK,SAAS;gBAAE,OAAO;;AAE9B,YAAA,MAAM,OAAO,GAAIA,UAAC,CAAC,UAAU,CAAC,YAAY,CACxC,OAAO,CAAC,UAAU,EAAc,CACT,CAAC;YAC1B,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;AAC9B,YAAA,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC9B,SAAC,CAAC,CAAC;KACJ;AACF;;ACvMD,MAAM,UAAU,GAAG,CAAC,CAAC;AAErB,MAAM,QAAS,SAAQ,YAAY,CAAA;AAGjC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAsBR,IAAM,CAAA,MAAA,GAAG,MAAS;AACvB,YAAA,OAAO,EAAE,CAAC;AACZ,SAAC,CAAC;QAEK,IAAa,CAAA,aAAA,GAAG,MAAc;AACnC,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;YACzB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AACnC,YAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AAC9C,YAAA,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC5B,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAiB,CAAC,KAAK,CAAC,MAAM;AACxE,gBAAA,WAAW,CAAC;AAChB,SAAC,CAAC;QAEK,IAAO,CAAA,OAAA,GAAG,MAAW;YAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AACnC,YAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AAC9C,YAAA,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC7B,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAiB,CAAC,KAAK,CAAC,MAAM;AACxE,gBAAA,EAAE,CAAC;YACL,IAAI,CAAC,oBAAoB,EAAE,CAAC;AAC9B,SAAC,CAAC;AAEF;;AAEG;AACK,QAAA,IAAA,CAAA,eAAe,GAAG,CAAC,KAAkB,KAAa;AACxD,YAAA,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;AACzE,YAAA,IAAI,OAAO,CAAgB,IAAI,CAAC,YAAY,CAAC,EAAE;AAC7C,gBAAA,IAAI,cAAc;AAAE,oBAAA,OAAO,IAAI,CAAC;AACjC,aAAA;AAAM,iBAAA;gBACL,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAC7C,gBAAA,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;AAClE,oBAAA,OAAO,IAAI,CAAC;gBACd,IAAI,WAAW,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC;AAAE,oBAAA,OAAO,IAAI,CAAC;AACjE,aAAA;AAED,YAAA,OAAO,KAAK,CAAC;AACf,SAAC,CAAC;QAEM,IAAoB,CAAA,oBAAA,GAAG,MAAc;YAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAC7C,YAAA,OAAO,WAAW,CAAC,WAAW,CAAC,CAAC;AAClC,SAAC,CAAC;AAEF;;AAEG;QACK,IAAsB,CAAA,sBAAA,GAAG,MAAc;YAC7C,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAC7C,YAAA,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;AAC3C,SAAC,CAAC;AAEF;;AAEG;QACK,IAAiB,CAAA,iBAAA,GAAG,MAAc;AACxC,YAAA,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,UAAU,CAAC;AACjD,SAAC,CAAC;AAEF;;;AAGG;AACK,QAAA,IAAA,CAAA,eAAe,GAAG,CAAC,KAAkB,KAAU;AACrD,YAAA,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,UAAU,EAAE;AAC1C,gBAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;AAC3B,aAAA;AACD,YAAA,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AACzC,YAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,SAAC,CAAC;AAEF;;AAEG;QACI,IAAoB,CAAA,oBAAA,GAAG,MAAW;AACvC,YAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,MAAM,KAC/B,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAC1C,CAAC;AACF,YAAA,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;AACzB,SAAC,CAAC;AAEF;;AAEG;QACI,IAAiB,CAAA,iBAAA,GAAG,MAAW;YACpC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,MAAM,KAC/B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAChD,CAAC;AACF,YAAA,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;AACzB,SAAC,CAAC;AAEF;;AAEG;AACK,QAAA,IAAA,CAAA,wBAAwB,GAAG,CAAC,MAAmB,KAAU;YAC/D,IAAI,CAAC,iBAAiB,EAAE,CAAC;AACzB,YAAA,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;AAC1C,YAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC/C,SAAC,CAAC;AAEF;;AAEG;AACK,QAAA,IAAA,CAAA,iBAAiB,GAAG,CAC1B,QAAqC,KACZ;YACzB,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;AAAE,gBAAA,OAAO,IAAI,CAAC;AAEvD,YAAA,IAAI,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAChC,YAAA,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;AACpD,gBAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChC,gBAAA,MAAM,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;AAE7C,gBAAA,IAAI,aAAa,EAAE;oBACjB,MAAM,MAAM,GAAG,KAAK,CAClB,OAAsB,EACtB,aAA4B,CAC7B,CAAC;AACF,oBAAA,IAAI,MAAM;wBAAE,aAAa,GAAG,MAAM,CAAC;AACpC,iBAAA;AACF,aAAA;AAED,YAAA,OAAO,aAA4B,CAAC;AACtC,SAAC,CAAC;AAEK,QAAA,IAAA,CAAA,UAAU,GAAG,CAAC,UAAuB,KAAU;YACpD,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AAChD,YAAA,IAAI,KAAK;gBAAE,OAAO;AAClB,YAAA,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;;AAEjC,YAAA,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;;AAE5B,gBAAA,IAAI,IAAI,CAAC,oBAAoB,EAAE,EAAE;AAC/B,oBAAA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;oBAC9B,MAAM,cAAc,GAAG,YAAY;yBAChC,MAAM,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC;yBAC7B,GAAG,CAAC,CAAC,MAAM,KAAK,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;AAE/C,oBAAA,IAAI,cAAc,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM;wBAAE,OAAO;oBAE1D,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEzD,IAAI,KAAK,IAAI,MAAM,EAAE;wBACnB,MAAM,aAAa,GAAG,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAC3C,wBAAA,MAAM,IAAI,GACL,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CACvB,EAAA,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAC3B,CAAC;AACF,wBAAA,IAAI,aAAa,EAAE;4BACjB,MAAM,MAAM,GAAG,qBAAqB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AAC1D,4BAAA,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;AACvC,yBAAA;AACF,qBAAA;AAED,oBAAA,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;AAC3C,iBAAA;;AAED,gBAAA,IAAI,IAAI,CAAC,sBAAsB,EAAE,EAAE;AACjC,oBAAA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;AAE9B,oBAAA,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;oBAEhC,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAC5B,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBAEzB,IAAI,CAAC,cAAc,EAAE,CAAC;AACvB,iBAAA;AACF,aAAA;AACH,SAAC,CAAC;;AAlMA,QAAA,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;KACxB;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,mBAAmB,CAAC;KAC5B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;KACxB;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,mBAAmB,CAAC;KAC5B;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,mBAAmB,CAAC;KAC5B;AAkLF;;ACpND,MAAM,QAAS,SAAQ,YAAY,CAAA;AACjC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAmBR,IAAM,CAAA,MAAA,GAAG,MAAgB;AAC9B,YAAA,OAAO,UAAU,CAAC;AACpB,SAAC,CAAC;QAEK,IAAa,CAAA,aAAA,GAAG,MAAc;AACnC,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC;QAEM,IAAe,CAAA,eAAA,GAAG,MAAW;YACnC,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO;AAC7B,YAAA,IAAI,CAAC,UAAU,GAAG,IAAIA,UAAC,CAAC,IAAI,CAAC,QAAQ,CACnC,IAAI,CAAC,UAAqB,EAC1B;AACE,gBAAA,YAAY,EAAE;oBACZ,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,gBAAgB,EAAE;oBACjD,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,iBAAiB,EAAE;AACnD,oBAAA,SAAS,EAAE,IAAI;AACf,oBAAA,SAAS,EAAE,IAAI;AAChB,iBAAA;gBACD,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,WAAW;AAChD,gBAAA,UAAU,EAAE,IAAI;AACgB,aAAA,CACrB,CAAC;AAChB,YAAA,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;AAC3B,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;YACzB,IAAI,CAAC,eAAe,EAAE,CAAC;AACzB,SAAC,CAAC;KA9CD;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,mBAAmB,CAAC;KAC5B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;KACxB;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,aAAa,CAAC;KACtB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,mBAAmB,CAAC;KAC5B;AA+BF;;AClDD,MAAM,WAAY,SAAQ,YAAY,CAAA;AAGpC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAmBR,IAAM,CAAA,MAAA,GAAG,MAAgB;AAC9B,YAAA,OAAO,SAAS,CAAC;AACnB,SAAC,CAAC;QAEK,IAAa,CAAA,aAAA,GAAG,MAAc;AACnC,YAAA,OAAO,IAAI,CAAC;AACd,SAAC,CAAC;QAEM,IAAc,CAAA,cAAA,GAAG,MAAW;YAClC,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO;AAC7B,YAAA,IAAI,CAAC,UAAU,GAAG,IAAIA,UAAC,CAAC,IAAI,CAAC,OAAO,CAClC,IAAI,CAAC,UAAqB,EAC1B;AACE,gBAAA,iBAAiB,EAAE,KAAK;AACxB,gBAAA,SAAS,EAAE;AACT,oBAAA,KAAK,EAAE,SAAS;AAChB,oBAAA,OAAO,EAAE,uCAAuC;AACjD,iBAAA;AACD,gBAAA,YAAY,EAAE;oBACZ,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,gBAAgB,EAAE;oBACjD,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,iBAAiB,EAAE;AACnD,oBAAA,SAAS,EAAE,IAAI;AACf,oBAAA,SAAS,EAAE,IAAI;AAChB,iBAAA;gBACD,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,WAAW;AAChD,gBAAA,YAAY,EAAE,CAAC;AACf,gBAAA,UAAU,EAAE,IAAI;AACe,aAAA,CACpB,CAAC;AAChB,YAAA,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;AAC3B,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;YACzB,IAAI,CAAC,cAAc,EAAE,CAAC;AACxB,SAAC,CAAC;KApDD;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,sBAAsB,CAAC;KAC/B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,WAAW,CAAC,IAAI,EAAE,CAAC;KAC3B;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,YAAY,CAAC;KACrB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,sBAAsB,CAAC;KAC/B;;AApBa,WAAM,CAAA,MAAA,GAAmB,SAAnB;;ACHtB,MAAM,UAAW,SAAQ,YAAY,CAAA;AACnC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAmBR,IAAM,CAAA,MAAA,GAAG,MAAS;AACvB,YAAA,OAAO,EAAE,CAAC;AACZ,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;YACzB,IAAI,CAAC,aAAa,EAAE,CAAC;AACvB,SAAC,CAAC;KAxBD;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,qBAAqB,CAAC;KAC9B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,UAAU,CAAC,IAAI,EAAE,CAAC;KAC1B;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,aAAa,CAAC;KACtB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,aAAa,CAAC;KACtB;IAUO,aAAa,GAAA;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AAC1C,QAAA,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;;AAE9C,QAAA,IAAI,aAAa,IAAI,KAAK,CAAC,4BAA4B,EAAE,EAAE;AACzD,YAAA,KAAK,CAAC,2BAA2B,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;AAC9D,SAAA;QACD,IAAI,CAAA,aAAa,KAAA,IAAA,IAAb,aAAa,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAb,aAAa,CAAE,SAAS,MAAK,SAAS,EAAE;AAC1C,YAAA,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;AACrD,SAAA;QACD,KAAK,CAAC,mBAAmB,EAAE,CAAC;QAC5B,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCD,MAAM,UAAW,SAAQ,YAAY,CAAA;AAGnC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAmBR,IAAM,CAAA,MAAA,GAAG,MAAgB;AAC9B,YAAA,OAAO,QAAQ,CAAC;AAClB,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;YACzB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AACrC,SAAC,CAAC;KAxBD;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,qBAAqB,CAAC;KAC9B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,UAAU,CAAC,IAAI,EAAE,CAAC;KAC1B;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,cAAc,CAAC;KACvB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,qBAAqB,CAAC;KAC9B;;AApBa,UAAM,CAAA,MAAA,GAAG,QAAH,CAAY;AA8BhC;;AAEG;AACW,UAAA,CAAA,cAAc,GAAG,CAC7B,YAA0B,EAC1B,MAAc,EACd,KAAa,EACb,OAAe,EACf,YAAY,GAAG,KAAK,KACL;AACf,IAAA,MAAM,cAAc,GAAG,EAAE,OAAO,EAAE,OAAO,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,CAAC;IAC1E,MAAM,IAAI,GAAG,IAAIA,UAAC,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAClB,WAAW,CAAA,EACX,cAAc,CAAA,CACjB,CAAC;AAEH,IAAA,MAAM,MAAM,GAAG,IAAKA,UAAC,CAAC,MAAc,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7D,IAAA,IAAI,KAAK,EAAE;AACT,QAAA,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;AACnE,QAAA,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;AAC7B,KAAA;AAED,IAAA,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC5B,IAAA,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;;AAE9B,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF;;AAEG;AACW,UAAS,CAAA,SAAA,GAAG,CACxB,YAA0B,EAC1B,KAAK,GAAG,EAAE,KAC4B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACtC,IAAA,IAAI,CAAC,KAAK;QAAE,OAAO;;AAGnB,IAAA,MAAM,QAAQ,GAAG,IAAI,qBAAqB,EAAE,CAAC;;IAG7C,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AAEjD,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC,CAAA,CAAC;AAEY,UAAU,CAAA,UAAA,GAAG,CACzB,WAAmB,EACnB,UAAkB,EAClB,WAAoB,EACpB,KAAa,KACS,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;;IACtB,MAAM,MAAM,GAAc,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;IAElD,MAAM,QAAQ,GAAG,0DAA0D,CAAC;AAC5E,IAAA,MAAM,KAAK,GAAG,CAAA,kBAAA,EAAqB,WAAW,CAA4C,yCAAA,EAAA,UAAU,0CAA0C,CAAC;IAE/I,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;AAE/C,QAAA,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;AAEnC,QAAA,MAAM,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;AAEjC,QAAA,MAAM,IAAI,GAAG;YACX,KAAK;AACL,YAAA,SAAS,EAAE,IAAI;AACf,YAAA,SAAS,EAAE,IAAI;SAChB,CAAC;AAEF,QAAA,CAAA,EAAA,GAAA,MAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,QAAQ,MACX,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,CAAC,CAAC,IAAI,KAAI,EAAA,IAAA,EAAA,CAAA,CAAC,OAAA,CAAA,CAAA,EAAA,GAAA,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAK,SAAS,CAAA,EAAA,CAAC,MACpD,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,CAAC,CAAC,IAAI,KAAI;;AACjB,YAAA,IAAI,MAAM,GAAI,IAAI,CAAC,QAAqB,CAAC,WAAW,CAAC;YACrD,IAAI,CAAC,WAAW,EAAE;gBAChB,MAAM,UAAU,GAAG,eAAe,CAAC,IAAkB,EAAE,IAAI,CAAC,CAAC;AAC7D,gBAAA,MAAM,GAAK,UAAsB,CAAC,QAAqB,CAAC,WAAW,CAAC;AACrE,aAAA;AACD,YAAA,MAAM,OAAO,GAAGA,UAAC,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACrD,YAAA,MAAM,YAAY,GAAgB,IAAKA,UAAS,CAAC,OAAO,CAAC,OAAO,EAC3D,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CACJ,EAAA,YAAY,EACf,CAAC;YACH,CAAA,EAAA,GAAA,YAAY,KAAZ,IAAA,IAAA,YAAY,KAAZ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAY,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,EAAE,CAAC;AAClC,YAAA,YAAY,CAAC,SAAS,GAAG,SAAS,CAAC;AACnC,YAAA,YAAY,CAAC,WAAW,GAAG,WAAW,CAAC;AAEvC,YAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACjC,SAAC,CAAC,CAAC;AACL,QAAA,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;AACnB,KAAA;AAAC,IAAA,OAAO,GAAG,EAAE;AACZ,QAAA,MAAM,CAAC,KAAK,GAAG,oCAAoC,CAAC;AACpD,QAAA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACpB,KAAA;AAED,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA;;ACxIH,MAAM,aAAc,SAAQ,YAAY,CAAA;AACtC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAmBR,IAAM,CAAA,MAAA,GAAG,MAAS;AACvB,YAAA,OAAO,EAAE,CAAC;AACZ,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;AACzB,YAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAEzC,YAAA,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AACxC,SAAC,CAAC;KA1BD;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,wBAAwB,CAAC;KACjC;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC;KAC7B;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,kBAAkB,CAAC;KAC3B;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,gBAAgB,CAAC;KACzB;AAYM,IAAA,OAAO,aAAa,CACzB,UAA8B,EAC9B,OAAO,GAAG,KAAK,EAAA;;QAEf,MAAM,KAAK,GAAG,UAAU,CAAC;AACzB,QAAA,IAAI,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,SAAS,EAAE;AACpB,YAAA,IAAI,KAAK,CAAC,SAAS,CAAC,QAAQ,IAAI,OAAO,EAAE;AACvC,gBAAA,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;gBAC1B,CAAA,EAAA,GAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,EAAE,CAAC;AAC5B,aAAA;AAAM,iBAAA;AACL,gBAAA,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC1D,CAAA,EAAA,GAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,EAAE,CAAC;AAC3B,aAAA;AACF,SAAA;aAAM,IAAI,CAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,SAAS,MAAK,QAAQ,EAAE;AACxC,YAAA,IAAI,CAAA,CAAA,EAAA,GAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,KAAI,OAAO,EAAE;gBACxC,CAAA,EAAA,GAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,EAAE,CAAC;AAC5B,aAAA;AAAM,iBAAA;gBACL,CAAA,EAAA,GAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,EAAE,CAAC;AAC3B,aAAA;AACF,SAAA;KACF;;AAEa,aAAA,CAAA,gBAAgB,GAAG,CAAC,UAA8B,KAAU;AACxE,IAAA,aAAa,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAChD,CAAC;;AClCI,MAAM,aAAa,GAAG;AAC3B,IAAA,IAAI,EAAE,mBAAmB;AACzB,IAAA,QAAQ,EAAE,EAAE;CACb,CAAC;AAEF;;;;AAIG;AACH,MAAM,qBACJ,SAAQ,cAAc,CAAA;AAStB;;AAEG;AACH,IAAA,WAAA,CAAmB,IAAuB,EAAA;QACxC,KAAK,CAAC,IAAI,CAAC,CAAC;AAiBd;;AAEG;QACI,IAAkB,CAAA,kBAAA,GAAG,MAAW;YACrC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAI;AACtC,gBAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACvC,aAAC,CAAC,CAAC;AACH,YAAA,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAC1B,SAAC,CAAC;AAEF;;AAEG;AACK,QAAA,IAAA,CAAA,iBAAiB,GAAG,CAAC,OAAe,KAAY;AACtD,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa;iBAC7B,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,WAAW,CAAC;iBAC3B,OAAO,CAAC,OAAO,CAAC,CAAC;AACpB,YAAA,OAAO,KAAK,CAAC;AACf,SAAC,CAAC;AAEF;;AAEG;AACK,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,KAAkB,KAAa;YACpD,IAAI,CAAC,IAAI,CAAC,aAAa;AAAE,gBAAA,OAAO,KAAK,CAAC;AAEtC,YAAA,IAAI,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;AACnC,gBAAA,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;AAC3B,aAAA;YAED,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,CAAC;AAC1D,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,gBAAgB,GAAG,CAAC,KAAkB,KAAU;;AAErD,YAAA,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBAAE,OAAO;YAErC,MAAM,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AACtD,YAAA,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE;AACZ,gBAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAClC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AACnC,aAAA;AAAM,iBAAA;AACL,gBAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAClC,gBAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,aAAA;AACH,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,eAAe,GAAG,CAAC,MAA0B,KAAa;;YAC/D,QACE,CAAA,MAAM,KAAN,IAAA,IAAA,MAAM,uBAAN,MAAM,CAAE,SAAS,MAAK,QAAQ;AAC9B,iBAAA,CAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,MAAM,KAAN,IAAA,IAAA,MAAM,uBAAN,MAAM,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,0CAAE,YAAY,CAAA,EAC5C;AACJ,SAAC,CAAC;AAEF;;AAEG;QACI,IAA4B,CAAA,4BAAA,GAAG,MAAc;YAClD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAClD,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,OAAoB,KAAU;AAClD,YAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACrC,SAAC,CAAC;AAEF;;;;AAIG;AACI,QAAA,IAAA,CAAA,kBAAkB,GAAG,CAAC,GAAW,KAAU;YAChD,MAAM,qBAAqB,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAE7C,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;YAEhE,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC1E,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACvC,aAAA;AAED,YAAA,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC;AACxC,SAAC,CAAC;AAEF;;;;;AAKG;AACK,QAAA,IAAA,CAAA,oBAAoB,GAAG,CAC7B,qBAAkC,KACP;;AAE3B,YAAA,MAAM,SAAS,GAAQ,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,uBAAuB,CAAE,CAAC;;YAGtD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,KAAI;;gBAE3C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;AACnC,oBAAA,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC1B,IAAI,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;AAC/C,wBAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACvB,wBAAA,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;AACrB,qBAAA;AACH,iBAAC,CAAC,CAAC;AACL,aAAC,CAAC,CAAC;AAEH,YAAA,OAAO,SAAS,CAAC;AACnB,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,2BAA2B,GAAG,CAAC,GAAW,KAAU;;YACzD,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;AAEzD,YAAA,MAAM,qBAAqB,GAAgB,IAAI,GAAG,EAAE,CAAC;;YAErD,CAAA,EAAA,GAAA,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAC,CAAC,CAAC,KACvC,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,CACzC,CAAC;;YAGF,MAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;;AAGnE,YAAA,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;AAEtB,YAAA,IAAI,CAAC,uBAAuB,GAAG,SAAS,CAAC;AAC3C,SAAC,CAAC;AAmEF;;AAEG;AACK,QAAA,IAAA,CAAA,iBAAiB,GAAG,CAAC,KAAkB,EAAE,MAAc,KAAU;AACvE,YAAA,MAAM,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC;YAC9B,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;YACzD,MAAM,cAAc,GAAgB,EAAE,CAAC;YACvC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;gBAC1C,cAAc,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC;AACxD,aAAC,CAAC,CAAC;AACH,YAAA,IAAI,CAAC,OAAO,CAAc,cAAc,CAAC;AACvC,gBAAA,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;AAC3C,SAAC,CAAC;AAEF;;AAEG;QACK,IAA2B,CAAA,2BAAA,GAAG,CACpC,KAAqB,EACrB,MAAmB,EACnB,MAAc,KACZ;AACF,YAAA,IAAI,KAAK,KAAK,QAAQ,IAAI,MAAM,CAAC,cAAc,EAAE;gBAC/C,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC,cAAc,CAAC;AAC1E,aAAA;AACD,YAAA,IAAI,KAAK,KAAK,UAAU,IAAI,KAAK,KAAK,SAAS,EAAE;;AAE/C,gBAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAI;;AAE7D,oBAAA,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAChC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CACvC,CAAC;;AAEF,oBAAA,MAAM,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC;oBAC1C,MAAM,WAAW,GAAG,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC3D,oBAAA,cAAc,CAAC,OAAO,CAAC,CAAC,OAAO,KAAI;;;AAGjC,wBAAA,IAAI,WAAW,CAAC,OAAO,CAAC,KAAK,UAAU,EAAE;4BACvC,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;AAChE,4BAAA,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,GACjC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,UAAU,CACb,EAAA,EAAA,CAAC,OAAO,GAAG,MAAM,GAClB,CAAC;AACH,yBAAA;AACH,qBAAC,CAAC,CAAC;AACL,iBAAC,CAAC,CAAC;AACJ,aAAA;AACH,SAAC,CAAC;;QA5QA,IAAI,CAAC,YAAY,GAAG,IAAIA,UAAC,CAAC,YAAY,EAAgB,CAAC;;AAEvD,QAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;;AAEvB,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAE1B,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAEjB,QAAA,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAC1B,QAAA,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;;AAGlC,QAAA,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;KACzB;AA8ID;;AAEG;AACI,IAAA,YAAY,CAAC,EAAW,EAAA;AAC7B,QAAA,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACrB;AAED;;AAEG;IACI,YAAY,GAAA;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;AAED;;AAEG;AACI,IAAA,QAAQ,CAAC,KAAkB,EAAA;AAChC,QAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAClC,QAAA,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;AACrC,QAAA,OAAO,KAAK,CAAC;KACd;AAED;;AAEG;AACI,IAAA,WAAW,CAAC,KAAkB,EAAA;AACnC,QAAA,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KACtC;AAED;;AAEG;IACI,mBAAmB,GAAA;QACxB,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE,OAAO;AAChC,QAAA,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACnD,QAAA,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC7C,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAClD,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;KAC3B;AAED;;AAEG;AACI,IAAA,gBAAgB,CAAC,KAAkB,EAAA;QACxC,IAAI,IAAI,CAAC,aAAa;YAAE,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACvE,QAAA,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AAC3B,QAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;AAED;;AAEG;IACI,kBAAkB,GAAA;AACvB,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;KAC3B;AAED;;AAEG;IACI,mBAAmB,CAAC,GAAW,EAAE,GAAoB,EAAA;AAC1D,QAAA,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;KACzC;AAoDD;;AAEG;IACI,kBAAkB,GAAA;QACvB,MAAM,GAAG,GAAkB,aAAa,CAAC;QAEzC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,KAAI;;YAChC,MAAM,KAAK,GAAG,CAAgB,CAAC;AAC/B,YAAA,MAAM,OAAO,GAAG,KAAK,CAAC,SAAS,EAAa,CAAC;YAE7C,MAAM,UAAU,GAAG,0BAA0B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC7D,YAAA,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC;YAEhC,IAAI,KAAK,CAAC,YAAY;gBACpB,OAAO,CAAC,UAAU,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;YACvD,IAAI,KAAK,CAAC,UAAU;AAAE,gBAAA,OAAO,CAAC,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC;AAEpD,YAAA,MAAM,WAAW,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAC;AAClD,YAAA,IAAI,WAAW;AAAE,gBAAA,OAAO,CAAC,UAAU,CAAC,WAAW,GAAG,WAAW,CAAC;AAE9D,YAAA,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;gBAC/B,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,UAAoB,CAAC,CAAC;AAC7D,aAAA;AACD,YAAA,IAAI,KAAK,CAAC,SAAS,KAAK,SAAS;gBAC/B,OAAO,CAAC,UAAU,CAAC,eAAe,GAAG,KAAK,CAAC,WAAW,CAAC;AAExD,YAAA,GAAG,CAAC,QAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC5C,SAAC,CAAC,CAAC;AAEH,QAAA,OAAO,GAAG,CAAC;KACZ;AAED;;;;;AAKG;AACI,IAAA,kBAAkB,CAAC,OAAsB,EAAA;QAC9C,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;AACtD,QAAA,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;AACzB,QAAA,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,QAAA,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACrB,QAAA,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,IAAI,OAAO,CAAC,IAAI,KAAK,mBAAmB,IAAI,OAAO,CAAC,QAAQ,EAAE;AAC5D,YAAA,OAAO,CAAC,QAAQ;AACb,iBAAA,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KACT,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CACnE;AACA,iBAAA,OAAO,CAAC,CAAC,CAAC,KAAI;;gBACb,MAAM,IAAI,GAAG,0BAA0B,CAAC,CAAC,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;AAC5D,gBAAA,MAAM,KAAK,GAAG,yBAAyB,CAAC,CAAC,CAAC,CAAC;AAC3C,gBAAA,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;AAEhC,gBAAA,IAAI,MAAM,CAAC;gBACX,IAAI,KAAK,KAAK,SAAS,EAAE;oBACvB,MAAM,GAAG,IAAKA,UAAS,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC/C,iBAAA;qBAAM,IAAI,KAAK,KAAK,UAAU,EAAE;oBAC/B,MAAM,GAAG,IAAKA,UAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAChD,iBAAA;qBAAM,IAAI,KAAK,KAAK,QAAQ,EAAE;AAC7B,oBAAA,MAAM,UAAU,GAAG,CAAA,CAAA,EAAA,GAAA,CAAC,KAAD,IAAA,IAAA,CAAC,KAAD,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAC,CAAE,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,KAAI,EAAE,CAAC;oBACpD,IAAI,UAAU,CAAC,OAAO;AACpB,wBAAA,YAAY,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACpD,oBAAA,MAAM,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACR,WAAW,CAAA,EAAA,EACd,OAAO,EAAE,YAAY,CAAC,eAAe,EAAE,EACpC,CAAA,EAAA,UAAU,CACd,CAAC;oBAEF,MAAM,IAAI,GAAG,IAAIA,UAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACjC,oBAAA,MAAM,GAAG,IAAKA,UAAS,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;AACxD,iBAAA;AACD,gBAAA,IAAI,MAAM,EAAE;AACV,oBAAA,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;;;AAIzB,oBAAA,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;oBAEpC,IAAI,CAAA,EAAA,GAAA,CAAC,KAAA,IAAA,IAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,UAAU,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,YAAY,EAAE;wBAC/B,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC;wBAChD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,EAAE;AAC1C,4BAAA,YAAY,EAAE,KAAK;AACnB,4BAAA,SAAS,EAAE,KAAK;AACjB,yBAAA,CAAC,CAAC;AACJ,qBAAA;oBACD,IAAI,CAAC,CAAC,EAAE,EAAE;AACR,wBAAA,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC;AAC1B,qBAAA;oBACD,IAAI,MAAM,CAAC,QAAQ;AAAE,wBAAA,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;oBAC/C,IAAI,CAAC,2BAA2B,CAC9B,KAAK,EACL,MAAM,EACN,CAAC,CAAC,UAAoB,CACvB,CAAC;AACF,oBAAA,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;AACnD,oBAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACtB,oBAAA,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AACrC,iBAAA;AACH,aAAC,CAAC,CAAC;AACN,SAAA;QAED,OAAO;KACR;AAED;;AAEG;AACI,IAAA,SAAS,CACd,QAA+C,EAAA;QAE/C,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAEzC,MAAM,cAAc,GAMd,EAAE,CAAC;QAET,MAAM,WAAW,GAAG,CAClB,KAAkB,EAClB,SAAoB,EACpB,KAAK,GAAG,EAAE,KACR;AACF,YAAA,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC;AAChE,YAAA,cAAc,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,EACjB,SAAS,EACT,OAAO,EACL,OAAO;oBACN,MACI,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,YAAY,CACf,EAAA,EAAA,SAAS,EAAE,IAAI,EACf,SAAS,EAAE,IAAI,EACR,CAAA,EACX,OAAO;gBACP,YAAY,EAAA,EACT,KAAK,CAAA,CACR,CAAC;AACL,SAAC,CAAC;AAEF,QAAA,MAAM,UAAU,GAAG,CAAC,KAAkB,EAAE,SAAoB,KAAI;;AAC9D,YAAA,MAAM,EAAE,YAAY,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC;YACpC,MAAM,KAAK,GAAG,EAAE,CAAC;AACjB,YAAA,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;AAC/B,gBAAA,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAe,CAAC,CAAC;AAChD,aAAA;AACD,YAAA,cAAc,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,EACjB,SAAS,EACT,OAAO,EAAE,MACJ,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,aAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,OAAO,0CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAA,EAAA,EAChC,SAAS,EAAE,IAAI,EACf,SAAS,EAAE,IAAI,EACT,CAAA,EACR,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,YAAY,EACT,EAAA,KAAK,EACR,CAAC;AACL,SAAC,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,KAAI;YAChC,MAAM,KAAK,GAAG,CAAgB,CAAC;AAC/B,YAAA,MAAM,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;YAC5B,IAAI,SAAS,KAAK,QAAQ,EAAE;AAC1B,gBAAA,UAAU,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC9B,aAAA;AAAM,iBAAA;gBACL,IAAI,KAAK,CAAC,OAAO,EAAE;oBACjB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,KAAI;AAC1B,wBAAA,WAAW,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;AAC5B,qBAAC,CAAC,CAAC;AACJ,iBAAA;AAAM,qBAAA;AACL,oBAAA,MAAM,KAAK,GACT,SAAS,KAAK,SAAS;AACrB,0BAAE,EAAE,eAAe,EAAE,KAAK,CAAC,WAAW,EAAE;0BACtC,EAAE,CAAC;AACT,oBAAA,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AACtC,iBAAA;AACF,aAAA;AACH,SAAC,CAAC,CAAC;AAEH,QAAA,MAAM,CAAC,IAAI,GAAG,cAAc,CAAC;AAC7B,QAAA,OAAO,MAAM,CAAC;KACf;AAED;;AAEG;AACI,IAAA,WAAW,CAAC,MAA+B,EAAA;AAChD,QAAA,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAE1B,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;AAEvD,QAAA,MAAM,EAAE,IAAI,GAAG,EAAE,EAAE,GAAG,MAAM,CAAC;AAE5B,QAAA,IAAsB,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;;AACxC,YAAA,IAAI,UAAU,CAAC;;AAEf,YAAA,IAAI,KAAK,CAAC,SAAS,KAAK,QAAQ,EAAE;AAChC,gBAAA,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;AAC1B,gBAAA,MAAM,MAAM,GAAGA,UAAC,CAAC,MAAM,CACpB,OAAkB,CAAC,GAAG,EACtB,OAAkB,CAAC,GAAG,CACxB,CAAC;gBACF,IAAI,CAAA,EAAA,GAAA,KAAK,KAAL,IAAA,IAAA,KAAK,uBAAL,KAAK,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO;oBACzB,YAAY,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,OAAiB,CAAC,CAAC;AAEjE,gBAAA,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU;AACzC,sBAAE;wBACE,UAAU,EAAE,IAAIA,UAAC,CAAC,KAAK,CACrB,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAC1B,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAC3B;AACF,qBAAA;sBACD,EAAE,CAAC;AACP,gBAAA,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ;AACrC,sBAAE;wBACE,QAAQ,EAAE,IAAIA,UAAC,CAAC,KAAK,CACnB,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EACxB,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CACzB;AACF,qBAAA;sBACD,EAAE,CAAC;gBACP,MAAM,OAAO,GACR,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAK,CAAC,OAAO,GACb,UAAU,CAAA,EACV,QAAQ,CACZ,CAAC;AACF,gBAAA,MAAM,cAAc,GAAGA,UAAC,CAAC,IAAI,CAAC,MAAM,CAAC;oBACnC,OAAO;AACR,iBAAA,CAAC,CAAC;AAEH,gBAAA,MAAM,IAAI,GAAG,IAAI,cAAc,EAAE,CAAC;AAClC,gBAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,gBAAA,MAAM,MAAM,GAAG,IAAKA,UAAS,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;gBAE7D,UAAU,GAAG,MAAM,CAAC;AACrB,aAAA;AAAM,iBAAA;AACL,gBAAA,IAAI,OAAO,CAAC;AACZ,gBAAA,IAAI,IAAI,CAAC;gBACT,IAAI,KAAK,CAAC,SAAS,KAAK,UAAU,IAAI,KAAK,CAAC,SAAS,KAAK,SAAS,EAAE;AACnE,oBAAA,OAAO,GAAI,KAAK,CAAC,OAAqB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAS,KACtDA,UAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CACvB,CAAC;AACF,oBAAA,IAAI,GAAG,IAAKA,UAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;AACxD,iBAAA;gBACD,IAAI,KAAK,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,SAAS,KAAK,SAAS,EAAE;AAClE,oBAAA,OAAO,GAAI,KAAK,CAAC,OAAqB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAS,KACtDA,UAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CACvB,CAAC;AACF,oBAAA,IAAI,GAAG,IAAKA,UAAS,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;AACvD,iBAAA;gBAED,UAAU,GAAG,IAAI,CAAC;AACnB,aAAA;YAED,IAAI,KAAK,CAAC,YAAY,EAAE;AACtB,gBAAA,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,YAAY,EAAE;AACvC,oBAAA,YAAY,EAAE,KAAK;AACnB,oBAAA,SAAS,EAAE,KAAK;AACjB,iBAAA,CAAC,CAAC;AACH,gBAAA,UAAU,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;AAC9C,aAAA;AAED,YAAA,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AAEnC,YAAA,UAAU,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;YACvC,IAAI,UAAU,CAAC,QAAQ;AAAE,gBAAA,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACvD,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;AACrE,YAAA,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AAC5B,SAAC,CAAC,CAAC;KACJ;AACF;;ACplBD;;;;AAIG;AACH,MAAM,wBACJ,SAAQ,iBAAiB,CAAA;AAGzB;;AAEG;AACH,IAAA,WAAA,GAAA;AACE,QAAA,KAAK,EAAE,CAAC;KACT;AACD;;AAEG;IACI,OAAO,GAAA;QACZ,OAAO,wBAAwB,CAAC,IAAI,CAAC;KACtC;AAED;;AAEG;IACI,YAAY,GAAA;AACjB,QAAA,OAAO,eAAe,CAAC;KACxB;AAED;;AAEG;IACI,QAAQ,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;KAC5B;AAED;;AAEG;IACI,OAAO,GAAA;AACZ,QAAA,OAAO,8BAA8B,CAAC;KACvC;;AAjCa,wBAAI,CAAA,IAAA,GAAG,6BAA6B;;ACApD,MAAM,EAAE,GAAG,+BAA+B,CAAC;AAWrC,MAAO,0BAA2B,SAAQ,mBAAmB,CAAA;AAE/D;;AAEG;AACK,IAAA,SAAS,CAAC,KAAmC,EAAA;AACjD,QAAA,OAAO,IAAI,sBAAsB,CAAC,KAAK,CAAC,CAAC;KAC5C;AAED;;AAEG;AACK,IAAA,gBAAgB,CAAC,KAA0C,EAAA;AAC/D,QAAA,OAAO,IAAI,sBAAsB,CAAC,KAAK,CAAC,CAAC;KAC5C;AACJ,CAAA;AAED;;;;;AAKG;AACH,MAAM,sBAAuB,SAAQ,oBAAoB,CAAA;AAOrD,IAAA,WAAA,CAAmB,KAAmC,EAAA;QAClD,KAAK,CAAC,KAAK,CAAC,CAAC;KAChB;AAED;;AAEG;AACI,IAAA,OAAO,EAAE,GAAA;AACZ,QAAA,OAAO,EAAE,CAAC;KACb;AAED;;AAEG;IACI,MAAM,GAAA;AACT,QAAA,IAAG,IAAI,CAAC,OAAO,IAAI,SAAS,EAAE;AAC1B,YAAA,MAAM,KAAK,GAAmC,IAAI,CAAC,QAAQ,EAAG,CAAC;;YAE/D,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC,cAAc,CAAC;;AAE7C,YAAA,IAAI,MAAyB,CAAC;AAC9B,YAAA,MAAM,OAAO,GAA2B,KAAK,CAAC,OAAO,CAAC;AACtD,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC,gBAAA,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAC/B,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CACjC,CAAC;AACF,gBAAA,IAAI,OAAO,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AACzD,oBAAA,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAc,CAAC;AACpC,oBAAA,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAChD,oBAAA,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC;oBAC7B,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACzC,iBAAA;AAAM,qBAAA;AACL,oBAAA,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAW,CAAC;AACjC,oBAAA,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AAClC,oBAAA,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC;AACxB,iBAAA;AACF,aAAA;AACJ,SAAA;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;AAED;;AAEG;IACI,QAAQ,GAAA;AACX,QAAA,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;KACjD;AAED;;;;AAIG;AACI,IAAA,QAAQ,CAAC,KAAa,EAAA;QACzB,IAAG,IAAI,CAAC,OAAO,EAAE;AACb,YAAA,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AAC9B,SAAA;KACJ;AAED;;AAEG;AACI,IAAA,WAAW,CAAC,QAAiB,EAAA;QAChC,IAAG,IAAI,CAAC,OAAO,EAAE;YACb,IAAG,QAAQ,IAAI,IAAI,EAAE;gBACjB,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AACjD,aAAA;AAAM,iBAAA;AACH,gBAAA,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AAC5C,aAAA;AACJ,SAAA;KACJ;AACJ;;AC5HD;;AAEG;AAkCH;;;AAGG;AACI,MAAM,aAAa,GAAG,CAC3B,KAAa,EACb,IAAc,EACd,SAAiB,EACjB,YAAmC,EACnC,GAAG,GAAG,KAAK,KACO;IAClB,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACnD,IAAA,IAAI,KAAK;AAAE,QAAA,YAAY,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;IAC3E,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC9C,IAAA,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;AAC/B,IAAA,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;AAC7B,IAAA,OAAO,CAAC,KAAK,CAAC,mBAAmB,GAAG,gBAAgB,CAAC;AACrD,IAAA,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAClC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAI;QACxB,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC3C,QAAA,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,YAAY,CAAC;AACpC,QAAA,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,GAAG,CAAA,IAAA,EAAO,GAAG,CAAG,CAAA,CAAA,GAAG,GAAG,CAAC;AAClD,QAAA,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,WAAW,CAAC;AAC1C,QAAA,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC;AACzC,QAAA,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,SAAS,CAAC;AACtC,QAAA,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;AAC3B,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,cAAc,CAAC;AACpC,QAAA,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;QAC9B,IAAI,GAAG,KAAK,SAAS,EAAE;AACrB,YAAA,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,gBAAgB,CAAC;AACtC,SAAA;AACD,QAAA,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;AACxD,QAAA,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC5B,KAAC,CAAC,CAAC;AACH,IAAA,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AAEK,MAAM,YAAY,GAAG,CAC1B,IAAY,EACZ,OAAmB,EACnB,QAAiB,KACI;IACrB,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC7C,IAAA,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC;AACrB,IAAA,GAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AACvC,IAAA,IAAI,QAAQ,EAAE;QACZ,GAAG,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;AAChD,KAAA;AAAM,SAAA;AACL,QAAA,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AACjC,KAAA;AACD,IAAA,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,IAAI,0BAA0B,EAAE,CAAC;AAEnD;;AAEG;AACI,MAAM,aAAa,GAAiB;AACzC,IAAA,KAAK,EAAE;AACL,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,KAAK,EAAE,QAAQ;AAChB,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,gBAAgB;AAClC,KAAA;AACD,IAAA,UAAU,EAAE;QACV,KAAK,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAE;QAClD,KAAK,EAAE,SAAS,CAAC,mBAAmB;AACrC,KAAA;AACD,IAAA,WAAW,EAAE;QACX,KAAK,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,aAAa,EAAE;QACpD,KAAK,EAAE,SAAS,CAAC,QAAQ;AAC1B,KAAA;AACD,IAAA,eAAe,EAAE;AACf,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,kBAAkB;AACxB,YAAA,KAAK,EAAE,kBAAkB;AAC1B,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,gBAAgB;AAClC,KAAA;AACD,IAAA,MAAM,EAAE;QACN,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE;QAC1C,KAAK,EAAE,SAAS,CAAC,mBAAmB;AACrC,KAAA;AACD,IAAA,aAAa,EAAE;AACb,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,KAAK,EAAE,QAAQ;AAChB,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,gBAAgB;AAClC,KAAA;AACD,IAAA,UAAU,EAAE;AACV,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,KAAK,EAAE,8BAA8B;AACtC,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,gBAAgB;AAClC,KAAA;AACD,IAAA,OAAO,EAAE;AACP,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,KAAK,EAAE,UAAU;AAClB,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,WAAW;AAC7B,KAAA;AACD,IAAA,aAAa,EAAE;AACb,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,KAAK,EAAE,aAAa;AACrB,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,gBAAgB;AAClC,KAAA;AACD,IAAA,eAAe,EAAE;AACf,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,mBAAmB;AACzB,YAAA,KAAK,EAAE,YAAY;AACpB,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,gBAAgB;AAClC,KAAA;AACD,IAAA,SAAS,EAAE;AACT,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,YAAY;AACnB,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,aAAa;AAC/B,KAAA;AACD,IAAA,oBAAoB,EAAE;AACpB,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,kBAAkB;AACzB,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,aAAa;AAC/B,KAAA;AACD,IAAA,UAAU,EAAE;AACV,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,aAAa;AACpB,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,aAAa;AAC/B,KAAA;AACD,IAAA,oBAAoB,EAAE;AACpB,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,kBAAkB;AACxB,YAAA,KAAK,EACH,0EAA0E;AAC7E,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,eAAe;AACjC,KAAA;AACD,IAAA,aAAa,EAAE;AACb,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,gBAAgB;AACtB,YAAA,KAAK,EAAE,gEAAgE;AACxE,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,eAAe;AACjC,KAAA;AACD,IAAA,kBAAkB,EAAE;AAClB,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,qBAAqB;AAC3B,YAAA,KAAK,EACH,yEAAyE;AAC5E,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,eAAe;AACjC,KAAA;AACD,IAAA,aAAa,EAAE;AACb,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,gBAAgB;AACtB,YAAA,KAAK,EACH,0KAA0K;AAC7K,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,eAAe;AACjC,KAAA;AACD,IAAA,WAAW,EAAE;AACX,QAAA,KAAK,EAAE;AACL,YAAA,IAAI,EAAE,cAAc;AACpB,YAAA,KAAK,EACH,4IAA4I;AAC/I,SAAA;QACD,KAAK,EAAE,SAAS,CAAC,eAAe;AACjC,KAAA;CACF;;AC/MD;;;;;;AAMG;AACH,MAAM,oBAAoB,CAAA;AAKxB,IAAA,WAAA,CAAmB,KAAwB,EAAA;QAMpC,IAAY,CAAA,YAAA,GAAG,MAAyB;YAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC;AAC5C,SAAC,CAAC;QAEK,IAAiB,CAAA,iBAAA,GAAG,MAAyB;YAClD,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC;AAC5C,SAAC,CAAC;AAEK,QAAA,IAAA,CAAA,cAAc,GAAG,CAAC,IAAgB,KAAU;YACjD,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;AACtD,SAAC,CAAC;AAfA,QAAA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;AACvC,QAAA,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;KAC9B;AAaF;;AChCD;;;;;;AAMG;AACH,MAAM,eAAe,CAAA;AAGnB,IAAA,WAAA,CAAmB,KAAmB,EAAA;AACpC,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,oBAAoB,CAAC;YACpC,UAAU,EAAE,KAAK,CAAC,UAAU;AAC5B,YAAA,OAAO,EAAE,IAAI;AACd,SAAA,CAAC,CAAC;KACJ;AACF;;ACnBD;;AAEG;AACH,MAAM,gBAAgB,CAAA;;AAElB;;AAEC;AACW,gBAAA,CAAA,oBAAoB,GAAG,CAAC,QAAgB,KAAY;AAChE,IAAA,IAAI,CAAC,QAAQ;AAAE,QAAA,OAAO,EAAE,CAAC;IACzB,OAAO,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF;;AAEG;AACW,gBAAA,CAAA,sBAAsB,GAAG,CAAC,OAAe,KAAY;AACjE,IAAA,IAAI,CAAC,OAAO;AAAE,QAAA,OAAO,EAAE,CAAC;IACxB,OAAO,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAC5C,CAAC;;ACbH,MAAM,gBACJ,SAAQ,oBAAoB,CAAA;AAQ5B,IAAA,WAAA,CAAmB,KAAwB,EAAA;;QACzC,KAAK,CAAC,KAAK,CAAC,CAAC;AA8Df;;;AAGG;QACI,IAAe,CAAA,eAAA,GAAG,MAAW;AAClC,YAAA,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC;AACxB,YAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC1B,YAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC9B,SAAC,CAAC;AACF;;;AAGG;QACI,IAAe,CAAA,eAAA,GAAG,MAAW;AAClC,YAAA,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC;gBAAE,OAAO;AACrC,YAAA,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC;AACxB,YAAA,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;AACvB,YAAA,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;AAC3B,SAAC,CAAC;AASF;;AAEG;AACI,QAAA,IAAA,CAAA,sBAAsB,GAAG,CAAC,CAAa,KAAU;AACtD,YAAA,MAAM,EAAE,GAAI,CAAC,CAAC,MAA4B,CAAC,KAAK,CAAC;AACjD,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AAEvC,YAAA,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;YAEzB,IAAI,CAAC,cAAc,CAAC,UAAU,KAAA,IAAA,IAAV,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAV,UAAU,CAAE,SAAS,CAAC,CAAC;AAC7C,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,sBAAsB,GAAG,CAAC,EAAU,KAAU;;AACnD,YAAA,IAAI,CAAC,EAAE;gBAAE,OAAO;AAChB,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AACvC,YAAA,IAAI,UAAU;AAAE,gBAAA,UAAU,CAAC,UAAU,GAAG,EAAE,CAAC;YAE3C,MAAM,IAAI,GACR,CAAA,CAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,UAAU,EAAE,0CAAE,cAAc,EAAE,KAAI,EAAE,CAAC;;YAGvE,IAAI,YAAY,GAAG,IAAI,CAAC;;YAExB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAI;;gBAEpC,YAAY,GAAG,YAAY,CAAC,MAAM,CAChC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAClD,CAAC;AACJ,aAAC,CAAC,CAAC;AAEH,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;YACnC,MAAM,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;YAEjE,IAAI,SAAS,GAAG,EAAE,CAAC;AACnB,YAAA,IAAI,KAAK,EAAE;gBACT,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;oBACjC,SAAS,IAAI,GAAG,GAAG,CAAA,EAAA,EAAK,KAAK,CAAC,GAAG,CAAC,CAAA,MAAA,CAAQ,CAAC;AAC7C,iBAAC,CAAC,CAAC;AACJ,aAAA;AAED,YAAA,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAC3B,IAAI,CAAC,cAAc,CAAC,UAAU,KAAA,IAAA,IAAV,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAV,UAAU,CAAE,SAAS,CAAC,CAAC;AAC7C,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,uBAAuB,GAAG,CAAC,CAAa,KAAU;YACvD,IAAI,CAAC,UAAU,CAAE,CAAC,CAAC,MAA8B,CAAC,KAAK,CAAC,CAAC;AAC3D,SAAC,CAAC;AAEF;;;;AAIG;AACI,QAAA,IAAA,CAAA,UAAU,GAAG,CAAC,SAAiB,KAAU;AAC9C,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACvC,MAAM,YAAY,GAAG,gBAAgB,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;YAEtE,MAAM,MAAM,GAAG,UAAU,KAAV,IAAA,IAAA,UAAU,uBAAV,UAAU,CAAE,QAAQ,EAAE,CAAC;AACtC,YAAA,IAAI,MAAM,EAAE;AACV,gBAAA,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;AACjC,aAAA;AAAM,iBAAA;gBACL,UAAU,KAAA,IAAA,IAAV,UAAU,KAAV,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAE,SAAS,CAAC,YAAY,EAAE;AAClC,oBAAA,YAAY,EAAE,KAAK;AACnB,oBAAA,SAAS,EAAE,KAAK;AACjB,iBAAA,CAAC,CAAC;AACJ,aAAA;;AAED,YAAA,IAAI,UAAU;AAAE,gBAAA,UAAU,CAAC,YAAY,GAAG,YAAY,CAAC;AACvD,YAAA,IAAI,UAAU,KAAV,IAAA,IAAA,UAAU,KAAV,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAE,QAAQ;AAAE,gBAAA,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;AAC9D,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,oBAAoB,GAAG,CAAC,kBAAkB,GAAG,KAAK,KAAU;AACjE,YAAA,IAAI,kBAAkB,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC;gBAAE,OAAO;AAC3D,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AACvC,YAAA,IAAI,CAAC,sBAAsB,CAAC,CAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAV,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAE,UAAU,KAAI,EAAE,CAAC,CAAC;AAC5D,SAAC,CAAC;AA3KA,QAAA,IAAI,CAAC,IAAI;AACP,YAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,CAAC,UAAU;AACb,iBAAA,OAAO,EAAE;AACT,iBAAA,MAAM,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CACP,QAAQ,EAAE,MACV,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CACZ,cAAc,EAAE,KAAI,EAAE,CAAC;AAE7B,QAAA,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AAEzB,QAAA,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AACvB,QAAA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,QAAA,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;KACzB;AAED;;AAEG;IACI,YAAY,GAAA;AACjB,QAAA,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AACvB,QAAA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,QAAA,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;KACzB;AAED;;AAEG;AACI,IAAA,aAAa,CAAC,GAAW,EAAA;QAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AAClC,QAAA,OAAO,GAAG,CAAC;KACZ;AAED;;AAEG;AACI,IAAA,eAAe,CAAC,GAAW,EAAA;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AACtC,QAAA,OAAO,KAAK,CAAC;KACd;AAED;;AAEG;IACI,aAAa,CAAC,GAAW,EAAE,KAAa,EAAA;AAC7C,QAAA,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa;YAAE,OAAO;AACrC,QAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KAC/B;AAED;;;;;;AAMG;IACI,eAAe,CAAC,GAAW,EAAE,KAAmB,EAAA;AACrD,QAAA,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa;YAAE,OAAO;AACrC,QAAA,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACjC;AAsBD;;AAEG;IACI,iBAAiB,GAAA;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC;KAC5B;AAuFF;;ACtLD,MAAM,WAAY,SAAQ,eAAe,CAAA;AAGvC,IAAA,WAAA,CAAmB,KAAmB,EAAA;QACpC,KAAK,CAAC,KAAK,CAAC,CAAC;;AAUf;;AAEG;QACK,IAAoB,CAAA,oBAAA,GAAG,MAAoB;AACjD,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;AAE5B,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;AACpB,kBAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;kBACzD,EAAE,CAAC;AAEP,YAAA,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,KAAK,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACnC,aAAa,CAAC,KAAK,CAAC,KAAK,KAC5B,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,sBAAsB,EACjD,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC,IAC9C,CAAC;AAEH,YAAA,OAAO,MAAM,CAAC;AAChB,SAAC,CAAC;AAEF;;AAEG;QACK,IAAqB,CAAA,qBAAA,GAAG,MAAoB;AAClD,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAE5B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC;AAE7C,YAAA,IAAI,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;YACrE,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;AAErC,YAAA,MAAM,MAAM,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,CACxC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,UAAU,CAAC,KAAK,CACjC,EAAA,EAAA,cAAc,EAAE,CAAC,CAAQ,KACvB,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAE,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,EACzE,OAAO,EAAE,MAAM,EACf,WAAW,EAAE,SAAS,IACtB,CAAC;AAEH,YAAA,OAAO,MAAM,CAAC;AAChB,SAAC,CAAC;AAEK,QAAA,IAAA,CAAA,gBAAgB,GAAG,CAAC,IAAoB,KAAU;;YACvD,MAAM,iBAAiB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;;AAErD,YAAA,MAAM,mBAAmB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACxD,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,MAAM,EAAU,CAAC,CAAC;AACvD,YAAA,mBAAmB,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;YACnD,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC,CAAC;;AAE7D,YAAA,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7C,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAU,CAAC,CAAC;AAC3C,YAAA,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;AACvC,YAAA,OAAO,CAAC,QAAQ,CAAC,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,KAAI,EAAE,CAAC,CAAC;;YAE9D,MAAM,SAAS,GAAG,aAAa,CAAC,WAAW,CAAC,KAAK,CAC5C,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,WAAW,CAAC,KAAK,CAAA,EAAA,EAClC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAA,CAAA,CAClD,CAAC;YACH,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAU,CAAC,CAAC;AAC7C,YAAA,SAAS,CAAC,QAAQ,CAChB,gBAAgB,CAAC,sBAAsB,EACpC,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,EAAE,KAAI,EAAE,EAC3D,CACF,CAAC;AACF,YAAA,SAAS,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;AAC3C,SAAC,CAAC;;;AAMM,QAAA,IAAA,CAAA,UAAU,GAAG,CAAC,CAAa,EAAE,KAAa,KAAU;;AAC1D,YAAA,MAAM,GAAG,GAAI,CAAC,CAAC,MAA4B,CAAC,KAAK,CAAC;YAClD,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AACrC,YAAA,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,CAAC,CAAC;AAClE,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,YAAY,GAAG,CAAC,CAAa,EAAE,KAAa,KAAU;;AAC5D,YAAA,MAAM,GAAG,GAAI,CAAC,CAAC,MAA4B,CAAC,KAAK,CAAC;YAClD,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AACvC,YAAA,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE,CAAC;AAClC,YAAA,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,CAAC,CAAC;AAClE,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,iBAAiB,GAAG,CAAC,IAAoB,KAAU;AACxD,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;AAE5B,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;AACpB,kBAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;kBACzD,EAAE,CAAC;AAEP,YAAA,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,EAAE,EAAE;gBAC7D,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;;gBAEnD,MAAM,QAAQ,GAAG,aAAa,CAAC,aAAa,CAAC,KAAK,iCAC7C,aAAa,CAAC,aAAa,CAAC,KAAK,KACpC,cAAc,EAAE,CAAC,CAAa,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,EAC5D,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC,EAAA,CAAA,CAC9C,CAAC;;AAGH,gBAAA,IAAI,SAAS,GACX,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;gBACpE,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;;AAE3C,gBAAA,MAAM,UAAU,GAAG,aAAa,CAAC,eAAe,CAAC,KAAK,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACjD,aAAa,CAAC,eAAe,CAAC,KAAK,KACtC,cAAc,EAAE,CAAC,CAAa,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,EAC9D,OAAO,EAAE,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,IAC3B,CAAC;;gBAGH,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC/C,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAU,CAAC,CAAC;gBAC5C,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAU,CAAC,CAAC;AAE9C,gBAAA,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AAC9B,gBAAA,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;AACxD,aAAA;AACH,SAAC,CAAC;QAEM,IAAS,CAAA,SAAA,GAAG,MAAW;;AAC7B,YAAA,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC;AAC7B,YAAA,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,CAAC,CAAC;AAClE,SAAC,CAAC;QAEM,IAAY,CAAA,YAAA,GAAG,MAAW;;AAChC,YAAA,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC;AAC7B,YAAA,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE,CAAC;AAClC,YAAA,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,CAAC,CAAC;AAClE,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,kBAAkB,GAAG,CAAC,IAAoB,KAAU;YACzD,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;YAE5C,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC9C,YAAA,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;AAC7B,YAAA,MAAM,YAAY,GAAG,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AAC1E,YAAA,MAAM,eAAe,GAAG,YAAY,CAClC,eAAe,EACf,IAAI,CAAC,YAAY,EACjB,QAAQ,CACT,CAAC;AACF,YAAA,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;AAClC,YAAA,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;AACrC,YAAA,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAC5B,SAAC,CAAC;AAhKA,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,gBAAgB,CAAC;YAChC,UAAU,EAAE,KAAK,CAAC,UAAU;AAC5B,YAAA,OAAO,EAAE,IAAI;AACd,SAAA,CAAC,CAAC;KACJ;AA+JF;;ACtKD,MAAM,kBACJ,SAAQ,oBAAoB,CAAA;AAK5B,IAAA,WAAA,CAAmB,KAAwB,EAAA;QACzC,KAAK,CAAC,KAAK,CAAC,CAAC;AAoBf;;AAEG;AACI,QAAA,IAAA,CAAA,cAAc,GAAG,CAAC,OAAO,GAAG,EAAE,KAAwB;;YAC3D,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;YACnD,MAAM,UAAU,GAAG,WAAW,KAAA,IAAA,IAAX,WAAW,KAAX,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAW,CAAE,UAAU,CAAC;AAE3C,YAAA,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACrC,IAAI,MAAM,GAAG,UAAU,CAAC;YAExB,IAAI,CAAA,UAAU,KAAA,IAAA,IAAV,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAV,UAAU,CAAE,IAAI,MAAK,QAAQ,EAAE;gBACjC,UAAU,GAAG,UAAU,CAAC;AACxB,gBAAA,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC;AAC7B,aAAA;AAED,YAAA,MAAM,cAAc,GAAG,CAAA,MAAA,CAAA,EAAA,GAAA,UAAU,aAAV,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAV,UAAU,CAAE,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,0CAAE,OAAO,KAAI,EAAE,CAAC;AAChE,YAAA,MAAM,cAAc,GACf,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,cAAc,CACd,EAAA,OAAO,CACX,CAAC;YAEF,MAAM,UAAU,GAAG,IAAIA,UAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC9C,YAAA,IAAI,MAAM;AAAE,gBAAA,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACvC,YAAA,IAAI,MAAM;AAAE,gBAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YAC/C,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;gBACzC,KAAK,KAAA,IAAA,IAAL,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,OAAO,CAAC,UAAU,CAAC,CAAC;AAC3B,gBAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AACpC,aAAC,CAAC,CAAC;YACH,IAAI,CAAA,UAAU,KAAV,IAAA,IAAA,UAAU,uBAAV,UAAU,CAAE,IAAI,MAAK,QAAQ;AAAE,gBAAA,UAAU,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;AAEzE,YAAA,OAAO,MAAM,CAAC;AAChB,SAAC,CAAC;AAEF;;;;AAIG;AACI,QAAA,IAAA,CAAA,gBAAgB,GAAG,CAAC,IAAY,KAAU;YAC/C,IAAI,CAAC,cAAc,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;AAEvC,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,YAAA,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AAChC,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,gBAAgB,GAAG,CAAC,CAAQ,EAAE,UAAqB,KAAU;;AAClE,YAAA,MAAM,UAAU,GACd,CAAA,MAAA,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,WAAW,0CAAE,UAAU,KAAI,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5E,YAAA,MAAM,WAAW,GAAG,CAAA,MAAA,CAAA,EAAA,GAAA,UAAU,aAAV,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAV,UAAU,CAAE,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,0CAAE,OAAO,KAAI,EAAE,CAAC;YAC7D,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,UAAU,CAAC;YACpE,MAAM,GAAG,GAAG,MAAM,CAAE,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC;AACzD,YAAA,UAAU,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;AAC7B,YAAA,IAAI,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;AACtC,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,aAAa,GAAG,CAAC,CAAa,KAAU;AAC7C,YAAA,MAAM,OAAO,GAAI,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC;AACrD,YAAA,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AAC/B,YAAA,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AAChC,SAAC,CAAC;QAnFA,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;AACnC,QAAA,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;KACtC;AAED;;AAEG;IACI,eAAe,GAAA;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC;KAC1B;AAED;;AAEG;AACI,IAAA,eAAe,CAAC,IAAY,EAAA;AACjC,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;KAC1B;AAqED;;AAEG;AACI,IAAA,gBAAgB,CAAC,OAAe,EAAA;AACrC,QAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;KAC5B;AACF;;ACxGD,MAAM,aACJ,SAAQ,eAAe,CAAA;AAKvB,IAAA,WAAA,CAAmB,KAAmB,EAAA;QACpC,KAAK,CAAC,KAAK,CAAC,CAAC;AA8Bf;;AAEG;AACK,QAAA,IAAA,CAAA,sBAAsB,GAAG,CAAC,UAAqB,KAAiB;;YACtE,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;AAE7C,YAAA,MAAM,WAAW,GAAG,CAAA,MAAA,CAAA,EAAA,GAAA,UAAU,aAAV,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAV,UAAU,CAAE,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,0CAAE,OAAO,KAAI,EAAE,CAAC;YAC7D,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,UAAU,CAAC;YACpE,MAAM,KAAK,GAAG,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAE3C,YAAA,MAAM,YAAY,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC;AAClD,gBAAA,KAAK,EAAE,CAAS,MAAA,EAAA,UAAU,CAAC,WAAW,EAAE,CAAU,QAAA,CAAA;AAClD,gBAAA,QAAQ,EAAE,CAAC;AACX,gBAAA,QAAQ,EAAE,EAAE;AACZ,gBAAA,cAAc,EAAE,CAAC,CAAQ,KAAK,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,EAAE,UAAU,CAAC;AACxE,gBAAA,YAAY,EAAE,KAAK;AACpB,aAAA,CAAC,CAAC;AAEH,YAAA,OAAO,YAAY,CAAC,MAAM,EAAE,CAAC;AAC/B,SAAC,CAAC;AAEF;;AAEG;QACK,IAAmB,CAAA,mBAAA,GAAG,MAC5B,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;AAEnC;;AAEG;QACK,IAAmB,CAAA,mBAAA,GAAG,MAC5B,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;AAEnC;;AAEG;QACK,IAAwB,CAAA,wBAAA,GAAG,MAAkB;YACnD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;AACvD,YAAA,MAAM,QAAQ,GAAG,CAAC,CAAQ,KAAI;AAC5B,gBAAA,MAAM,YAAY,GAAI,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC;AAC5D,gBAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC;AAE7D,gBAAA,IAAI,QAAQ,EAAE;oBACZ,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACtD,iBAAA;AACH,aAAC,CAAC;AACF,YAAA,MAAM,SAAS,GAAG,SAAS,CAAC,4BAA4B,EAAE,CAAC;YAE3D,MAAM,MAAM,GAAG,aAAa,CAAC,aAAa,CAAC,KAAK,CAC3C,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,aAAa,CAAC,KAAK,CAAA,EAAA,EACpC,YAAY,EAAE,SAAS,EACvB,cAAc,EAAE,QAAQ,EAAA,CAAA,CACxB,CAAC;AAEH,YAAA,OAAO,MAAM,CAAC,MAAM,EAAE,CAAC;AACzB,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,gBAAgB,GAAG,CAAC,IAAoB,KAAU;;AAEvD,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC3C,YAAA,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAE5B,MAAM,QAAQ,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,CACvC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,OAAO,CAAC,KAAK,CAAA,EAAA,EAC9B,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,EAAA,CAAA,CAChC,CAAC;YAEH,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAU,CAAC,CAAC;AAC5C,YAAA,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAEtB,YAAA,MAAM,aAAa,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;AACtD,YAAA,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;YAEhC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC7C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;AAC/C,SAAC,CAAC;AA1GA,QAAA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;AAEnC,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,kBAAkB,CAAC;YAClC,UAAU,EAAE,KAAK,CAAC,UAAU;AAC5B,YAAA,OAAO,EAAE,IAAI;AACd,SAAA,CAAC,CAAC;KACJ;AAED;;AAEG;IACK,iBAAiB,GAAA;;AACvB,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QACrC,MAAM,OAAO,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,0CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAC;AAC3E,QAAA,IAAI,OAAO;AAAE,YAAA,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC;QAChD,MAAM,QAAQ,GAAa,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACjD,QAAA,MAAM,GAAG,GAAG,aAAa,CACvB,WAAW,EACX,QAAQ,EACR,WAAW,EACX,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAC3B,IAAI,CACL,CAAC;AACF,QAAA,OAAO,GAAG,CAAC;KACZ;AAiFF;;ACtHD,MAAM,gBACJ,SAAQ,oBAAoB,CAAA;AAQ5B,IAAA,WAAA,CAAmB,KAAwB,EAAA;QACzC,KAAK,CAAC,KAAK,CAAC,CAAC;AAgCf;;AAEG;AACI,QAAA,IAAA,CAAA,iBAAiB,GAAG,CAAC,KAAa,KAAU;AACjD,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AACvC,YAAA,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AAC3B,YAAA,IAAI,UAAU,KAAV,IAAA,IAAA,UAAU,KAAV,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAE,QAAQ;AAAE,gBAAA,UAAU,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;gBACzC,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AAC7B,aAAC,CAAC,CAAC;AACL,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,kBAAkB,GAAG,CAAC,CAAQ,KAAU;YAC7C,MAAM,MAAM,GAAG,MAAM,CAAE,CAAC,CAAC,MAA4B,CAAC,KAAK,CAAC,CAAC;AAC7D,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AACvC,YAAA,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;AAC7B,YAAA,IAAI,UAAU,KAAV,IAAA,IAAA,UAAU,KAAV,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAE,QAAQ;AAAE,gBAAA,UAAU,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAC1D,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;gBACzC,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;AAC9B,aAAC,CAAC,CAAC;AACL,SAAC,CAAC;AArDA,QAAA,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;AAEhC,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAE/B,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;KACxC;AAED;;AAEG;IACI,gBAAgB,GAAA;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC;KAC3B;AAED;;AAEG;IACI,iBAAiB,GAAA;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC;KAC5B;AAED;;AAEG;AACI,IAAA,qBAAqB,CAAC,GAAY,EAAA;AACvC,QAAA,IAAI,CAAC,kBAAkB,GAAG,GAAG,CAAC;KAC/B;AA0BF;;ACjED,MAAM,WACJ,SAAQ,eAAe,CAAA;AAIvB,IAAA,WAAA,CAAmB,KAAmB,EAAA;QACpC,KAAK,CAAC,KAAK,CAAC,CAAC;AAQf;;AAEG;QACI,IAAuB,CAAA,uBAAA,GAAG,MAAkB;AACjD,YAAA,MAAM,QAAQ,GAAG,CAAC,CAAQ,KAAI;AAC5B,gBAAA,MAAM,GAAG,GAAI,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC;AACnD,gBAAA,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;AACxC,aAAC,CAAC;AACF,YAAA,MAAM,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAE1C,MAAM,MAAM,GAAG,aAAa,CAAC,kBAAkB,CAAC,KAAK,CAChD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,kBAAkB,CAAC,KAAK,CAAA,EAAA,EACzC,YAAY,EAAE,kBAAkB,EAChC,cAAc,EAAE,QAAQ,EAAA,CAAA,CACxB,CAAC;AAEH,YAAA,OAAO,MAAM,CAAC,MAAM,EAAE,CAAC;AACzB,SAAC,CAAC;AAEF;;;;;AAKG;AACI,QAAA,IAAA,CAAA,gBAAgB,GAAG,CAAC,IAAoB,KAAU;;;AAEvD,YAAA,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YACzC,MAAM,cAAc,GAAG,aAAa,CAAC,eAAe,CAAC,KAAK,CACrD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,eAAe,CAAC,KAAK,KACtC,OAAO,EAAE,aAAa,EACtB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAA,CAAA,CACrC,CAAC;YACH,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,EAAU,CAAC,CAAC;AAClD,YAAA,cAAc,CAAC,QAAQ,CACrB,CAAA,MAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,0CAAE,MAAM;AACxC,gBAAA,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,CACjC,CAAC;;AAGF,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC5C,YAAA,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAC/B,SAAC,CAAC;AAhDA,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,gBAAgB,CAAC;YAChC,UAAU,EAAE,KAAK,CAAC,UAAU;AAC5B,YAAA,OAAO,EAAE,IAAI;AACd,SAAA,CAAC,CAAC;KACJ;AA8CD;;AAEG;IACK,iBAAiB,GAAA;;QACvB,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACnD,YAAY,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;QAClE,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AACpD,QAAA,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC1C,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAC,KACvB,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAE,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC;QACrE,WAAW,CAAC,KAAK,GAAG,MAAM,CACxB,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,KAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAC3E,CAAC;AACF,QAAA,YAAY,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;AACtC,QAAA,OAAO,YAAY,CAAC;KACrB;AACF;;ACtED,MAAM,YAAa,SAAQ,eAAe,CAAA;AAKxC,IAAA,WAAA,CAAmB,KAAmB,EAAA;;QACpC,KAAK,CAAC,KAAK,CAAC,CAAC;AAOf;;AAEG;QACI,IAAsB,CAAA,sBAAA,GAAG,MAA4B;AAC1D,YAAA,MAAM,EAAE,YAAY,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YAExD,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;YACjD,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;YAEjD,IAAI,KAAK,GAAmC,IAAI,CAAC;AACjD,YAAA,IAAI,SAAS,KAAT,IAAA,IAAA,SAAS,uBAAT,SAAS,CAAE,YAAY,EAAE;gBAAE,KAAK,GAAG,SAAuB,CAAC;AAC/D,YAAA,IAAI,SAAS,KAAT,IAAA,IAAA,SAAS,uBAAT,SAAS,CAAE,YAAY,EAAE;gBAAE,KAAK,GAAG,SAAuB,CAAC;AAE/D,YAAA,IAAI,CAAC,KAAK;AAAE,gBAAA,OAAO,IAAI,CAAC;YAExB,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC,uBAAuB,EAAE,CAAC;YAEvE,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACrD,YAAA,MAAM,YAAY,GAAG,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;gBACjD,cAAc,EAAE,CAAC,CAAQ,KACvB,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,WAAW,CAAC,MAAM,CAAE,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC;AAClE,gBAAA,KAAK,EAAE,cAAc;AACrB,gBAAA,YAAY,EAAE,KAAK,CAAC,YAAY,EAAE;AAClC,gBAAA,QAAQ,EAAE,YAAY;AACtB,gBAAA,QAAQ,EAAE,YAAY;AACvB,aAAA,CAAC,CAAC;YACH,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;AAElD,YAAA,MAAM,oBAAoB,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;AAC/D,YAAA,cAAc,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;AAEjD,YAAA,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACtD,YAAA,OAAO,cAAc,CAAC;AACxB,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,eAAe,GAAG,CAAC,CAAQ,KAAU;YAC3C,MAAM,GAAG,GAAG,MAAM,CAAE,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC;AACzD,YAAA,MAAM,CAAC,eAAe,GAAG,GAAG,CAAC;AAC/B,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,QAAQ,GAAG,CAAC,CAAQ,KAAU;AACpC,YAAA,MAAM,KAAK,GAAI,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC;AACrD,YAAA,IAAI,KAAK,EAAE;AACT,gBAAA,MAAM,GAAG,GAAG,MAAM,CAAC,eAAe,CAAC;AACnC,gBAAA,MAAM,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;AAClC,gBAAA,MAAM,eAAe,GAAG,aAAa,CAAC,oBAAoB,CAAC,KAAK,CAAC;AAC/D,oBAAA,KAAK,EAAE,kBAAkB;oBACzB,cAAc,EAAE,CAAC,CAAQ,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;AACrD,oBAAA,QAAQ,EAAE,GAAG;oBACb,QAAQ,EAAE,GAAG,GAAG,CAAC;AACjB,oBAAA,YAAY,EAAE,MAAM,CAAC,GAAG,IAAI,EAAE,CAAC;AAC/B,oBAAA,IAAI,EAAE,IAAI;AACX,iBAAA,CAAC,CAAC;gBACH,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;AACjE,aAAA;AAAM,iBAAA;AACL,gBAAA,MAAM,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC;AACxD,gBAAA,IAAI,UAAU;AAAE,oBAAA,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAClE,gBAAA,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,gCAAgC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACtE,aAAA;AACH,SAAC,CAAC;QAEM,IAA0B,CAAA,0BAAA,GAAG,MAAkB;;;YAErD,CAAA,EAAA,GAAA,IAAI,CAAC,GAAG,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,EAAE,CAAC,SAAS,EAAE,MAAK;;AAC3B,gBAAA,MAAM,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC;AACxD,gBAAA,IAAI,UAAU,EAAE;AACd,oBAAA,MAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAV,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAE,UAAU,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAA6B,CAAC;AACvE,oBAAA,MAAM,OAAO,GAAG,UAAU,CAAC,SAAS,CAAC;AACrC,oBAAA,MAAM,GAAG,GAAG,MAAM,CAAC,eAAe,CAAC;AACnC,oBAAA,IAAI,OAAO;AAAG,wBAAA,OAAuB,CAAC,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAC9D,oBAAA,IAAI,QAAQ,EAAE;AACZ,wBAAA,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAC7B,wBAAA,MAAM,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;AAClC,wBAAA,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;wBAC7B,QAAQ,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAChC,qBAAA;AACF,iBAAA;AACH,aAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,aAAa,CAAC,oBAAoB,CAAC,KAAK,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAClD,aAAa,CAAC,oBAAoB,CAAC,KAAK,CAC3C,EAAA,EAAA,YAAY,EAAE,KAAK,EACnB,cAAc,EAAE,IAAI,CAAC,QAAQ,EAAA,CAAA,CAC7B,CAAC;AAEH,YAAA,OAAO,MAAM,CAAC,MAAM,EAAE,CAAC;AACzB,SAAC,CAAC;AA3FA,QAAA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1D,IAAI,CAAC,GAAG,GAAG,CAAA,EAAA,GAAA,MAAA,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,aAAa,EAAE,CAAC;KAC7E;AAyFF;;ACnGD,MAAM,kBACJ,SAAQ,oBAAoB,CAAA;AAa5B,IAAA,WAAA,CAAmB,KAAwB,EAAA;QACzC,KAAK,CAAC,KAAK,CAAC,CAAC;AAsCf;;AAEG;AACI,QAAA,IAAA,CAAA,mBAAmB,GAAG,CAAC,CAAa,KAAU;AACnD,YAAA,MAAM,GAAG,GAAI,CAAC,CAAC,MAA4B,CAAC,KAAK,CAAC;AAClD,YAAA,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;AACzB,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,oBAAoB,GAAG,CAAC,CAAa,KAAU;AACpD,YAAA,MAAM,GAAG,GAAI,CAAC,CAAC,MAA4B,CAAC,KAAK,CAAC;AAClD,YAAA,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAChC,SAAC,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,YAAY,GAAG,CAAO,CAAa,KAAmB,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC3D,YAAA,MAAM,KAAK,GAAI,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC;YACnD,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC;YAEvD,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;AAE7D,YAAA,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;AAC7B,YAAA,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,aAAa,CACpC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAC/C,CAAC;AACJ,SAAC,CAAA,CAAC;AAEF;;AAEG;AACI,QAAA,IAAA,CAAA,eAAe,GAAG,CAAC,KAAa,KAAU;;AAC/C,YAAA,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC;YACvE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC;AAEpD,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAGA,UAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9B,YAAA,MAAM,CAAC,GAAG,GAAG,CAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,CAAC,KAAI,CAAC,CAAC;AAC3B,YAAA,MAAM,CAAC,GAAG,GAAG,CAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,CAAC,KAAI,CAAC,CAAC;AAC3B,YAAA,MAAM,OAAO,GAAG,CAAA,MAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,GAAG,0CAAE,IAAI,KAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,MAAM,GAAG,UAAU,CAAC,cAAc,CACtC,YAAY,EACZ,MAAM,EACN,KAAK,aAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,KAAK,EACZ,OAAO,EACP,gBAAgB,CACjB,CAAC;AACF,YAAA,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACtC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACpD,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AACrD,YAAA,IAAI,gBAAgB,EAAE;AACpB,gBAAA,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC;AAC5D,aAAA;AACD,YAAA,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AAChC,SAAC,CAAC;AAEF;;;;AAIG;QACI,IAAU,CAAA,UAAA,GAAG,MAA0B,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;YAC5C,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;AAEtD,YAAA,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU;gBAAE,OAAO;YAEvC,QAAQ,CAAC,aAAa,CACrB,oBAAoB,CACF,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;YAC3C,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAE9D,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,gBAAgB,EAAE,CAAC;AAC5D,YAAA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,UAAU,CAAC,UAAU,CACjD,WAAW,EACX,UAAU,EACV,WAAW,EACX,KAAK,CACN,CAAC;AAEF,YAAA,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;AACzC,aAAA;AAAM,iBAAA;gBACL,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,GAAG,EAAE,CAAC;gBACrC,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;;gBAEvC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,KAAK,KAAI;oBACzC,MAAM,UAAU,GAAG,KAAoB,CAAC;AACxC,oBAAA,IAAI,UAAU,CAAC,WAAW,KAAK,WAAW;AACxC,wBAAA,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACtC,iBAAC,CAAC,CAAC;AACH,gBAAA,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;AACxD,aAAA;YAEA,QAAQ,CAAC,aAAa,CACrB,oBAAoB,CACF,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;YACvC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AAC7D,SAAC,CAAA,CAAC;;AAxIA,QAAA,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACpB,QAAA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AACxC,QAAA,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAErB,QAAA,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AACzB,QAAA,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;KAC/B;AAED;;AAEG;IACI,kBAAkB,GAAA;AACvB,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM;AACxC,YAAA,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC;AACnB,YAAA,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC;AACjB,SAAA,CAAC,CAAC,CAAC;AACJ,QAAA,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC,CAAC;KAC9C;AAED;;AAEG;AACI,IAAA,cAAc,CAAC,GAAY,EAAA;AAChC,QAAA,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;KACxB;AAED;;AAEG;AACI,IAAA,mBAAmB,CAAC,GAAY,EAAA;AACrC,QAAA,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;KAC7B;AAwGF;;AC9JD,MAAM,aAAc,SAAQ,eAAe,CAAA;AAOzC,IAAA,WAAA,CAAmB,KAAmB,EAAA;QACpC,KAAK,CAAC,KAAK,CAAC,CAAC;AAaf;;AAEG;QACK,IAAkB,CAAA,kBAAA,GAAG,MAAkB;AAC7C,YAAA,MAAM,QAAQ,GAAG,CAAC,CAAQ,KAAI;AAC5B,gBAAA,MAAM,GAAG,GAAI,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC;AACnD,gBAAA,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;AACtC,aAAC,CAAC;AACF,YAAA,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAExC,MAAM,MAAM,GAAG,aAAa,CAAC,aAAa,CAAC,KAAK,CAC3C,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,aAAa,CAAC,KAAK,CAAA,EAAA,EACpC,YAAY,EAAE,gBAAgB,EAC9B,cAAc,EAAE,QAAQ,EAAA,CAAA,CACxB,CAAC;YAEH,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACnD,YAAA,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC5C,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;AAE1C,YAAA,OAAO,YAAY,CAAC;AACtB,SAAC,CAAC;AAEF;;AAEG;QACK,IAAsB,CAAA,sBAAA,GAAG,MAAkB;AACjD,YAAA,MAAM,QAAQ,GAAG,CAAC,CAAQ,KAAI;AAC5B,gBAAA,MAAM,GAAG,GAAI,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC;AACnD,gBAAA,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AACjC,aAAC,CAAC;AACF,YAAA,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAEnC,MAAM,MAAM,GAAG,aAAa,CAAC,WAAW,CAAC,KAAK,CACzC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,WAAW,CAAC,KAAK,CAAA,EAAA,EAClC,YAAY,EAAE,WAAW,EACzB,cAAc,EAAE,QAAQ,EAAA,CAAA,CACxB,CAAC;AAEH,YAAA,OAAO,MAAM,CAAC,MAAM,EAAE,CAAC;AACzB,SAAC,CAAC;AAEF;;AAEG;AACK,QAAA,IAAA,CAAA,UAAU,GAAG,CAAC,KAAa,EAAE,IAAoB,KAAU;YACjE,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAChD,YAAA,UAAU,CAAC,SAAS,GAAG,KAAK,CAAC;AAC7B,YAAA,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAC/B,SAAC,CAAC;AAEF;;;;;AAKG;AACI,QAAA,IAAA,CAAA,kBAAkB,GAAG,CAAC,IAAoB,KAAU;AACzD,YAAA,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;;AAE1C,YAAA,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAM,CAAC,KAAK,CACxC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,MAAM,CAAC,KAAK,CAC7B,EAAA,EAAA,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EACvC,WAAW,EAAE,wBAAwB,EACrC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,EACnC,OAAO,EAAE,EAAE,IACX,CAAC;YACH,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAU,CAAC,CAAC;AAEpD,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC9C,YAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;;YAEpC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AAE/C,YAAA,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;;AAEzC,YAAA,MAAM,kBAAkB,GAAG,aAAa,CAAC,aAAa,CAAC,KAAK,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACvD,aAAa,CAAC,aAAa,CAAC,KAAK,CACpC,EAAA,EAAA,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,EACxC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,IAC9C,CAAC;YACH,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,EAAU,CAAC,CAAC;YACtD,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;YAC1D,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YAE/C,MAAM,eAAe,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,CACjD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC,UAAU,CAAC,KAAK,KACjC,OAAO,EAAE,YAAY,EACrB,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAA,CAAA,CAC/C,CAAC;YACH,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAChD,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,EAAU,CAAC,CAAC;YACnD,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AAE/C,YAAA,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;AAC9C,YAAA,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAE1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC9C,YAAA,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,YAAY,CAAC;AACvC,YAAA,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,EAAE,CAAC;AAC7B,YAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEhC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC1D,YAAA,IAAI,CAAC,iBAAiB,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC5C,YAAA,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AACxE,YAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC3C,SAAC,CAAC;AArHA,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,kBAAkB,CAAC;YAClC,UAAU,EAAE,KAAK,CAAC,UAAU;AAC5B,YAAA,OAAO,EAAE,IAAI;AACd,SAAA,CAAC,CAAC;AAEH,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AACxB,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrB,QAAA,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;KAC/B;AA6GF;;ACpID,MAAM,mBACJ,SAAQ,oBAAoB,CAAA;AAG5B,IAAA,WAAA,CAAmB,KAAwB,EAAA;QACzC,KAAK,CAAC,KAAK,CAAC,CAAC;KACd;AACF;;ACHD,MAAM,cAAe,SAAQ,eAAe,CAAA;AAK1C,IAAA,WAAA,CAAmB,KAAmB,EAAA;;QACpC,KAAK,CAAC,KAAK,CAAC,CAAC;AASf;;AAEG;AACK,QAAA,IAAA,CAAA,UAAU,GAAG,CAAC,KAAa,EAAE,IAAoB,KAAU;YACjE,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAChD,YAAA,UAAU,CAAC,SAAS,GAAG,KAAK,CAAC;AAC7B,YAAA,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAC/B,SAAC,CAAC;AAdA,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,mBAAmB,CAAC;YACnC,UAAU,EAAE,KAAK,CAAC,UAAU;AAC5B,YAAA,OAAO,EAAE,IAAI;AACd,SAAA,CAAC,CAAC;AAEH,QAAA,IAAI,CAAC,cAAc,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,EAAG,CAAA,iBAAiB,EAAE,CAAC;KAChF;AAUD;;;;;AAKG;AACI,IAAA,mBAAmB,CAAC,IAAoB,EAAA;AAC7C,QAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAC5B,QAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;KAC7B;AAES,IAAA,gBAAgB,CAAC,IAAoB,EAAA;;QAC7C,MAAM,SAAS,GAAmB,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAChE,QAAA,MAAM,iBAAiB,GAAG,IAAI,4BAA4B,CAAC;AACzD,YAAA,KAAK,EAAE,iBAAiB;YACxB,OAAO,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,cAAc,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,cAAc,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;;AAEpD,YAAA,cAAc,EAAE,MAAK,GAAG;AACzB,SAAA,CAAC,CAAC;QAEH,MAAM,YAAY,GAAqB,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AACvE,QAAA,YAAY,CAAC,EAAE,GAAG,6CAA6C,CAAC;AAChE,QAAA,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC7B,QAAA,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC;AACtB,QAAA,YAAY,CAAC,KAAK,GAAG,QAAQ,CAAC;AAC9B,QAAA,YAAY,CAAC,OAAO,GAAG,MAAK;;AAC1B,YAAA,MAAM,OAAO,GAAyB,CAAA,EAAA,GAAA,IAAI,CAAC,cAAc,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC;AACnG,YAAA,IAAG,OAAO,EAAE;AACV,gBAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAU,EAAS,CAAC,CAAC;AAC5E,aAAA;AACH,SAAC,CAAC;AACF,QAAA,YAAY,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QAErC,SAAS,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC;AAClD,QAAA,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;AAEpC,QAAA,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;KAC7B;AAES,IAAA,gBAAgB,CAAC,IAAoB,EAAA;QAC7C,MAAM,SAAS,GAAmB,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAChE,QAAA,SAAS,CAAC,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC;QAEpC,MAAM,WAAW,GAAoB,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACnE,QAAA,WAAW,CAAC,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC;;AAEtC,QAAA,WAAW,CAAC,SAAS,GAAG,iBAAiB,CAAC;QAE1C,MAAM,YAAY,GAAqB,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AACvE,QAAA,YAAY,CAAC,EAAE,GAAG,6CAA6C,CAAC;AAChE,QAAA,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC7B,QAAA,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC;AACtB,QAAA,YAAY,CAAC,KAAK,GAAG,QAAQ,CAAC;AAC9B,QAAA,YAAY,CAAC,OAAO,GAAG,MAAK;YAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAC3B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,kBAAkB,EAAE,EAC/C,IAAI,EACJ,CAAC,CACF,CAAC;;YAEF,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAC5C,YAAA,OAAO,CAAC,YAAY,CAClB,MAAM,EACN,gCAAgC,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAC9D,CAAC;AACF,YAAA,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;AAC7C,YAAA,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;AAC/B,YAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACnC,OAAO,CAAC,KAAK,EAAE,CAAC;AAChB,YAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACrC,SAAC,CAAC;AAEF,QAAA,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;AACnC,QAAA,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;AAEpC,QAAA,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;KAC7B;AAEF;;AC/FD;;;;;AAKG;AACH,MAAM,4BAA4B,CAAA;AAKhC;;AAEG;AACH,IAAA,WAAA,CAAmB,UAAuB,EAAA;AAS1C;;AAEG;QACI,IAAkB,CAAA,kBAAA,GAAG,MAAW;AACrC,YAAA,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;AAE5B,YAAA,MAAM,QAAQ,GAAG;AACf,gBAAA,WAAW,EAAE,IAAI,WAAW,CAAC,EAAE,UAAU,EAAE,CAAC;AAC5C,gBAAA,aAAa,EAAE,IAAI,aAAa,CAAC,EAAE,UAAU,EAAE,CAAC;AAChD,gBAAA,WAAW,EAAE,IAAI,WAAW,CAAC,EAAE,UAAU,EAAE,CAAC;AAC5C,gBAAA,aAAa,EAAE,IAAI,aAAa,CAAC,EAAE,UAAU,EAAE,CAAC;AAChD,gBAAA,YAAY,EAAE,IAAI,YAAY,CAAC,EAAE,UAAU,EAAE,CAAC;AAC9C,gBAAA,cAAc,EAAE,IAAI,cAAc,CAAC,EAAE,UAAU,EAAE,CAAC;aACnD,CAAC;AAEF,YAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC3B,SAAC,CAAC;AAxBA,QAAA,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;;AAG7B,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAExB,QAAA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;KACvB;AAoBD;;AAEG;IACI,gBAAgB,GAAA;;QACrB,MAAM,KAAK,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,CAAC;QAClD,OAAO,CAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,gBAAgB,EAAE,KAAI,EAAE,CAAC;KACxC;AAED;;AAEG;IACI,iBAAiB,GAAA;;QACtB,MAAM,KAAK,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,CAAC;QAClD,OAAO,CAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,iBAAiB,EAAE,KAAI,CAAC,CAAC;KACxC;AAED;;AAEG;IACI,eAAe,GAAA;;QACpB,MAAM,KAAK,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,CAAC;QACpD,OAAO,CAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,eAAe,EAAE,KAAI,EAAE,CAAC;KACvC;AAEM,IAAA,eAAe,CAAC,IAAY,EAAA;;AACjC,QAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,eAAe,CAAC,IAAI,CAAC,CAAC;KAC9D;AAED;;AAEG;IACI,oBAAoB,CAAC,kBAAkB,GAAG,KAAK,EAAA;;QACpD,MAAM,KAAK,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,CAAC;QAClD,KAAK,KAAA,IAAA,IAAL,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;KACjD;AAED;;AAEG;AACI,IAAA,gBAAgB,CAAC,OAAe,EAAA;;QACrC,MAAM,KAAK,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,CAAC;QACpD,KAAK,KAAA,IAAA,IAAL,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,gBAAgB,CAAC,OAAO,CAAC,CAAC;KAClC;AAED;;AAEG;IACI,qBAAqB,GAAA;;QAC1B,MAAM,KAAK,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,CAAC;QAClD,OAAO,CAAA,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAE,kBAAkB,KAAI,KAAK,CAAC;KAC3C;AACD;;AAEG;AACI,IAAA,cAAc,CAAC,KAAkB,EAAA;AACtC,QAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC9B;AAED;;AAEG;AACI,IAAA,cAAc,CAAC,GAA+B,EAAA;;AACnD,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,WAAW,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,EAAE,CAAC;AAC5B,QAAA,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;KACxB;AAED;;AAEG;IACI,cAAc,GAAA;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;AACF;;AC1HD,MAAM,WAAY,SAAQ,YAAY,CAAA;AAGpC,IAAA,WAAA,CAAmB,KAAgB,EAAA;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAmBR,IAAM,CAAA,MAAA,GAAG,MAAgB;AAC9B,YAAA,OAAO,SAAS,CAAC;AACnB,SAAC,CAAC;QAEK,IAAM,CAAA,MAAA,GAAG,MAAW;YACzB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AACrC,SAAC,CAAC;KAxBD;AAEM,IAAA,OAAO,IAAI,GAAA;AAChB,QAAA,OAAO,sBAAsB,CAAC;KAC/B;IAEM,OAAO,GAAA;AACZ,QAAA,OAAO,WAAW,CAAC,IAAI,EAAE,CAAC;KAC3B;IAEM,WAAW,GAAA;AAChB,QAAA,OAAO,gBAAgB,CAAC;KACzB;IAEM,QAAQ,GAAA;AACb,QAAA,OAAO,sBAAsB,CAAC;KAC/B;;AApBa,WAAM,CAAA,MAAA,GAAG,SAAH;;ACStB,MAAM,KAAK,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;AAE5D,MAAM,mBAAmB,GAAG,iBAAiB,CAAC;AAE9C;;;;AAIG;AACH,MAAM,uBACJ,SAAQ,gBAAmC,CAAA;AAO3C,IAAA,WAAA,CAAmB,KAAkC,EAAA;AACnD,QAAA,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAElB,QAAA,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,4BAA4B,CAAC,IAAI,CAAC,CAAC;KACrD;AAEM,IAAA,cAAc,CAAC,UAAuC,EAAA;QAC3D,OAAO;KACR;IAEM,OAAO,GAAA;QACZ,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;AAED;;AAEG;IACI,QAAQ,GAAA;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;AAED;;AAEG;AACI,IAAA,gBAAgB,CAAC,SAAyB,EAAA;;;QAI/C,MAAM,UAAU,GAAG,QAAQ,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,CACrE,KAAK,CACN,CAAC;QAEF,OAAO,UAAU,CAAC,UAAU,EAAE;AAC5B,YAAA,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AAC/C,SAAA;QAED,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;KACpD;AAED;;AAEG;IACI,UAAU,CAAC,YAA4B,EAAE,EAAA;QAC9C,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;;QAGrC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACjD,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AACzE,QAAA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAExC,QAAA,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAc,QAAQ,CAAC;YAAE,OAAO,IAAI,CAAC,WAAW,CAAC;QAEzE,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC,sBAAsB,EAAE,CAAC;AACvE,QAAA,IAAI,YAAY;AAAE,YAAA,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAEjD,IAAI,CAAC,SAAS,EAAE;YACd,QAAQ,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;YAC7C,OAAO,IAAI,CAAC,WAAW,CAAC;AACzB,SAAA;AAED,QAAA,IAAI,SAAS,KAAK,UAAU,CAAC,MAAM,EAAE;YACnC,QAAQ,CAAC,eAAe,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACnD,QAAQ,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;YAC7C,OAAO,IAAI,CAAC,WAAW,CAAC;AACzB,SAAA;AAED,QAAA,IAAI,SAAS,KAAK,WAAW,CAAC,MAAM,EAAE;YACpC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACrD,OAAO,IAAI,CAAC,WAAW,CAAC;AACzB,SAAA;QAED,QAAQ,CAAC,aAAa,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC/C,QAAQ,CAAC,aAAa,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAChD,QAAQ,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAEjD,IAAI,SAAS,KAAK,SAAS,CAAC,MAAM,IAAI,SAAS,KAAK,WAAW,CAAC,MAAM,EAAE;YACtE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/C,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC,uBAAuB,EAAE,CAAC;AACzE,YAAA,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;AAClC,SAAA;AAED,QAAA,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC7B,QAAQ,CAAC,aAAa,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAChD,SAAA;AAED,QAAA,IAAI,SAAS,KAAK,UAAU,CAAC,MAAM,EAAE;YACnC,QAAQ,CAAC,eAAe,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAClD,SAAA;QAED,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;AACF;;ACnHD;;AAEG;AACW,SAAU,iBAAiB,GAAA;AACvC,IAAA,MAAM,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;AACtC,QAAA,OAAO,EAAE;AACP,YAAA,QAAQ,EAAE,SAAS;AACnB,YAAA,WAAW,EAAE,EAAE;AACf,YAAA,GAAG,EAAE,SAAS;AACd,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,YAAY,EAAE,IAAI;AACR,SAAA;AACZ;;;;AAIG;QACH,UAAU,EAAE,UAAU,OAAgB,EAAA;AACpC,YAAA,IAAI,OAAO,EAAE;gBACX,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAClC,aAAA;SACF;AACD;;AAEG;QACH,KAAK,EAAE,UAAU,GAAU,EAAA;AACzB,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AACvB,YAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;SACxB;AACD;;AAEG;AACH,QAAA,QAAQ,EAAE,YAAA;;AACR,YAAA,MAAM,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;AAC/D,YAAA,MAAM,aAAa,GAAmB,CAAC,CAAC,OAAO,CAAC,MAAM,CACpD,KAAK,EACL,6BAA6B,EAC7B,YAAY,CACK,CAAC;AACpB,YAAA,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;YACvC,MAAM,WAAW,GAAwB,EAAE,CAAC;AAE5C,YAAA,MAAM,uBAAuB,GAAG,CAAC,CAAQ,KAAI;;AAC3C,gBAAA,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,CAC1B,OAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAG,KAAH,IAAA,IAAA,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAG,CAAE,gBAAgB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAG,CAAC,MAAM,CAAC,CAAA,EAAA,CAC9C,CAAC;AACF,gBAAA,IAAI,OAAO,GAAG,CAAC,EAAA,GAAA,CAAC,KAAD,IAAA,IAAA,CAAC,KAAD,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAC,CAAE,MAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAwB,CAAC;;AAEnE,gBAAA,IAAI,CAAC,OAAO;oBACV,OAAO,GAAG,CAAC,EAAA,GAAA,CAAC,KAAD,IAAA,IAAA,CAAC,KAAD,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAC,CAAE,MAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAA0B,CAAC;;gBAEnE,IAAI,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,uBAAP,OAAO,CAAE,OAAO,MAAK,GAAG;oBAAE,OAAO;AACrC,gBAAA,IAAI,OAAO,EAAE;;AAEX,oBAAA,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAClC,iBAAA;AACH,aAAC,CAAC;AAEF,YAAA,MAAM,YAAY,GAAG,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,YAAY,KAAI,EAAE,CAAC;AAE3D,YAAA,MAAM,WAAW,GAAG,CAAC,CAAQ,EAAE,IAAU,KAAI;;AAC3C,gBAAA,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;;AAE3C,gBAAA,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,wBAAwB,EAAE;AAC/C,oBAAA,IAAI,UAAU;AAAE,wBAAA,aAAa,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAC5D,iBAAA;AACD,gBAAA,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,mBAAmB,EAAE;AAC1C,oBAAA,IAAI,UAAU;AAAE,wBAAA,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AACtD,iBAAA;;gBAED,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,CAAC,YAAY,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,EAAE,CAAC;gBACxC,uBAAuB,CAAC,CAAC,CAAC,CAAC;;gBAG3B,IAAI,CAAC,QAAQ,EAAE,CAAC;AAChB,gBAAA,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;AACnC,aAAC,CAAC;YAEF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;AACxC,gBAAA,MAAM,IAAI,GAAS,YAAY,CAAC,GAAG,CAAC,CAAC;AACrC,gBAAA,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;gBAE3C,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAC/B,IAAI,CAAC,OAAO,EAAE,EACd,aAAa,EACb,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,WAAW,EAAE,EAClB,aAAa,CACd,CAAC;AAEF,gBAAA,IAAI,aAAa;AAAE,oBAAA,WAAW,CAAC,IAAI,CAAC,GAAwB,CAAC,CAAC;gBAE9D,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;gBAE9D,IAAI,CAAC,OAAO,CAAC,WAA2B,CAAC,GAAG,CAAC,GAAG,GAAwB,CAAC;AAC5E,aAAC,CAAC,CAAC;AAEH,YAAA,CAAC,CAAC,QAAQ,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;AACjD,YAAA,OAAO,YAAY,CAAC;SACrB;AAED;;AAEG;AACH,QAAA,gBAAgB,EAAE,UAChB,SAAiB,EACjB,YAA4B,EAC5B,KAAa,EACb,IAAY,EACZ,KAAK,GAAG,KAAK,EAAA;AAEb,YAAA,MAAM,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAChC,GAAG,EACH,GAAG,SAAS,CAAA,cAAA,CAAgB,EAC5B,YAAY,CACb,CAAC;AACF,YAAA,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;AACxB,YAAA,SAAS,CAAC,SAAS,GAAG,CAAa,UAAA,EAAA,IAAI,2BAA2B,CAAC;AACnE,YAAA,IAAI,KAAK,EAAE;AACT,gBAAA,MAAM,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,gBAAgB,EAAE,SAAS,CAAC,CAAC;AACpE,gBAAA,QAAQ,CAAC,SAAS,GAAG,CAAA,MAAA,CAAQ,CAAC;AAC/B,aAAA;AACD,YAAA,OAAO,SAAS,CAAC;SAClB;AAED;;;AAGG;AACH,QAAA,gBAAgB,EAAE,YAAA;;AAChB,YAAA,OAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,aAAa,CAAC;SACrD;AACF,KAAA,CAAC,CAAC;AAEF,IAAA,CAAC,CAAC,OAAO,CAAC,cAAsB,GAAG,UAAU,OAAiB,EAAA;QAC7D,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAa,CAAC;AACzB,SAAA;AACD,QAAA,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;AACrC,KAAC,CAAC;AACJ;;AC/IA;;;;AAIG;AACI,MAAM,gCAAgC,GAAG,CAC9C,KAAkB,EAClB,SAAsE,EACtE,aAA0B,KACiB;AAC3C,IAAA,MAAM,OAAO,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;AAC9C,IAAA,MAAM,UAAU,GAAG,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;AAC5D,IAAA,IAAI,CAAC,UAAU,IAAI,CAAC,OAAO;AAAE,QAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;IAE7D,IAAI,aAAa,GAAG,OAAO,CAAC;;AAG5B,IAAA,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,aAAa,CAAC,CAAC;AAC3D,IAAA,IAAI,CAAC,gBAAgB;AAAE,QAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;;AAGvD,IAAA,gBAAgB,CAAC,OAAO,CAAC,CAAC,eAAgC,KAAI;AAC5D,QAAA,MAAM,qBAAqB,GAAG,aAAa,CAAC,eAAe,CAAC,CAAC;AAE7D,QAAA,IAAI,qBAAqB,EAAE;AACzB,YAAA,aAAa,GAAG,SAAS,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;AAC3D,SAAA;AACH,KAAC,CAAC,CAAC;IAEH,KAAK,GAAG,qBAAqB,CAAC,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;AAE5D,IAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;AACjC,CAAC;;AClCD;;;;;;AAMG;AACI,MAAM,aAAa,GAAG,CAC3B,KAAkB,EAClB,KAA6B,KACd;AACf,IAAA,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;AAC1C,IAAA,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;AAAE,QAAA,OAAO,KAAK,CAAC;AAChE,IAAA,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,gCAAgC,CACtE,KAAK,EACL,CAAC,CAAkB,EAAE,CAAkB,KACrC,IAAI,CAAC,SAAS,CAAC,CAAgB,EAAE,CAAgB,CAAoB,EACvE,aAAa,CACd,CAAC;AAEF,IAAA,IAAI,MAAM,EAAE;QACV,KAAK,CAAC,MAAM,EAAE,CAAC;AAChB,KAAA;AAED,IAAA,OAAO,YAAY,CAAC;AACtB,CAAC;;ACxBD;;AAEG;AACI,MAAM,QAAQ,GAAG,CACtB,KAAkB,EAClB,KAA6B,KACd;AACf,IAAA,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;AAC1C,IAAA,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;AAAE,QAAA,OAAO,KAAK,CAAC;AAChE,IAAA,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,gCAAgC,CACtE,KAAK,EACL,CAAC,CAAkB,EAAE,CAAkB,KACrC,KAAK,CAAC,CAAgB,EAAE,CAAgB,CAAoB,EAC9D,aAAa,CACd,CAAC;AAEF,IAAA,IAAI,MAAM,EAAE;QACV,KAAK,CAAC,MAAM,EAAE,CAAC;QACf,KAAK,CAAC,mBAAmB,EAAE,CAAC;AAC5B,QAAA,KAAK,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;AACtC,KAAA;AAED,IAAA,OAAO,YAAY,CAAC;AACtB,CAAC;;ACnBD,MAAM,YAAY,GAAG,CACnB,KAA6B,EAC7B,WAAwB,EACxB,aAA0B,EAC1B,iBAA4B,KAC1B;;IACF,CAAA,EAAA,GAAA,WAAW,KAAX,IAAA,IAAA,WAAW,KAAX,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAW,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,EAAE,CAAC;AACjC,IAAA,WAAW,CAAC,SAAS,GAAG,SAAS,CAAC;AAClC,IAAA,IAAI,iBAAiB;AAAE,QAAA,WAAW,CAAC,QAAQ,GAAG,iBAAiB,CAAC;AAChE,IAAA,WAAW,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC;IAClD,WAAW,CAAC,QAAQ,CAAC,MAAK,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,WAAW,CAAC,OAAO,CAAK,EAAA,YAAY,CAAS,CAAC,CAAC;AACzE,IAAA,MAAM,OAAO,GAAG,aAAa,CAAC,YAAY,CAAC;AAC3C,IAAA,IAAI,OAAO,EAAE;AACX,QAAA,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE;AAC7B,YAAA,YAAY,EAAE,KAAK;AACnB,YAAA,SAAS,EAAE,KAAK;AACjB,SAAA,CAAC,CAAC;AACH,QAAA,WAAW,CAAC,YAAY,GAAG,OAAO,CAAC;AACpC,KAAA;AACD,IAAA,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AAC5B,IAAA,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;AACnC,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CACjB,SAAsB,EACtB,YAA6B,EAC7B,KAA6B,EAC7B,OAAgB,KACd;AACF,IAAA,IAAI,CAAC,SAAS;QAAE,OAAO;AACvB,IAAA,MAAM,OAAO,GAAG,sBAAsB,CAAC,SAAS,CAAC,CAAC;AAElD,IAAA,IAAI,OAAO,EAAE;QACX,MAAM,WAAW,GAAG,UAAU,CAC5B,OAAsB,EACtB,YAA2B,CAC5B,CAAC;AAEF,QAAA,IAAI,WAAW,EAAE;AACf,YAAA,IAAI,OAAO,CAAC;AACZ,YAAA,MAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC;YAChD,MAAM,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,KAAK,SAAS,CAAC;;;AAG3D,YAAA,MAAM,KAAK,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAC9C,IAAI;;;;AAIF,gBAAA,IAAI,UAAU,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;oBACrC,OAAO,GAAGA,UAAC,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC/C,oBAAA,MAAM,MAAM,GAAG,IAAKA,UAAS,CAAC,OAAO,CAAC,OAAO,EACxC,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,SAAS,CAAC,OAAO,EACpB,CAAC;AACH,oBAAA,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AACxC,iBAAA;AAAM,qBAAA;;;AAGL,oBAAA,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;AACvB,wBAAA,OAAO,GAAGA,UAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;AACpD,wBAAA,MAAM,MAAM,GAAG,IAAKA,UAAS,CAAC,OAAO,CAAC,OAAO,EACxC,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,SAAS,CAAC,OAAO,EACpB,CAAC;wBACH,MAAM,UAAU,GACd,KAAK,KAAK,CAAC,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBACzD,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AACrD,qBAAC,CAAC,CAAC;AACJ,iBAAA;AACF,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;AACd,gBAAA,OAAO,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;AAClD,aAAA;AACF,SAAA;AAAM,aAAA;AACL,YAAA,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAC9B,SAAA;AACF,KAAA;AACH,CAAC,CAAC;AAEF;;;;;;AAMG;AACI,MAAM,QAAQ,GAAG,CACtB,KAAkB,EAClB,KAA6B,EAC7B,SAAS,GAAG,KAAK,KACT;AACR,IAAA,MAAM,YAAY,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;AACnD,IAAA,MAAM,kBAAkB,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;AAC9C,IAAA,MAAM,kBAAkB,GAAG,KAAK,CAAC,SAAS,KAAK,QAAQ,CAAC;IAExD,IAAI,kBAAkB,IAAI,YAAY,EAAE;AACtC,QAAA,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;;;;AAI1C,QAAA,IACE,SAAS;YACT,kBAAkB;YAClB,aAAa;YACb,WAAW,CAAC,aAAa,CAAC,EAC1B;YACA,UAAU,CAAC,aAAa,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AACtD,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC;;AAE5C,YAAA,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;iBACpB,MAAM,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,SAAS,CAAC,CAAC;AAC7C,iBAAA,OAAO,CAAC,CAAC,SAAS,KAAI;;AAErB,gBAAA,MAAM,mBAAmB,GACvB,CAAA,SAAS,KAAT,IAAA,IAAA,SAAS,uBAAT,SAAS,CAAE,WAAW,OAAK,aAAa,aAAb,aAAa,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAb,aAAa,CAAE,WAAW,CAAA,CAAC;gBACxD,MAAM,OAAO,GAAG,mBAAmB,CAAC;gBACpC,UAAU,CAAC,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AACtD,aAAC,CAAC,CAAC;AACN,SAAA;AACF,KAAA;AACH,CAAC;;AChFD;AACA;AAEA;AACAA,UAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAACA,UAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAC5CA,UAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAEA,UAAC,CAAC,IAAI,CAAC,OAAe,CAAC,SAAS,CAAC,CAAC;AAC1DA,UAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAEA,UAAC,CAAC,IAAI,CAAC,OAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;AAS/E;;;;AAIG;AACH,MAAM,gBACJ,SAAQ,iBAAiB,CAAA;AAMzB;;AAEG;AACH,IAAA,WAAA,CAAmB,KAA8B,EAAA;QAC/C,KAAK,CAAC,KAAK,CAAC,CAAC;AAmMf;;AAEG;AACK,QAAA,IAAA,CAAA,eAAe,GAAG,CAAC,CAAe,KAAU;AAClD,YAAA,IAAI,KAAK,GAAgB,CAAC,CAAC,KAAK,CAAC;AACjC,YAAA,IAAI,CAAC,KAAK;gBAAE,OAAO;AAEnB,YAAA,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;YAC9B,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;AAClD,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAE9B,YAAA,MAAM,kBAAkB,GAAG,YAAY,CAAC,qBAAqB,EAAE,CAAC;AAEhE,YAAA,IAAI,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,QAAQ;AAAE,gBAAA,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;AAE9C,YAAA,IACE,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,MAAM;AAClC,gBAAA,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,EAChC;;AAEA,gBAAA,IAAI,kBAAkB;AAAE,oBAAA,KAAK,GAAG,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;;AAEvD,oBAAA,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACrC,aAAA;AAED,YAAA,IACE,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,MAAM;AAClC,gBAAA,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM;AAChC,gBAAA,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,EAChC;;AAEA,gBAAA,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAAC;AAC5C,aAAA;;AAGD,YAAA,IACE,CAAC,CAAC,SAAS,KAAK,kBAAkB,CAAC,MAAM;AACzC,gBAAA,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,EAChC;AACA,gBAAA,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACtB,gBAAA,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AACpC,aAAA;AACH,SAAC,CAAC;AA8EF;;AAEG;AACK,QAAA,IAAA,CAAA,eAAe,GAAG,CAAC,CAAoB,KAAU;;AACvD,YAAA,MAAM,UAAU,GAAG,CAAC,CAAC,MAAqB,CAAC;AAC3C,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAE9B,YAAA,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;AACvC,YAAA,IAAI,SAAS,EAAE;gBACb,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;AACpD,gBAAA,IAAI,QAAQ,EAAE;AACZ,oBAAA,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;oBAChC,OAAO;AACR,iBAAA;AACF,aAAA;AAED,YAAA,IAAI,CAAA,CAAA,EAAA,GAAA,CAAC,KAAA,IAAA,IAAD,CAAC,KAAD,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAC,CAAE,aAAa,0CAAE,OAAO,KAAI,KAAK,CAAC,aAAa,EAAE;AACpD,gBAAA,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBACnC,OAAO;AACR,aAAA;AAED,YAAA,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAI;;AACpC,gBAAA,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBACzB,CAAA,EAAA,GAAA,CAAC,KAAD,IAAA,IAAA,CAAC,KAAD,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAC,CAAE,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,EAAE,CAAC;gBACvB,IAAI,CAAA,EAAA,GAAA,CAAC,KAAA,IAAA,IAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,SAAS,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,EAAE;AAC1B,oBAAA,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;AACvB,iBAAA;AACH,aAAC,CAAC,CAAC;AACH,YAAA,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACnC,YAAA,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YACxC,IAAI,CAAC,aAAa,CAAC,UAAU,KAAA,IAAA,IAAV,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAV,UAAU,CAAE,SAAS,CAAC,CAAC;YAE1C,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAElD,QAAQ,CAAC,aAAa,CACrB,oBAAoB,CACF,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;;;AAGzC,SAAC,CAAC;AAlWA,QAAA,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;KACxB;AAED;;;;AAIG;AACI,IAAA,UAAU,CACf,SAAqD,EAAA;;QAGrD,IAAI,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;AAClD,QAAA,OAAO,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;KACpC;AAED;;AAEG;IACI,IAAI,GAAA;QACT,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC9C;AAED;;AAEG;IACI,QAAQ,GAAA;AACb,QAAA,OAA+B,KAAK,CAAC,QAAQ,EAAE,CAAC;KACjD;AAED;;AAEG;IACI,WAAW,GAAA;AAChB,QAAA,OAAkC,KAAK,CAAC,WAAW,EAAE,CAAC;KACvD;AACD;;AAEG;IACI,QAAQ,GAAA;AACb,QAAA,OAA+B,KAAK,CAAC,QAAQ,EAAE,CAAC;KACjD;AAED;;AAEG;IACO,cAAc,GAAA;QACtB,OAAO,IAAI,wBAAwB,EAAE,CAAC;KACvC;AAED;;AAEG;IACO,WAAW,GAAA;AACnB,QAAA,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;KACxC;AAED;;AAEG;IACI,UAAU,GAAA;AACf,QAAA,IAAI,IAAI,CAAC,OAAO,IAAI,SAAS,EAAE;AAC7B,YAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AACrC,SAAA;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;AAEM,IAAA,aAAa,CAAC,SAAyB,EAAA;AAC5C,QAAA,IAAI,IAAI,CAAC,OAAO,IAAI,SAAS;YAAE,OAAO;AACtC,QAAA,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;KAC1C;AAED;;AAEG;IACO,aAAa,GAAA;QACrB,OAAO,IAAI,uBAAuB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;KACpD;AAED;;;;AAIG;AACI,IAAA,UAAU,CAAC,OAAgB,EAAA;;AAChC,QAAA,IAAI,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;;YAE/B,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAEpC,YAAA,MAAM,GAAG,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,MAAM,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,aAAa,EAAE,CAAC;;AAEvD,YAAA,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,GAAG,KAAA,IAAA,IAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,UAAU,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;AAC7C,aAAA;AAAM,iBAAA;gBACL,GAAG,KAAA,IAAA,IAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,aAAa,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;gBAE/C,IAAI,CAAC,cAAc,EAAE,CAAC;AACvB,aAAA;AACF,SAAA;KACF;IAEM,sBAAsB,GAAA;QAC3B,MAAM,KAAK,GAAgB,EAAE,CAAC;AAE9B,QAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AACnE,QAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,QAAQ,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7D,QAAA,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,UAAU,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AACjE,QAAA,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAEnE,QAAA,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,UAAU,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AACjE,QAAA,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,YAAY,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;QAErE,KAAK,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,kBAAkB,CAAC;AACxD,YAAA,WAAW,EAAE,IAAI;AAClB,SAAA,CAAC,CAAC;;;;;AAOH,QAAA,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,SAAS,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAC/D,QAAA,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,SAAS,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAE/D,QAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,QAAQ,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAE7D,QAAA,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,YAAY,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AACrE,QAAA,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,aAAa,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AACvE,QAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,QAAQ,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7D,QAAA,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,UAAU,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;AAEjE,QAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;KAC3B;AAED;;AAEG;IACO,gBAAgB,GAAA;;;AAExB,QAAA,MAAM,GAAG,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,MAAM,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,aAAa,EAAE,CAAC;QAEvD,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC,kBAAkB,EAAE,CAAC;QAClD,IAAI,CAAC,sBAAsB,EAAE,CAAC;AAC9B,QAAA,iBAAiB,EAAE,CAAC;AACpB,QAAA,IAAI,CAAC,gCAAgC,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,qBAAqB,GAAGA,UAAC,CAAC,OAAO,CAAC,cAAc,CAAC;AACpD,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,YAAY,EAAE,IAAI;AACnB,SAAA,CAAC,CAAC;AACH,QAAA,IAAG,IAAI,CAAC,SAAS,EAAE,EAAE;YACnB,GAAG,KAAA,IAAA,IAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,UAAU,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;AAC7C,SAAA;;AAGD,QAAA,GAAG,KAAH,IAAA,IAAA,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAG,CAAE,EAAE,CAAC,cAAqB,EAAE,IAAI,CAAC,eAAsB,CAAC,CAAC;AAC5D,QAAA,GAAG,aAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,EAAE,CAAC,SAAS,EAAE,MAAM,IAAI,CAAC,gCAAgC,CAAC,GAAG,CAAC,CAAC,CAAC;QACrE,GAAG,KAAA,IAAA,IAAH,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAH,GAAG,CAAE,EAAE,CAAC,OAAO,EAAE,MAAK;;AACpB,YAAA,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,IAAI,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAO,CAAC,QAAQ,EAAE,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAW,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,YAAY,EAAE;gBAAE,OAAO;AAC5D,YAAA,IACG,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAoB,CAAC,KAAK;AACnE,iBAAA,MAAM,KAAK,MAAM;gBAEpB,OAAO;YACT,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC;AAC/C,YAAA,IAAI,QAAQ,EAAE;AACZ,gBAAA,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACtC,gBAAA,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAC7C,aAAA;AACD,YAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,kBAAkB,EAAE,CAAC;AACvC,SAAC,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;AAClD,QAAA,MAAM,gBAAgB,GAAG,CAAC,CAAgB,EAAE,IAAuB,KAAI;AACrE,YAAA,IAAI,CAAC,CAAC,OAAO,KAAK,SAAS,EAAE;AAC3B,gBAAA,MAAM,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;gBAC7C,IAAI,WAAW,aAAX,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAX,WAAW,CAAE,YAAY,EAAE,EAAE;oBAC/B,IAAI,CAAC,WAAW,CAAC,CAAC;AACnB,iBAAA;AACF,aAAA;AACH,SAAC,CAAC;QACF,MAAM,eAAe,GAAG,CAAC,CAAgB,KACvC,gBAAgB,CAAC,CAAC,EAAE,CAAC,WAAW,KAAK,WAAW,KAAX,IAAA,IAAA,WAAW,KAAX,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAW,CAAE,OAAO,EAAE,CAAC,CAAC;QAC/D,MAAM,aAAa,GAAG,CAAC,CAAgB,KACrC,gBAAgB,CAAC,CAAC,EAAE,CAAC,WAAW,KAAK,WAAW,KAAX,IAAA,IAAA,WAAW,KAAX,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAW,CAAE,MAAM,EAAE,CAAC,CAAC;AAE9D,QAAA,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;AACtD,QAAA,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAElD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACzC,OAAO,CAAC,YAAY,CAAC,CAAC;KACvB;AA8CD;;;;AAIG;AACI,IAAA,mBAAmB,CAAC,KAAkB,EAAA;QAC3C,KAAK;aACF,EAAE,CAAC,OAAO,EAAEA,UAAC,CAAC,QAAQ,CAAC,eAAe,CAAC;aACvC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QAC3C,KAAK,CAAC,EAAE,CAAC,WAAkB,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAC3D,KAAK,CAAC,EAAE,CAAC,UAAiB,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AACzD,QAAA,IAAI,KAAK,CAAC,SAAS,KAAK,QAAQ,EAAE;YAChC,YAAY,CAAC,4BAA4B,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AACnE,SAAA;KACF;AAED;;AAEG;AACI,IAAA,gCAAgC,CAAC,GAAoB,EAAA;AAC1D,QAAA,IAAI,CAAC,GAAG;YAAE,OAAO;QACjB,MAAM,cAAc,GAClB,CAAC,YAAY;YACX,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;AAC3D,YAAA,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;AACjC,QAAA,MAAM,IAAI,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;;AAG3B,QAAA,MAAM,CAAC,eAAe,GAAG,IAAI,IAAI,CAAC,GAAG,MAAM,GAAG,cAAc,GAAG,GAAG,CAAC;KACpE;AAED;;AAEG;AACI,IAAA,gBAAgB,CAAC,EAAe,EAAA;AACrC,QAAA,IAAI,EAAE,KAAF,IAAA,IAAA,EAAE,uBAAF,EAAE,CAAE,KAAK,EAAE;YACbA,UAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;AAClD,SAAA;AAAM,aAAA;AACL,YAAA,IAAI,EAAE,KAAF,IAAA,IAAA,EAAE,KAAF,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAE,CAAE,QAAQ;AAAE,gBAAA,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;AAChD,SAAA;KACF;AAED;;AAEG;AACK,IAAA,iBAAiB,CAAC,CAAY,EAAA;AACpC,QAAA,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,YAAY,EAAE;YAAE,OAAO;AAC3C,QAAA,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAqB,CAAC,CAAC;KAChD;AAED;;AAEG;AACI,IAAA,gBAAgB,CAAC,EAAe,EAAA;AACrC,QAAA,IAAI,EAAE,KAAF,IAAA,IAAA,EAAE,uBAAF,EAAE,CAAE,KAAK,EAAE;YACbA,UAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;AACrD,SAAA;AAAM,aAAA;AACL,YAAA,IAAI,EAAE,KAAF,IAAA,IAAA,EAAE,KAAF,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAE,CAAE,QAAQ;AAAE,gBAAA,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;AAC7C,SAAA;KACF;AAED;;;;AAIG;AACK,IAAA,gBAAgB,CAAC,CAAY,EAAA;;AACnC,QAAA,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,YAAY,EAAE;YAAE,OAAO;QAC3C,IACE,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW;YAC1C,CAAC,CAAC,MAAsB,CAAC,WAAW;YAErC,OAAO;AACT,QAAA,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAqB,CAAC,CAAC;KAChD;AA2CF;;AChbY,MAAA,wBAAwB,GAGjC;AACF,IAAA,OAAO,EAAE,MAAM,wBAAwB,CAAC,IAAI;IAC5C,UAAU,EAAE,CAAC,KAAK,KAAK,IAAI,gBAAgB,CAAC,KAAK,CAAC;;;;;"}